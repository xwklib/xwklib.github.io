{"meta":{"title":"What a nice Blog","subtitle":"愿天堂没有ddl","description":"哈哈哈哈哈哈哈哈","author":"XWK","url":"https://wkxuan.cn","root":"/"},"pages":[{"title":"","date":"2022-10-20T05:00:34.205Z","updated":"2022-10-15T11:47:11.578Z","comments":true,"path":"about/index.html","permalink":"https://wkxuan.cn/about/index.html","excerpt":"","text":"做一些自己喜欢做的事"},{"title":"","date":"2022-10-15T11:47:11.590Z","updated":"2022-10-15T11:47:11.590Z","comments":true,"path":"self/Kimbiedark.css","permalink":"https://wkxuan.cn/self/Kimbiedark.css","excerpt":"","text":"/* Name: Kimbie (dark) Author: Jan T. Sott License: Creative Commons Attribution-ShareAlike 4.0 Unported License URL: https://github.com/idleberg/Kimbie-highlight.js */ /* 新添加的內容 ------------------------------------- --hl-color 代碼框字體顔色 【必須】 (把下面.hljs的 color複製到這裏來) --hl-bg 代碼框背景色 【必須】 (把下面.hljs的 background複製到這裏來) --hltools-bg: #321a0f 代碼框頂部工具欄背景色 【可選】(如果你關掉了 copy、lang 和 shrink,可不用配置這個） --hltools-color: #fff 代碼框頂部工具欄字體顔色 【可選】(如果你關掉了 copy、lang 和 shrink,可不用配置這個） --hlnumber-bg: #221a0f 代碼框行數背景色 【可選】(如果已經關掉 line_number,可以不用配置這個) --hlnumber-color: #fff 代碼框行數字體顔色 【可選】 (如果已經關掉 line_number,可以不用配置這個) --hlscrollbar-bg: #d3af86 代碼框滾動條顔色 【可選】（默認為主題主顔色） --hlexpand-bg: #d3af86 代碼框底部展開背景色 【可選】(如果已經關掉 highlight_height_limit,可以不用配置這個) */ :root { --hl-color: #d3af86; --hl-bg: #221a0f; --hltools-bg: #321a0f; --hltools-color: #fff; --hlnumber-bg: #221a0f; --hlnumber-color: #fff; --hlscrollbar-bg: #d3af86; --hlexpand-bg: #d3af86; } /* Kimbie Comment */ .hljs-comment, .hljs-quote { color: #d6baad; } /* Kimbie Red */ .hljs-variable, .hljs-template-variable, .hljs-tag, .hljs-name, .hljs-selector-id, .hljs-selector-class, .hljs-regexp, .hljs-meta { color: #dc3958; } /* Kimbie Orange */ .hljs-number, .hljs-built_in, .hljs-builtin-name, .hljs-literal, .hljs-type, .hljs-params, .hljs-deletion, .hljs-link { color: #f79a32; } /* Kimbie Yellow */ .hljs-title, .hljs-section, .hljs-attribute { color: #f06431; } /* Kimbie Green */ .hljs-string, .hljs-symbol, .hljs-bullet, .hljs-addition { color: #889b4a; } /* Kimbie Purple */ .hljs-keyword, .hljs-selector-tag, .hljs-function { color: #98676a; } /* 更改的內容 把.hljs改為 #article-container figure.highlight .hljs *、 /* ------------------------------------- */ #article-container figure.highlight .hljs { display: block; overflow-x: auto; background: #221a0f; color: #d3af86; padding: 0.5em; } .hljs-emphasis { font-style: italic; } .hljs-strong { font-weight: bold; }"},{"title":"","date":"2022-11-03T12:12:27.623Z","updated":"2022-11-03T12:12:27.623Z","comments":true,"path":"self/duotone.css","permalink":"https://wkxuan.cn/self/duotone.css","excerpt":"","text":"/* 新添加的內容 ------------------------------------- --hl-color 代碼框字體顔色 【必須】 (把下面 pre[class*=\"language-\"]的 color 複製到這裏來) --hl-bg 代碼框背景色 【必須】 (把下面 pre[class*=\"language-\"]的 background複製到這裏來) --hltools-bg: #321a0f 代碼框頂部工具欄背景色 【可選】(如果你關掉了 copy、lang 和 shrink,可不用配置這個） --hltools-color: #fff 代碼框頂部工具欄字體顔色 【可選】(如果你關掉了 copy、lang 和 shrink,可不用配置這個） --hlnumber-bg: #221a0f 代碼框行數背景色 【可選】(如果已經關掉 line_number,可以不用配置這個) --hlnumber-color: #fff 代碼框行數字體顔色 【可選】 (如果已經關掉 line_number,可以不用配置這個) --hlscrollbar-bg: #d3af86 代碼框滾動條顔色 【可選】（默認為主題主顔色） --hlexpand-bg: #d3af86 代碼框底部展開背景色 【可選】(如果已經關掉 highlight_height_limit,可以不用配置這個) */ :root { /* --hl-color: #728fcb; */ /* --hl-bg: #faf8f5; */ --hltools-bg: xxxxxxx; --hltools-color: xxxxxxx; --hlnumber-bg: xxxxxxx; --hlnumber-color: xxxxxxxx; --hlscrollbar-bg: xxxxx; --hlexpand-bg: xxxxxxx } /* ------------------------------------- */ /* Name: Duotone Light Author: Simurai, adapted from DuoTone themes for Atom (http://simurai.com/projects/2016/01/01/duotone-themes) Conversion: Bram de Haan (http://atelierbram.github.io/Base2Tone-prism/output/prism/prism-base2tone-morning-light.css) Generated with Base16 Builder (https://github.com/base16-builder/base16-builder) */ /* 這些可以刪除（可留着，如果有衝突，請刪除） */ /* ------------------------------------- */ code[class*=\"language-\"], pre[class*=\"language-\"] { font-family: Consolas, Menlo, Monaco, \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Liberation Mono\", \"Nimbus Mono L\", \"Courier New\", Courier, monospace; font-size: 14px; line-height: 1.375; direction: ltr; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; -moz-tab-size: 4; -o-tab-size: 4; tab-size: 4; -webkit-hyphens: none; -moz-hyphens: none; -ms-hyphens: none; hyphens: none; /* background: #faf8f5; */ /* color: #728fcb; */ } pre>code[class*=\"language-\"] { font-size: 1em; } pre[class*=\"language-\"]::-moz-selection, pre[class*=\"language-\"] ::-moz-selection, code[class*=\"language-\"]::-moz-selection, code[class*=\"language-\"] ::-moz-selection { text-shadow: none; background: #faf8f5; } pre[class*=\"language-\"]::selection, pre[class*=\"language-\"] ::selection, code[class*=\"language-\"]::selection, code[class*=\"language-\"] ::selection { text-shadow: none; background: #faf8f5; } /* Code blocks */ pre[class*=\"language-\"] { padding: 1em; margin: .5em 0; overflow: auto; } /* Inline code */ :not(pre)>code[class*=\"language-\"] { padding: .1em; border-radius: .3em; } /* ------------------------------------- */ /* 到這裏為止，可以刪除 */ .token.comment, .token.prolog, .token.doctype, .token.cdata { color: #b6ad9a; } .token.punctuation { color: #b6ad9a; } .token.namespace { opacity: .7; } .token.tag, .token.operator, .token.number { color: #063289; } .token.property, .token.function { color: #b29762; } .token.tag-id, .token.selector, .token.atrule-id { color: #2d2006; } code.language-javascript, .token.attr-name { color: #896724; } code.language-css, code.language-scss, .token.boolean, .token.string, .token.entity, .token.url, .language-css .token.string, .language-scss .token.string, .style .token.string, .token.attr-value, .token.keyword, .token.control, .token.directive, .token.unit, .token.statement, .token.regex, .token.atrule { color: #728fcb; } .token.placeholder, .token.variable { color: #93abdc; } .token.deleted { text-decoration: line-through; } .token.inserted { border-bottom: 1px dotted #2d2006; text-decoration: none; } .token.italic { font-style: italic; } .token.important, .token.bold { font-weight: bold; } .token.important { color: #896724; } .token.entity { cursor: help; } pre>code.highlight { outline: .4em solid #896724; outline-offset: .4em; } /* overrides color-values for the Line Numbers plugin * http://prismjs.com/plugins/line-numbers/ */ .line-numbers .line-numbers-rows { border-right-color: #ece8de; } .line-numbers-rows>span:before { color: #cdc4b1; } /* overrides color-values for the Line Highlight plugin * http://prismjs.com/plugins/line-highlight/ */ .line-highlight { background: rgba(45, 32, 6, 0.2); background: -webkit-linear-gradient(left, rgba(45, 32, 6, 0.2) 70%, rgba(45, 32, 6, 0)); background: linear-gradient(to right, rgba(45, 32, 6, 0.2) 70%, rgba(45, 32, 6, 0)); }"},{"title":"tags","date":"2022-10-15T11:47:11.591Z","updated":"2022-10-15T11:47:11.591Z","comments":true,"path":"tags/index.html","permalink":"https://wkxuan.cn/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"","slug":"chatWithChatGPT","date":"2022-12-07T13:54:54.146Z","updated":"2022-12-07T14:12:26.438Z","comments":true,"path":"/0.html","link":"","permalink":"https://wkxuan.cn/0.html","excerpt":"","text":"ChatGPT !function () { try { var d = document.documentElement, c = d.classList; c.remove('light', 'dark'); var e = localStorage.getItem('theme'); if ('system' === e || (!e && true)) { var t = '(prefers-color-scheme: dark)', m = window.matchMedia(t); if (m.media !== t || m.matches) { d.style.colorScheme = 'dark'; c.add('dark') } else { d.style.colorScheme = 'light'; c.add('light') } } else if (e) { c.add(e || '') } if (e === 'light' || e === 'dark') d.style.colorScheme = e } catch (e) { } }() Open sidebar 怎样在Python中调用chatgpt 如果您想在Python中使用chatgpt，您可以使用OpenAI的GPT-3 Python模块。首先，您需要安装该模块，然后您可以使用以下代码进行调用： Copy codeimport openai_secret_manager assert \"openai\" in openai_secret_manager.get_services() secrets = openai_secret_manager.get_secrets(\"openai\") print(secrets) 这段代码会打印出您在OpenAI上注册时获取的API密钥。您可以使用这些凭据来访问GPT-3模型，并使用该模型进行文本生成。 例如，您可以使用以下代码来生成文本： Copy codeimport openai openai.api_key = secrets[\"api_key\"] prompt = \"What is the capital of France?\" completions = openai.Completion.create( engine=\"text-davinci-002\", prompt=prompt, max_tokens=1024, temperature=0.5, top_p=1, frequency_penalty=0, presence_penalty=0 ) print(completions.choices[0].text) 上面的代码将使用GPT-3模型来生成一段文本，该文本回答了“法国的首都是什么？”这个问题。您可以修改prompt变量来更改问题，并通过更改模型的参数来调整生成文本的方式。 希望这些信息能够帮助您。 你提供的方法支持上下文吗 是的，GPT-3模型支持上下文。您可以通过在prompt变量中包含上下文文本来使用上下文，例如： Copy codeprompt = \"The capital of France is Paris. What is the population of Paris?\" 在这个例子中，我们在提问关于巴黎人口的问题之前，先提供了一条声明，告诉GPT-3模型巴黎是法国的首都。因此，在生成文本时，模型会使用这个上下文来确定如何回答问题。 希望这些信息能够帮助您。 怎样将上面的内容包装成一个插件供用户使用呢？就像你我正在对话的这样 如果您想将GPT-3模型作为一个插件供用户使用，您可以通过以下方法来实现： 使用Python创建一个函数，该函数接受用户的输入，并使用OpenAI的GPT-3 Python模块来生成回复文本。 在函数中设置一些参数，用于调整模型的行为，例如文本生成的温度、概率分布等。 将函数打包成一个插件，并提供给用户使用。 例如，您可以使用以下代码来创建一个函数，该函数可以使用GPT-3模型来回答问题： Copy codeimport openai import openai_secret_manager assert \"openai\" in openai_secret_manager.get_services() secrets = openai_secret_manager.get_secrets(\"openai\") openai.api_key = secrets[\"api_key\"] def generate_response(prompt, temperature=0.5): completions = openai.Completion.create( engine=\"text-davinci-002\", prompt=prompt, max_tokens=1024, temperature=temperature, top_p=1, frequency_penalty=0, presence_penalty=0 ) return completions.choices[0].text 这个函数接受两个参数：prompt和temperature。prompt变量指定了用户的输入，而temperature变量指定了文本生成时使用的温度值。在函数中，我们使用OpenAI的Python模块来访问GPT-3模型，并使用提供的prompt和temperature参数来生成文本。然后，我们将生成的文本作为函数的返回值。 在函数创 继续 在函数创建完成之后，您可以将它打包成一个插件，并提供给用户使用。例如，您可以使用Python的插件框架（例如Flask、Django等）来创建一个Web应用程序，提供一个网页界面，用户可以在其中输入问题并获得模型的回答。 另外，您也可以将插件打包成一个单独的库，提供给用户下载和安装。用户可以在自己的项目中引用该库，并调用其中的函数来使用GPT-3模型。 希望这些信息能够帮助您。 在你刚刚说的gpt-3模型支持上下文的例子中，我想指的是与用户交互的上下文，而不是一个字符串中包含内容的上下文 是的，GPT-3模型支持多轮对话，并能够在多轮对话中记住上下文。 如果您想在多轮对话中使用GPT-3模型，您可以在每次调用模型时将前一轮的对话文本作为prompt参数的一部分，例如： Copy code# First round of conversation prompt = \"Hello, how are you?\" response = generate_response(prompt) print(response) # Second round of conversation prompt = f\"&#123;prompt&#125; &#123;response&#125; What do you like to do?\" response = generate_response(prompt) print(response) 在这个例子中，我们在每一轮对话中都把前一轮的文本作为prompt参数的一部分，这样GPT-3模型就可以在多轮对话中保持上下文。 希望这些信息能够帮助您。 那么如果有多个用户该怎样做呢 如果有多个用户同时使用GPT-3模型进行对话，您可以使用会话ID来维护每个用户的会话状态。 每当一个用户开始对话时，您可以为该用户生成一个唯一的会话ID，并将该ID保存在您的应用程序中。然后，您可以在每一轮对话中将该ID作为prompt参数的一部分传递给GPT-3模型，例如： Copy code# Generate a unique session ID for the user session_id = generate_session_id() # First round of conversation prompt = f\"&#123;session_id&#125; Hello, how are you?\" response = generate_response(prompt) print(response) # Second round of conversation prompt = f\"&#123;session_id&#125; &#123;prompt&#125; &#123;response&#125; What do you like to do?\" response = generate_response(prompt) print(response) 在这个例子中，我们在每一轮对话中都把会话ID作为prompt参数的一部分，这样GPT-3模型就可以通过会话ID来跟踪每个用户的会话状态。 希望这些信息能够帮助您。 但是这样会导致prompt越来越长，内存占用也会越来越大，你觉得我该怎样处理呢 您提到的问题是一个很好的点，当prompt文本变得越来越长时，内存占用会增加，这可能会导致问题。 为了解决这个问题，您可以考虑在每一轮对话结束后清空prompt变量，并只保留最后一轮对话中GPT-3模型生成的文本。例如： Copy code# Generate a unique session ID for the user session_id = generate_session_id() # First round of conversation prompt = f\"&#123;session_id&#125; Hello, how are you?\" response = generate_response(prompt) print(response) # Second round of conversation prompt = f\"&#123;response&#125; What do you like to do?\" response = generate_response(prompt) print(response) 在这个例子中，我们在第二轮对话中只保留了GPT-3模型在第一轮对话中生成的文本，并把它作为新的prompt参数。这样做可以避免prompt文本过长，同时也不会影响模型的行为。 当然，这只是一种解决方案，您也可以使用其他方法来处理这个问题。例如，您可以使用分片技术来将prompt文本分成多个小块，每次只传递一个小块给GPT-3模型。这样做可以避免内存占用过高，同时也能保证对话的连贯性。 希望这些信息能够帮助您。 只传递一个小块能保证会话的连续性吗？我不太相信你 您提到的问题是一个很好的点，如果只传递一个小块给GPT-3模型，可能会导致对话不连贯。 为了解决这个问题，您可以在每次传递一个小块给GPT-3模型时，使用特殊的标记来表示一次对话的开始和结束，例如： Copy code# Generate a unique session ID for the user session_id = generate_session_id() # First round of conversation prompt = f\"&lt;SESSION&gt; &#123;session_id&#125; &lt;PROMPT&gt; Hello, how are you? &lt;END&gt;\" response = generate_response(prompt) print(response) # Second round of conversation prompt = f\"&lt;SESSION&gt; &#123;session_id&#125; &lt;PROMPT&gt; &#123;response&#125; What do you like to do? &lt;END&gt;\" response = generate_response(prompt) print(response) 在这个例子中，我们使用了&lt;SESSION&gt;、&lt;PROMPT&gt;和&lt;END&gt;标记来表示一次对话的开始、提问和结束。这样，GPT-3模型就可以通过这些标记来识别一次对话的起始和结束，并生成连贯的文本。 当然，这只是一种解决方案，您也可以使用其他方法来处理这个问题。例 继续 例如，您也可以使用分片技术来保证对话的连贯性。在这种方法中，您可以把prompt文本分成多个小块，并将每个小块分别传递给GPT-3模型。然后，您可以使用预先设定的规则来将每一块文本组装成一个连贯的对话。例如： Copy code# Generate a unique session ID for the user session_id = generate_session_id() # First round of conversation prompt = f\"&#123;session_id&#125; Hello, how are you?\" chunks = split_prompt_into_chunks(prompt) # Generate responses for each chunk of the prompt 继续 您可以使用下面的代码来生成每一块文本的响应： Copy code# Generate responses for each chunk of the prompt responses = [] for chunk in chunks: response = generate_response(chunk) responses.append(response) # Assemble the responses into a coherent dialogue conversation = \"\" for response in responses: conversation = f\"&#123;conversation&#125; &#123;response&#125;\" print(conversation) 在这个例子中，我们使用了一个自定义的split_prompt_into_chunks函数来将prompt文本分成多个小块，然后对每一块文本调用generate_response函数生成响应。最后，我们使用一个循环来组装所有响应，生成一个连贯的对话。 希望这些信息能够帮助您。 让我们回到prompt过长的问题，你能给出其他的解决方案吗 是的，除了上面提到的两种方法，还有其他一些方法可以解决prompt文本过长的问题。例如： 对prompt文本进行压缩：您可以使用文本压缩技术（例如LZW算法）来将prompt文本压缩成更小的尺寸，从而减少内存占用。 使用多个模型：您可以训练多个GPT-3模型，然后把prompt文本分成多个小块，每次只调用一个模型来生成文本。这样做可以避免单个模型的内存占用过高，同时 继续 同时也能保证对话的连贯性。 使用缓存：您可以使用缓存技术来记录每一轮对话中GPT-3模型生成的文本，然后在下一轮对话中重用这些文本。这样做可以避免prompt文本过长，同时也可以提高模型的效率。 这些方法都可以有效地解决prompt文本过长的问题，您可以根据实际情况选择合适的方法来实现。 希望这些信息能够帮助您。 你觉得用数据库或者文件去保存这些上下文怎么样 使用数据库或文件来保存对话上下文是一种可行的方法。 通过使用数据库，您可以轻松地存储每一轮对话的信息，并在下一轮对话中重用这些信息。例如，您可以在数据库中创建一个存储会话信息的表，并为每个会话分配一个唯一的会话ID，然后在每一轮对话中更新这个会话ID对应的信息。例如： Copy code# Generate a unique session ID for the user session_id = generate_session_id() # First round of conversation prompt = f\"&#123;session_id&#125; Hello, how are you?\" response = generate_response(prompt) # Update the session information in the database update_session(session_id, prompt, response) # Second round of conversation prompt = f\"&#123;session_id&#125; &#123;response&#125; What do you like to do?\" response = generate 这样会导致什么问题呢 使用数据库或文件来保存对话上下文可能会带来一些问题。 首先，如果您的应用程序有大量用户，数据库或文件可能会变得非常大，这样就会增加系统的存储开销。此外，如果系统需要频繁地访问数据库或文件来查询或更新对话信息，这也会增加系统的计算开销。 其次，使用数据库或文件保存对话上下文也会增加系统的复杂度。例如，您需要设计一个合理的数据结构来存储对话信息，并编写代码来实现数据的读写操作。这样的工作量可能会比较大，并且也容易出错。 所以，使用数据库或文件 继续 所以，使用数据库或文件保存对话上下文也不是一个完美的解决方案。在实际应用中，您需要考虑应用程序的实际需求，并选择合适的方法来保存对话上下文。例如，如果您的应用程序有大量用户，您可以使用分片技术来减少内存占用；如果您的应用程序需要支持多种语言，您可以考虑使用多个模型来生成文本。 总之，使用数据库或文件保存对话上下文可能会带来一些问题，但是它也是一种有效的方法。您可以根据实际情况来选择合适的方法。 你能帮我实现这个数据结构吗 是的，我可以给您提供一个简单的例子，来展示如何使用数据库来保存对话上下文。 首先，您需要安装一个数据库管理系统（如MySQL），并创建一个名为conversations的表。这个表应该包含以下字段： session_id：存储会话ID的字段。 prompt：存储对话提示文本的字段。 response：存储对话响应文本的字段。 接下来，您可以使用Python代码来实现对数据库的操作。首先，您需要安装一个Python数据库驱动程序（如MySQL Connector），然后使用以下代码来连接数据库： Copy codeimport mysql.connector # Connect to the database db = mysql.connector.connect( host=\"localhost\", user=\"root\", password=\"password\", database=\"conversations\" ) 在连接到数据库之后，您可以使用以下代码来实现对conversations表的操作： Copy code# Generate a unique session ID for the user session_id = generate_session_id() # First round of conversation prompt = f\"&#123;session_id&#125; Hello, how are you?\" response = generate_response(prompt) # Update the conversation information in the database cursor = db.cursor() cursor.execute( \"INSERT INTO conversations (session_id, prompt, response) VALUES (%s, %s, %s)\", (session_id, prompt, response) ) db.commit() 在这个例子中，我们使用了一个自定义的generate_session_id函数来生成一个唯一的会话ID，然后使用generate_response函数生成响应文本。 你用的连接数据库的方法似乎过时了，有没有其他方案呢 是的，您提到的连接数据库的方法确实过时了。现在，Python提供了新的标准库asyncio来简化异步编程。您可以使用asyncio来连接数据库，并实现对数据库的操作。 首先，您需要安装一个支持asyncio的数据库驱动程序（如aiomysql），然后使用以下代码来连接数据库： Copy codeimport asyncio import aiomysql async def connect_db(): # Connect to the database conn = await aiomysql.connect( host=\"localhost\", user=\"root\", password=\"password\", db=\"conversations\", loop=loop ) return conn 在连接到数据库之后，您可以使用以下代码来实现对数据库的操作： Copy codeasync def update_db(session_id, prompt, response): # Update the conversation information in the database async with conn.cursor() as cursor: await cursor.execute( \"INSERT INTO conversations (session_id, prompt, response) VALUES (%s, %s, %s)\", (session_id, prompt, response) ) await conn.commit() 在这个例子中，我们使用了异步上下文管理器来管理数据库连接，并使用异步游标来实现对数据库的操作。这样的写法更加简 但是这样我还要写SQL语句，我想用一些现成的orm库，比如sqlalchemy 是的，您可以使用第三方库sqlalchemy来实现对数据库的操作，而无需编写SQL语句。 首先，您需要安装sqlalchemy库，然后使用以下代码来创建数据库连接： Copy codefrom sqlalchemy import create_engine # Create a database engine engine = create_engine( \"mysql+pymysql://root:password@localhost/conversations\" ) 在创建了数据库引擎之后，您可以使用sqlalchemy的declarative_base类来定义数据库表的结构。例如，您可以使用以下代码来定义conversations表： Copy codefrom sqlalchemy.ext.declarative import declarative_base from sqlalchemy import Column, Integer, String Base = declarative_base() class Conversation(Base): __tablename__ = \"conversations\" id = Column(Integer, primary_key=True) session_id = Column(String(255)) prompt = Column(String(255)) response = Column(String(255)) def __repr__(self): return \"&lt;Conversation(session_id='%s', prompt='%s', response='%s')&gt;\" % ( self.session_id, self.prompt, self.response ) 在定义了数据库表之后，您可以使用以下代码来实现对数据库的操作： Copy codefrom sqlalchemy.orm import sessionmaker # Create a session Session = sessionmaker(bind=engine) session = Session() # Generate a unique session ID for 继续 在定义了数据库表之后，您可以使用以下代码来实现对数据库的操作： Copy codefrom sqlalchemy.orm import sessionmaker # Create a session Session = sessionmaker(bind=engine) session = Session() # Generate a unique session ID for the user session_id = generate_session_id() # First round of conversation prompt = f\"&#123;session_id&#125; Hello, how are you?\" response = generate_response(prompt) # Update the conversation information in the database conversation = Conversation( session_id=session_id, prompt=prompt, response=response ) session.add(conversation) session.commit() 在这个例子中，我们使用Session类来创建一个会话，然后使用Conversation类来创建一个新的对话记录，并将其添加到数据库中。这样的写法比较简洁，并且易于维护。 我想让你帮我用nonebot2去封装这个用户插件 您好，在使用nonebot2封装插件之前，您需要安装nonebot2库。您可以使用以下命令来安装nonebot2： Copy codepip install nonebot2 在安装完成之后，您可以使用以下代码来封装插件： Copy codefrom nonebot2 import on_command, CommandSession @on_command(\"chat\", only_to_me=False) async def chat(session: CommandSession): # Get the prompt from the session prompt = session.get(\"prompt\", prompt_suffix=\"\") # Generate a response response = generate_response(prompt) # Send the response to the user await session.send(response) 在这个例子中，我们使用on_command装饰器来注册一个chat命令，并使用CommandSession类来处理会话。我们通过session.get方法来获取提示文本，然后使用generate_response函数生成响应文本，最后通过session.send方法来将响应文本发送给用户。 加上之前sqlalchemy的数据持久化 您好，要在nonebot2插件中使用sqlalchemy来实现数据持久化，您需要按照以下步骤进行： 安装nonebot2库和sqlalchemy库。 使用sqlalchemy的declarative_base类定义数据库表的结构。 使用Session类创建一个会话，然后使用Conversation类创建一个新的对话记录，并将其添加到数据库中。 您可以使用以下代码来实现上述功能： Copy codeimport asyncio from nonebot2 import on_command, CommandSession from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy import Column, Integer, String from sqlalchemy.orm import sessionmaker # Create a database engine engine = create_engine( \"mysql+pymysql://root:password@localhost/conversations 继续 您可以使用以下代码来实现上述功能： Copy codeimport asyncio from nonebot2 import on_command, CommandSession from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy import Column, Integer, String from sqlalchemy.orm import sessionmaker # Create a database engine engine = create_engine( \"mysql+pymysql://root:password@localhost/conversations\" ) # Define the structure of the database table Base = declarative_base() class Conversation(Base): __tablename__ = \"conversations\" id = Column(Integer, primary_key=True) session_id = Column(String(255)) prompt = Column(String(255)) response = Column(String(255)) def __repr__(self): return \"&lt;Conversation(session_id='%s', prompt='%s', response='%s')&gt;\" % ( self.session_id, self.prompt, self.response ) # Create a session Session = sessionmaker(bind=engine) session = Session() @on_command(\"chat\", only_to_me=False) async def chat(session: CommandSession): # Get the prompt from the session prompt = session.get(\"prompt\", prompt_suffix=\"\") # Generate a response response = generate_response(prompt) # Update the conversation information in the database conversation = Conversation( session_id=generate_session_id(), prompt=prompt, response=response ) session.add(conversation) session.commit() # Send the response to the user await session.send(response) 在这个例子中，我们在处理chat命令时，不仅生成了响应文本并发送给用户，还使用Conversation类创建了一个新的对话记录，并将其添加到数据库中。这样，每次用户发送chat命令时，都会将对话信息持久化到数据库中，并保证会话的连续性。 继续 如果您想在处理用户的chat命令时，获取数据库中保存的历史对话信息，您可以按照以下步骤进行： 在定义chat命令处理函数时，使用session.get方法获取会话 ID，并将其作为查询条件，查询数据库中保存的历史对话信息。 使用asyncio.gather函数获取所有历史对话信息，并将其合并成一个提示文本。 将提示文本传递给generate_response函数，生成响应文本。 更新数据库中的对话信息，并将响应文本发送给用户。 您可以使用以下代码来实现上述功能： Copy codeimport asyncio from nonebot2 import on_command, CommandSession from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy import Column, Integer, String from sqlalchemy.orm import sessionmaker # Create a database engine engine = create_engine( \"mysql+pymysql://root:password@localhost/conversations\" ) # Define the structure of the database table Base = declarative_base() class Conversation(Base): __tablename__ = \"conversations\" id = Column(Integer, primary_key=True) session_id = Column(String(255)) prompt = Column(String(255)) response = Column(String(255)) def __repr__(self): return \"&lt;Conversation(session_id='%s', prompt='%s', response='%s')&gt;\" % ( self.session_id, self.prompt, self.response ) # Create a session Session = sessionmaker(bind=engine) session 继续 2 / 2 您可以使用以下代码来实现上述功能： Copy codeimport asyncio from nonebot2 import on_command, CommandSession from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy import Column, Integer, String from sqlalchemy.orm import sessionmaker # Create a database engine engine = create_engine( \"mysql+pymysql://root:password@localhost/conversations\" ) # Define the structure of the database table Base = declarative_base() class Conversation(Base): __tablename__ = \"conversations\" id = Column(Integer, primary_key=True) session_id = Column(String(255)) prompt = Column(String(255)) response = Column(String(255)) def __repr__(self): return \"&lt;Conversation(session_id='%s', prompt='%s', response='%s')&gt;\" % ( self.session_id, self.prompt, self.response ) # Create a session Session = sessionmaker(bind=engine) session = Session() @on_command(\"chat\", only_to_me=False) async def chat(session: CommandSession): # Get the session ID from the session session_id = session.get(\"session_id\") # Get the history of the conversation conversations = await asyncio.gather(*[ session.bot.get_history( session_id=session_id, limit=1, reverse=True, kind=\"text\" ) ]) # Generate a prompt by concatenating all the previous responses prompt = \"\".join([ c[\"message\"][\"text\"] for c in conversations if c[\"message\"][\"text\"] != session_id ]) # Generate a response response = generate_response(prompt) # Update the conversation information in the database conversation = Conversation( session_id=session_id, prompt=prompt, response=response ) session.add(conversation) session.commit() # Send the response to the user await session.send(response) 在 继续 2 / 2 在这个例子中，我们在处理用户的chat命令时，使用了asyncio.gather函数和nonebot2的get_history方法来获取数据库中保存的历史对话信息。然后，我们将所有历史对话信息合并成一个提示文本，并将其传递给generate_response函数，生成响应文本。最后，我们更新数据库中的对话信息，并将响应文本发送给用户。 这样，您就可以在nonebot2插件中使用sqlalchemy来实现数据库持久化，并在处理用户命令时，获取数据库中保存的历史对话信息，实现上下文支持。您可以根据需要，自行修改和完善这些代码，以实现更复杂的功能。 我觉得用数据库好麻烦，还是改用文件存储吧，你觉得文件和数据库哪个更快呢 这两种方法都可以用来实现数据持久化。使用文件存储可以节省数据库服务器的硬件资源，并具有较高的灵活性。但是，如果您的应用程序需要处理大量的数据，或者需要同时处理多个用户的请求，使用文件存储可能会出现性能问题。 相比之下，使用数据库存储可以提供更高的性能和可扩展性。数据库管理系统（DBMS）可以利用其优化的存储引擎，对数据进行快速查询和更新，并使用缓存和并发控制机制来支持多用户的并发访问。 因此，在选择文件存储或数据库存储时，您需要考虑您的应用程序的具体需求和性能要求。如果您的应用程序需要处理大量的数据，或者需要同时处理多个用户的请求，使用数据库存储可能是一个更好的选 用类来定义数据结构好麻烦，有没有更简洁的方法 您可以使用Python的字典（dict）来定义数据结构。例如，如果您想要定义一个包含用户会话信息的数据结构，您可以使用以下代码： Copy codeconversation = &#123; \"session_id\": \"abc123\", \"prompt\": \"Hello, how are you?\", \"response\": \"I'm fine, thank you. How are you?\" &#125; 这样，您就可以使用字典来保存用户会话信息，并通过键名来访问各个字段的值。例如，您可以使用以下代码来访问prompt字段的值： Copy codeprompt = conversation[\"prompt\"] 使用字典定义数据结构的优点在于简洁易读，方便使用和扩展。但是，字典不能像类一样提供类型检查和方法封装的功能。如果您的应用程序需要这些功能，建议使用类来定义数据结构。 sqlalchemy中除了用类来定义数据结构，还有没有更简洁的方法呢 除了使用类来定义数据结构，sqlalchemy还提供了一种称为“元类型（MetaData）”的方法，可以更简洁地定义数据结构。例如，如果您想要使用MetaData来定义上面的Conversation类，可以使用以下代码： Copy codefrom sqlalchemy import MetaData, Table, Column, Integer, String metadata = MetaData() conversations = Table( \"conversations\", metadata, Column(\"id\", Integer, primary_key=True), Column(\"session_id\", String(255)), Column(\"prompt\", String(255)), Column(\"response\", String(255)) ) 使用MetaData来定义数据结构的优点在于简洁易读，可以方便地定义和扩展数据结构。但是，与使用类相比，使用MetaData的缺点在于不能提供类型检查和方法封装的功能。因此，选择使用MetaData还是使用类，应该根据您的应用程序的具体需求和性能要求来决定。 这个metadata似乎没有绑定数据库 您提到的MetaData对象并不能直接绑定数据库。它只是一个数据结构定义的容器，用于保存数据结构的定义信息。要想将定义好的数据结构绑定到数据库，您需要使用create_all方法将数据结构映射到数据库。 例如，如果您想要将上面定义的conversations表绑定到数据库，可以使用以下代码： Copy codefrom sqlalchemy import create_engine engine = create_engine(\"sqlite:///database.db\") metadata.create_all(engine) 这样，您就可以通过engine对象将数据结构映射到数据库，并在数据库中创建对应的表。 另外，如果您想要在创建表之前，检查表是否已经存在，可以使用MetaData对象的reflect方法来实现。例如，您可以使用以下代码来检查conversations表是否已经存在： Copy codemetadata.reflect(engine) if \"conversations\" not in metadata.tables: # create the table 这样，您就可以在创建表之前，检查表是否已经存在，避免重复创建表的问题。 你能帮我整理下之前的插件代码吗 为了实现一个能够保存用户会话的插件，您可以使用以下步骤： 使用nonebot2和nonebot2-plugin包创建一个插件。 例如，您可以使用以下代码来实现插件的初始化： Copy codefrom nonebot import on_command, CommandSession from nonebot.permission import SUPERUSER from nonebot2 import on_natural_language from nonebot2.nlp import IntentCommand from nonebot2.nlp.matchers import EQMatcher from nonebot2.nlp.rules import Rule, SynonymRule __plugin_name__ = \"ConversationPlugin\" __plugin_usage__ = r\"\"\" 用户会话存储 指令： - 保存会话：save_conversation \"\"\" @on_command(\"save_conversation\", permission=SUPERUSER) async def save_conversation(session: CommandSession): # ... @on_natural_language( matcher=EQMatcher(), rule=Rule( intent=IntentCommand( \"save_conversation\", self_id=\"conversation_bot\" ), synonyms=SynonymRule(\"保存会话\", \"保存对话\") ), permission=SUPERUSER ) async def _(session: CommandSession): session.finish(\"save_conversation\") 定义Conversation类用于表示用户 继续 2 / 2 定义Conversation类用于表示用户会话。 例如，您可以使用以下代码来定义Conversation类： Copy codeclass Conversation: def __init__(self, session_id: str, prompt: str, response: str): self.session_id = session_id self.prompt = prompt self.response = response 创建数据库引擎和连接。 例如，您可以使用以下代码来创建数据库引擎和连接： Copy codefrom sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker engine = create_engine(\"sqlite:///database.db\") Session = sessionmaker(bind=engine) session = Session() 使用sqlalchemy定义数据结构。 例如，您可以使用以下代码来定义Conversation表： Copy codefrom sqlalchemy import MetaData, Table, Column, Integer, String metadata = MetaData() conversations = Table( \"conversations\", metadata, Column(\"id\", Integer, primary_key=True), Column(\"session_id\", String(255)), Column(\"prompt\", String(255)), Column(\"response\", String(255)) ) 将数据结构映射到数据库。 例如，您可以使用以下代码来将Conversation表映射到数据库： Copy codemetadata.create_all(engine) 在`save 继续 2 / 2 在save_conversation命令处理函数中，将用户会话保存到数据库。 例如，您可以使用以下代码来实现这一功能： Copy code@on_command(\"save_conversation\", permission=SUPERUSER) async def save_conversation(session: CommandSession): # 获取会话参数 session_id = session.ctx[\"session_id\"] prompt = session.get(\"prompt\") response = session.get(\"response\") # 创建Conversation对象并保存到数据库 conversation = &lt;span class=&quot;hljs-built_in&quot;&gt;Conversation&lt;/span&gt;(session_id, prompt, response) session.&lt;span class=&quot;hljs-built_in&quot;&gt;add&lt;/span&gt;(conversation) session.&lt;span class=&quot;hljs-built_in&quot;&gt;commit&lt;/span&gt;() # 回复成功消息 session.&lt;span class=&quot;hljs-built_in&quot;&gt;finish&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;会话已保存&quot;&lt;/span&gt;) 这样，您就可以实现一个能够保存用户会话的插件。另外，您还可以使用sqlalchemy的query方法来查询已保存的会话，并使用nonebot2的send_message方法将查询结果返回给用户。 最后，如果您想要使用上面提到的“元类型（MetaData 继续 2 &#x2F; 2 如果您想要使用“元类型（MetaData）”来定义数据结构，可以使用以下代码： Copy codefrom sqlalchemy import MetaData, Table, Column, Integer, Stringmetadata = MetaData()conversations = Table( \"conversations\", metadata, Column(\"id\", Integer, primary_key=True), Column(\"session_id\", String(255)), Column(\"prompt\", String(255)), Column(\"response\", String(255)))class Conversation(object): table = conversationsengine = create_engine(\"sqlite:///database.db\")metadata.create_all(engine)Session = sessionmaker(bind=engine)session = Session() 这样，您就可以使用“元类型（MetaData）”来定义数据结构，并将数据结构映射到数据库。 在使用元类型定义数据结构时，您需要注意以下几点： 在定义Conversation类时，需要将table属性指向conversations表。 在创建数据库引擎和连接时，需要在创建引擎之后，再调用create_all方法将数 继续 在之前的代码中，我们使用了SQLite数据库来保存用户会话。如果您希望使用其他数据库，可以修改创建数据库引擎的代码，将“sqlite”替换为目标数据库的类型。 例如，如果您想要使用MySQL数据库，可以使用以下代码创建数据库引擎： Copy codeengine = create_engine( \"mysql+pymysql://用户名:密码@主机名:端口号/数据库名\") 其中，“用户名”和“密码”是MySQL数据库的用户名和密码，“主机名”是MySQL数据库所在的主机的名称或IP地址，“端口号”是MySQL数据库的端口号，“数据库名”是要连接的数据库的名称。 另外，您还需要安装PyMySQL包，这样才能使用MySQL数据库。例如，您可以使用以下命令安装PyMySQL包： Copy codepip install pymysql 如果您想要使用其他数据库，可以参考上面的步骤，更改创建数据库引擎的代 我决定使用sqlite和类来保存数据结构了，你给我重新整理一下吧，不需要metadata了 2 &#x2F; 2 如果您想要使用SQLite数据库和类来定义数据结构，可以使用以下代码： Copy codefrom sqlalchemy import create_enginefrom sqlalchemy.orm import sessionmakerfrom sqlalchemy.ext.declarative import declarative_basefrom sqlalchemy import Column, Integer, Stringengine = create_engine(\"sqlite:///database.db\")Session = sessionmaker(bind=engine)session = Session()Base = declarative_base()class Conversation(Base): tablename = \"conversations\" id = Column(Integer, primary_key=True) session_id = Column(String(255)) prompt = Column(String(255)) response = Column(String(255))Base.metadata.create_all(engine) 这样，您就可以使用类来定义数据结构，并将数据结构映射到SQLite数据库。在使用类定义数据结构时，需要注意以下几点： 在定义Conversation类时，需要使用declarative_base类来作为基类。 在定义 继续 在之前的代码中，我们已经定义了save_conversation命令处理函数，它能够将用户会话保存到数据库中。如果您希望使用这个命令处理函数，可以使用以下代码将其添加到插件中： Copy code@nonebot2.on_command(\"save_conversation\", permission=nonebot2.permission.GROUP)async def save_conversation(session: nonebot2.CommandSession): # 获取会话参数 session_id = session.ctx[\"session_id\"] prompt = session.get(\"prompt\") response = session.get(\"response\") # 创建Conversation对象并保存到数据库 conversation = &lt;span class=&quot;hljs-built_in&quot;&gt;Conversation&lt;/span&gt;(session_id=session_id, prompt=prompt, response=response) session.&lt;span class=&quot;hljs-built_in&quot;&gt;add&lt;/span&gt;(conversation) session.&lt;span class=&quot;hljs-built_in&quot;&gt;commit&lt;/span&gt;() # 回复成功消息 session.&lt;span class=&quot;hljs-built_in&quot;&gt;finish&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;会话已保存&quot;&lt;/span&gt;) 在这段代码中，我们首先获取了会话的参数，然后使用这些参数创建了一个Conversation对象，最后将这个对象保存到数据库中。 如果您想要查询已保存的会话，可以使用以下代码实现这一功能： Copy code@nonebot2.on_command(\"load_conversation\", permission=nonebot2.permission.GROUP)async def load_convers 继续 在之前的代码中，我们已经定义了load_conversation命令处理函数，它能够从数据库中查询用户会话。如果您希望使用这个命令处理函数，可以使用以下代码将其添加到插件中： Copy code@nonebot2.on_command(\"load_conversation\", permission=nonebot2.permission.GROUP)async def load_conversation(session: nonebot2.CommandSession): # 获取会话参数 session_id = session.ctx[\"session_id\"] &lt;span class=&quot;hljs-comment&quot;&gt;# 从数据库中查询会话&lt;/span&gt; conversation = session.query(Conversation).filter_by(session_id=session_id).first() &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; conversation &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;: session.finish(&lt;span class=&quot;hljs-string&quot;&gt;&quot;未找到会话&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;: &lt;span class=&quot;hljs-comment&quot;&gt;# 回复会话消息&lt;/span&gt; session.finish(&lt;span class=&quot;hljs-string&quot;&gt;f&quot;prompt: &lt;span class=&quot;hljs-subst&quot;&gt;&#123;conversation.prompt&#125;&lt;/span&gt;\\nresponse: &lt;span class=&quot;hljs-subst&quot;&gt;&#123;conversation.response&#125;&lt;/span&gt;&quot;&lt;/span&gt;) 在这段代码中，我们首先获取了会话的参数，然后使用这个参数查询数据库，如果找到了对应的会话，就回复会话的内 继续 在之前的代码中，我们已经定义了用户插件，它包含了两个命令处理函数：save_conversation和load_conversation。如果您希望将这两个命令处理函数封装成插件，可以使用以下代码： Copy codeimport nonebot2from nonebot2.typing import Bot, Eventfrom sqlalchemy import create_enginefrom sqlalchemy.orm import sessionmakerfrom sqlalchemy.ext.declarative import declarative_basefrom sqlalchemy import Column, Integer, Stringengine = create_engine(\"sqlite:///database.db\")Session = sessionmaker(bind=engine)session = Session()Base = declarative_base()class Conversation(Base): tablename = \"conversations\" id = Column(Integer, primary_key=True) session_id = Column(String(255)) prompt = Column(String(255)) response = Column(String(255))Base.metadata.create_all(engine)@nonebot2.on_command(\"save_conversation\", permission=nonebot2.permission.GROUP)async def save_conversation(session: nonebot2.CommandSession): # 获取会话参数 session_id = session.ctx[\"session_id\"] prompt = session.get(\"prompt\") response = session.get(\"response\") # 创建Conversation对象并保存到数据库 conversation = &lt;span class=&quot;hljs-built_in&quot;&gt;Conversation&lt;/span&gt;(session_id=session_id, prompt=prompt, response 你有没有注意到之前定义的函数中session命名重复了呢 是的，在之前的代码中，我们使用了两个名为session的变量：一个用于定义数据库会话，另一个用于定义nonebot2框架中的命令处理函数。这会导致命名冲突，使得代码难以理解。 为了避免这种问题，建议您在定义变量时使用不同的名称。例如，您可以将原来的session变量改名为db_session，并在定义命令处理函数时使用cmd_session来表示命令会话。修改后的代码如下： Copy codeimport nonebot2from nonebot2.typing import Bot, Eventfrom sqlalchemy import create_enginefrom sqlalchemy.orm import sessionmakerfrom sqlalchemy.ext.declarative import declarative_basefrom sqlalchemy import Column, Integer, Stringengine = create_engine(\"sqlite:///database.db\")Session = sessionmaker(bind=engine)db_session = Session()Base = declarative_base()class Conversation(Base): tablename = \"conversations\" id = Column(Integer, primary_key=True) session_id = Column(String(255)) prompt = Column(String(255)) response = Column(String(255))Base.metadata.create_all(engine)@nonebot2.on_command(\"save_conversation\", permission=nonebot2.permission.GROUP)async def save_conversation(cmd_session: nonebot2.CommandSession): # 获取会话参数 session_id = cmd_session.ctx 继续 您可以使用以下代码来实现上述功能： Copy codeimport nonebot2from nonebot2.typing import Bot, Eventfrom sqlalchemy import create_enginefrom sqlalchemy.orm import sessionmakerfrom sqlalchemy.ext.declarative import declarative_basefrom sqlalchemy import Column, Integer, Stringengine = create_engine(\"sqlite:///database.db\")Session = sessionmaker(bind=engine)db_session = Session()Base = declarative_base()class Conversation(Base): tablename = \"conversations\" id = Column(Integer, primary_key=True) session_id = Column(String(255)) prompt = Column(String(255)) response = Column(String(255))Base.metadata.create_all(engine)@nonebot2.on_command(\"save_conversation\", permission=nonebot2.permission.GROUP)async def save_conversation(cmd_session: nonebot2.CommandSession): # 获取会话参数 session_id = cmd_session.ctx[\"session_id\"] prompt = cmd_session.get(\"prompt\") response = cmd_session.get(\"response\") &lt;span class=&quot;hljs-comment&quot;&gt;# 创建Conversation对象并保存到数据库&lt;/span&gt; conversation = Conversation(session_id=session_id, prompt=prompt, response=response) db_session.add(conversation) db_session.commit() cmd_session.finish(&lt;span class=&quot;hljs-string&quot;&gt;&quot;会话已保存&quot;&lt;/span&gt;) @nonebot2.on_command(\"load_conversation\", permission=nonebot2.permission.GROUP)async def load_conversation(cmd_session: nonebot2.CommandSession): # 获取会话参数 session_id = cmd_session.ctx[\"session_id\"] &lt;span class=&quot;hljs-comment&quot;&gt;# 从数据库中查询会话&lt;/span&gt; conversation = cmd_session.query(Conversation).filter_by(session_id=session_id).first() &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; conversation &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;: cmd_session.finish(&lt;span class=&quot;hljs-string&quot;&gt;&quot;未找到会话&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;: &lt;span class=&quot;hljs-comment&quot;&gt;# 回复会话消息&lt;/span&gt; cmd_session.finish(&lt;span class=&quot;hljs-string&quot;&gt;f&quot;prompt: &lt;span class=&quot;hljs-subst&quot;&gt;&#123;conversation.prompt&#125;&lt;/span&gt;\\nresponse: &lt;span class=&quot;hljs-subst&quot;&gt;&#123;conversation.response&#125;&lt;/span&gt;&quot;&lt;/span&gt;) 在这段代码中，我们定义了两个命令处理函数：save_conversation和load_conversation。您可以通过调用nonebot2.on_command装饰器来将这两个函数注册为命令处 继续 如果您想要使用nonebot2框架来运行这段代码，可以按照以下步骤操作： 安装nonebot2框架：pip install nonebot2 创建nonebot2配置文件（如果您还没有创建过）：可以通过运行nonebot2.init命令来创建配置文件。 将上述代码添加到您的项目中，并按照需要修改其中的参数。 运行nonebot2.run命令来启动机器人。 之后，您就可以通过在群聊中发送save_conversation或load_conversation命令来保存或查询会话了。例如，您可以发送如下指令来保存会话： Copy codesave_conversation prompt=\"Hello\" response=\"Hi\" 接着，您就可以发送load_conversation命令来查询会话内容： Copy codeload_conversation 查询后，机器人会回复会话内容。例如： Copy codeprompt: Helloresponse: Hi 请注意，上述代码仅是一个示例，它可能无法直接用于生产环境。如果您需要更复杂的功能，请自行修改代码。 好的，我已经基本明白其中需要注意的细节了，让我们结束这个话题，开启另一个话题吧 2 &#x2F; 2 当然。您可以在任何时候提出新的问题或者话题。如果您有任何疑问或需要帮助，请随时告诉我。我将尽力为您提供帮助。 我想把你我之前所有的对话记录保存下来并发布到我的hexo博客上，我要怎么做呢 您可以使用nonebot2的日志系统来记录对话，然后将日志导出为文本文件，最后发布到您的博客上。 首先，您需要在配置文件中启用日志系统： Copy code[log]level = debugfile_level = debugformat = \"record\"output_file = \"logs/nonebot2.log\" 其中，level和file_level参数用于指定日志记录级别，format参数用于指定日志输出格式，output_file参数用于指定日志输出文件。 然后，您可以在启动机器人时添加logger参数，以便让nonebot2框架将日志信息记录到日志文件中： Copy codenonebot2.run(logger=logger) 这样，机器人运行时的所有信息（包括用户消息和机器人的回复）都会被记录到日志文件中。 接下来，您可以使用以下代码将日志导出为文本文件： Copy codeimport logginglogger = logging.getLogger(\"nonebot2\")logger.setLevel(logging.DEBUG)with open(\"nonebot2.log\", \"w\") as f: # 将日志信息输出到文件 handler = logging.StreamHandler(f) handler.setFormatter(logging.Formatter(\"%(message)s\")) logger.addHandler(handler) # 读取日志文件中的信息并输出 with open(\"logs/nonebot2.log\", \"r\") as logfile: for line in logfile: # 将日志信息写入文件 logger.info(line.strip()) 最后， 不，我想你理解错了，我指的是将现在所有的会话，也就是整个html网页保存下来，并发布到hexo上 如果您想要将我们当前的对话保存下来，可以使用浏览器的截图功能截取屏幕，并将图片保存到本地。之后，您可以将图片上传到您的博客中，并将它展示在博客文章中。 请注意，上述操作需要您自行完成，我无法直接实现。如果您有其他问题，请随时告诉我。我将尽力为您提供帮助。 我已经将html下载下来了。如何将html发布到hexo博客上呢 如果您想在Hexo博客上发布HTML文件，可以使用Hexo插件hexo-generator-json-content。 首先，您需要安装插件： Copy codenpm install hexo-generator-json-content --save 然后，在Hexo博客的配置文件_config.yml中添加以下配置： Copy codejsonContent: meta: false pages: - file: your_file_name.html path: your_page_url 其中，file参数指定HTML文件的文件名，path参数指定HTML文件在博客中的URL。 最后，将HTML文件放到Hexo博客的source目录中，并使用以下命令生成博客静态文件： Copy codehexo generate 这样，HTML文件就会被生成到博客的public目录中，并可以通过指定的URL访问。 请注意，上述操作需要您自行完成，我无法直接实现。如果您有其他问题，请随时告诉我。我将尽力为您提供帮助。 但是这样只能通过url访问，在hexo的首页就看不到这篇文章了，要怎么做呢 2 &#x2F; 2 如果您想在Hexo博客的首页显示HTML文件，可以使用Hexo插件hexo-generator-json-content。 首先，您需要安装插件： Copy codenpm install hexo-generator-json-content --save 然后，在Hexo博客的配置文件_config.yml中添加以下配置： Copy codejsonContent: meta: false home: true posts: - file: your_file_name.html path: your_post_url 其中，file参数指定HTML文件的文件名，path参数指定HTML文件在博客中的URL。 最后，将HTML文件放到Hexo博客的source目录中，并使用以下命令生成博客静态文件： Copy codehexo generate 这样，HTML文件就会被生成到博客的public目录中，并可以通过指定的URL访问。在博客首页，您还可以看到HTML文件的标题和摘要。 请注意，上述操作需要您自行完成，我无法直接实现。如果您有其他问题 Try again Free Research Preview: ChatGPT is optimized for dialogue. Our goal is to make AI systems more natural to interact with, and your feedback will help us improve our systems and make them safer. {\"props\":{\"pageProps\":{\"user\":{\"id\":\"user-J3zGlHhNTWhxElGajL5K8qNO\",\"name\":\"W K X\",\"email\":\"&#120;&#x32;&#53;&#51;&#50;&#53;&#x36;&#x30;&#x31;&#x35;&#x35;&#64;&#x67;&#x6d;&#97;&#105;&#x6c;&#x2e;&#x63;&#111;&#x6d;\",\"image\":\"https://lh3.googleusercontent.com/a/AEdFTp6hCPuGJDnHKMNQ3huptRuQxv8KJmTPDRNr_2HZ=s96-c&quot;,&quot;picture&quot;:&quot;https://lh3.googleusercontent.com/a/AEdFTp6hCPuGJDnHKMNQ3huptRuQxv8KJmTPDRNr_2HZ=s96-c&quot;,&quot;groups&quot;:[],&quot;features&quot;:[]},&quot;accessToken&quot;:&quot;&quot;,&quot;paletteFeatures&quot;:[],&quot;features&quot;:[],&quot;pages&quot;:[{&quot;id&quot;:&quot;chat&quot;,&quot;name&quot;:&quot;ChatGPT&quot;,&quot;href&quot;:&quot;/chat&quot;,&quot;theme&quot;:{&quot;icon&quot;:&quot;globe&quot;,&quot;color&quot;:&quot;#10A37F&quot;},&quot;description&quot;:&quot;Chat with GPT\"}],\"globalMessage\":{}},\"__N_SSP\":true},\"page\":\"/chat\",\"query\":{},\"buildId\":\"LtYZc-Xh_l2deAoOZEwpy\",\"isFallback\":false,\"gssp\":true,\"scriptLoader\":[]}","categories":[],"tags":[]},{"title":"chatWithChatGPT","slug":"chatgpt/ChatGPT","date":"2022-12-07T13:54:54.000Z","updated":"2022-12-07T14:43:57.535Z","comments":true,"path":"/0.html","link":"","permalink":"https://wkxuan.cn/0.html","excerpt":"","text":"/*! tailwindcss v3.1.8 | MIT License | https://tailwindcss.com*/*,:after,:before{border:0 solid #d9d9e3;box-sizing:border-box}:after,:before{--tw-content:\"\"}html{-webkit-text-size-adjust:100%;font-family:Söhne,ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,Noto Sans,sans-serif,Helvetica Neue,Arial,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;line-height:1.5;tab-size:4}body{line-height:inherit;margin:0}hr{border-top-width:1px;color:inherit;height:0}abbr:where([title]){text-decoration:underline;-webkit-text-decoration:underline dotted currentColor;text-decoration:underline dotted currentColor}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}a{color:inherit;text-decoration:inherit}b,strong{font-weight:bolder}code,kbd,pre,samp{font-family:Söhne Mono,Monaco,Andale Mono,Ubuntu Mono,monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}table{border-collapse:collapse;border-color:inherit;text-indent:0}button,input,optgroup,select,textarea{color:inherit;font-family:inherit;font-size:100%;font-weight:inherit;line-height:inherit;margin:0;padding:0}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button;background-color:transparent;background-image:none}:-moz-focusring{outline:auto}:-moz-ui-invalid{box-shadow:none}progress{vertical-align:baseline}::-webkit-inner-spin-button,::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}summary{display:list-item}blockquote,dd,dl,fieldset,figure,h1,h2,h3,h4,h5,h6,hr,p,pre{margin:0}fieldset,legend{padding:0}menu,ol,ul{list-style:none;margin:0;padding:0}textarea{resize:vertical}input::-webkit-input-placeholder,textarea::-webkit-input-placeholder{color:#acacbe}input::placeholder,textarea::placeholder{color:#acacbe}[role=button],button{cursor:pointer}:disabled{cursor:default}audio,canvas,embed,iframe,img,object,svg,video{display:block;vertical-align:middle}img,video{height:auto;max-width:100%}[multiple],[type=date],[type=datetime-local],[type=email],[type=month],[type=number],[type=password],[type=search],[type=tel],[type=text],[type=time],[type=url],[type=week],select,textarea{--tw-shadow:0 0 transparent;-webkit-appearance:none;appearance:none;background-color:#fff;border-color:#8e8ea0;border-radius:0;border-width:1px;font-size:1rem;line-height:1.5rem;padding:.5rem .75rem}[multiple]:focus,[type=date]:focus,[type=datetime-local]:focus,[type=email]:focus,[type=month]:focus,[type=number]:focus,[type=password]:focus,[type=search]:focus,[type=tel]:focus,[type=text]:focus,[type=time]:focus,[type=url]:focus,[type=week]:focus,select:focus,textarea:focus{--tw-ring-inset:var(--tw-empty,/*!*/ /*!*/);--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:#2563eb;--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);border-color:#2563eb;box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow);outline:2px solid transparent;outline-offset:2px}input::-webkit-input-placeholder,textarea::-webkit-input-placeholder{color:#8e8ea0;opacity:1}input::placeholder,textarea::placeholder{color:#8e8ea0;opacity:1}::-webkit-datetime-edit-fields-wrapper{padding:0}::-webkit-date-and-time-value{min-height:1.5em}::-webkit-datetime-edit,::-webkit-datetime-edit-day-field,::-webkit-datetime-edit-hour-field,::-webkit-datetime-edit-meridiem-field,::-webkit-datetime-edit-millisecond-field,::-webkit-datetime-edit-minute-field,::-webkit-datetime-edit-month-field,::-webkit-datetime-edit-second-field,::-webkit-datetime-edit-year-field{padding-bottom:0;padding-top:0}select{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3E%3Cpath stroke='%238e8ea0' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3E%3C/svg%3E\");background-position:right .5rem center;background-repeat:no-repeat;background-size:1.5em 1.5em;padding-right:2.5rem;-webkit-print-color-adjust:exact;print-color-adjust:exact}[multiple]{background-image:none;background-position:0 0;background-repeat:repeat;background-size:auto auto;background-size:initial;padding-right:.75rem;-webkit-print-color-adjust:inherit;print-color-adjust:inherit}[type=checkbox],[type=radio]{--tw-shadow:0 0 transparent;-webkit-appearance:none;appearance:none;background-color:#fff;background-origin:border-box;border-color:#8e8ea0;border-width:1px;color:#2563eb;display:inline-block;flex-shrink:0;height:1rem;padding:0;-webkit-print-color-adjust:exact;print-color-adjust:exact;-webkit-user-select:none;user-select:none;vertical-align:middle;width:1rem}[type=checkbox]{border-radius:0}[type=radio]{border-radius:100%}[type=checkbox]:focus,[type=radio]:focus{--tw-ring-inset:var(--tw-empty,/*!*/ /*!*/);--tw-ring-offset-width:2px;--tw-ring-offset-color:#fff;--tw-ring-color:#2563eb;--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow);outline:2px solid transparent;outline-offset:2px}[type=checkbox]:checked,[type=radio]:checked{background-color:currentColor;background-position:50%;background-repeat:no-repeat;background-size:100% 100%;border-color:transparent}[type=checkbox]:checked{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg viewBox='0 0 16 16' fill='%23fff' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M12.207 4.793a1 1 0 0 1 0 1.414l-5 5a1 1 0 0 1-1.414 0l-2-2a1 1 0 0 1 1.414-1.414L6.5 9.086l4.293-4.293a1 1 0 0 1 1.414 0z'/%3E%3C/svg%3E\")}[type=radio]:checked{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg viewBox='0 0 16 16' fill='%23fff' xmlns='http://www.w3.org/2000/svg'%3E%3Ccircle cx='8' cy='8' r='3'/%3E%3C/svg%3E\")}[type=checkbox]:checked:focus,[type=checkbox]:checked:hover,[type=radio]:checked:focus,[type=radio]:checked:hover{background-color:currentColor;border-color:transparent}[type=checkbox]:indeterminate{background-color:currentColor;background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 16 16'%3E%3Cpath stroke='%23fff' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M4 8h8'/%3E%3C/svg%3E\");background-position:50%;background-repeat:no-repeat;background-size:100% 100%;border-color:transparent}[type=checkbox]:indeterminate:focus,[type=checkbox]:indeterminate:hover{background-color:currentColor;border-color:transparent}[type=file]{background:transparent none repeat 0 0/auto auto padding-box border-box scroll;background:initial;border-color:inherit;border-radius:0;border-width:0;font-size:inherit;line-height:inherit;padding:0}[type=file]:focus{outline:1px solid ButtonText;outline:1px auto -webkit-focus-ring-color}h1{font-size:1.875rem;line-height:2.25rem}h1,h2,h3{font-weight:600}h2,h3{font-size:1.5rem;line-height:2rem}*,:after,:before{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgba(59,130,246,.5);--tw-ring-offset-shadow:0 0 transparent;--tw-ring-shadow:0 0 transparent;--tw-shadow:0 0 transparent;--tw-shadow-colored:0 0 transparent;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }::-webkit-backdrop{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgba(59,130,246,.5);--tw-ring-offset-shadow:0 0 transparent;--tw-ring-shadow:0 0 transparent;--tw-shadow:0 0 transparent;--tw-shadow-colored:0 0 transparent;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }::backdrop{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgba(59,130,246,.5);--tw-ring-offset-shadow:0 0 transparent;--tw-ring-shadow:0 0 transparent;--tw-shadow:0 0 transparent;--tw-shadow-colored:0 0 transparent;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }:root{--color-primary:#19c37d;--color-secondary:#715fde;--color-error:#ef4146;--gradient-primary:linear-gradient(90deg,#a29bd4,#989fdd);--text-primary:#202123;--text-default:#353740;--text-secondary:#6e6e80;--text-disabled:#acacbe;--text-error:var(--color-error)}.container{width:100%}@media (min-width:640px){.container{max-width:640px}}@media (min-width:768px){.container{max-width:768px}}@media (min-width:1024px){.container{max-width:1024px}}@media (min-width:1280px){.container{max-width:1280px}}@media (min-width:1536px){.container{max-width:1536px}}.prose{color:var(--tw-prose-body);max-width:65ch}.prose :where([class~=lead]):not(:where([class~=not-prose] *)){color:var(--tw-prose-lead);font-size:1.25em;line-height:1.6;margin-bottom:1.2em;margin-top:1.2em}.prose :where(a):not(:where([class~=not-prose] *)){color:var(--tw-prose-links);font-weight:500;text-decoration:underline}.prose :where(strong):not(:where([class~=not-prose] *)){color:var(--tw-prose-bold);font-weight:600}.prose :where(a strong):not(:where([class~=not-prose] *)){color:inherit}.prose :where(blockquote strong):not(:where([class~=not-prose] *)){color:inherit}.prose :where(thead th strong):not(:where([class~=not-prose] *)){color:inherit}.prose :where(ol):not(:where([class~=not-prose] *)){list-style-type:decimal;margin-bottom:1.25em;margin-top:1.25em;padding-left:1.625em}.prose :where(ol[type=A]):not(:where([class~=not-prose] *)){list-style-type:upper-alpha}.prose :where(ol[type=a]):not(:where([class~=not-prose] *)){list-style-type:lower-alpha}.prose :where(ol[type=A s]):not(:where([class~=not-prose] *)){list-style-type:upper-alpha}.prose :where(ol[type=a s]):not(:where([class~=not-prose] *)){list-style-type:lower-alpha}.prose :where(ol[type=I]):not(:where([class~=not-prose] *)){list-style-type:upper-roman}.prose :where(ol[type=i]):not(:where([class~=not-prose] *)){list-style-type:lower-roman}.prose :where(ol[type=I s]):not(:where([class~=not-prose] *)){list-style-type:upper-roman}.prose :where(ol[type=i s]):not(:where([class~=not-prose] *)){list-style-type:lower-roman}.prose :where(ol[type=\"1\"]):not(:where([class~=not-prose] *)){list-style-type:decimal}.prose :where(ul):not(:where([class~=not-prose] *)){list-style-type:disc;margin-bottom:1.25em;margin-top:1.25em;padding-left:1.625em}.prose :where(ol>li):not(:where([class~=not-prose] *))::marker{color:var(--tw-prose-counters);font-weight:400}.prose :where(ul>li):not(:where([class~=not-prose] *))::marker{color:var(--tw-prose-bullets)}.prose :where(hr):not(:where([class~=not-prose] *)){border-color:var(--tw-prose-hr);border-top-width:1px;margin-bottom:3em;margin-top:3em}.prose :where(blockquote):not(:where([class~=not-prose] *)){border-left-color:var(--tw-prose-quote-borders);border-left-width:.25rem;color:var(--tw-prose-quotes);font-style:italic;font-style:normal;font-weight:500;margin-bottom:1.6em;margin-top:1.6em;padding-left:1em;quotes:\"\\201C\"\"\\201D\"\"\\2018\"\"\\2019\"}.prose :where(blockquote p:first-of-type):not(:where([class~=not-prose] *)):before{content:open-quote}.prose :where(blockquote p:last-of-type):not(:where([class~=not-prose] *)):after{content:close-quote}.prose :where(h1):not(:where([class~=not-prose] *)){color:var(--tw-prose-headings);font-size:2.25em;font-weight:800;line-height:1.1111111;margin-bottom:.8888889em;margin-top:0}.prose :where(h1 strong):not(:where([class~=not-prose] *)){color:inherit;font-weight:900}.prose :where(h2):not(:where([class~=not-prose] *)){color:var(--tw-prose-headings);font-size:1.5em;font-weight:700;line-height:1.3333333;margin-bottom:1em;margin-top:2em}.prose :where(h2 strong):not(:where([class~=not-prose] *)){color:inherit;font-weight:800}.prose :where(h3):not(:where([class~=not-prose] *)){color:var(--tw-prose-headings);font-size:1.25em;font-weight:600;line-height:1.6;margin-bottom:.6em;margin-top:1.6em}.prose :where(h3 strong):not(:where([class~=not-prose] *)){color:inherit;font-weight:700}.prose :where(h4):not(:where([class~=not-prose] *)){color:var(--tw-prose-headings);font-weight:600;line-height:1.5;margin-bottom:.5em;margin-top:1.5em}.prose :where(h4 strong):not(:where([class~=not-prose] *)){color:inherit;font-weight:700}.prose :where(img):not(:where([class~=not-prose] *)){margin-bottom:2em;margin-top:2em}.prose :where(figure>*):not(:where([class~=not-prose] *)){margin-bottom:0;margin-top:0}.prose :where(figcaption):not(:where([class~=not-prose] *)){color:var(--tw-prose-captions);font-size:.875em;line-height:1.4285714;margin-top:.8571429em}.prose :where(code):not(:where([class~=not-prose] *)){color:var(--tw-prose-code);font-size:.875em;font-weight:600}.prose :where(code):not(:where([class~=not-prose] *)):before{content:\"`\"}.prose :where(code):not(:where([class~=not-prose] *)):after{content:\"`\"}.prose :where(a code):not(:where([class~=not-prose] *)){color:inherit}.prose :where(h1 code):not(:where([class~=not-prose] *)){color:inherit}.prose :where(h2 code):not(:where([class~=not-prose] *)){color:inherit;font-size:.875em}.prose :where(h3 code):not(:where([class~=not-prose] *)){color:inherit;font-size:.9em}.prose :where(h4 code):not(:where([class~=not-prose] *)){color:inherit}.prose :where(blockquote code):not(:where([class~=not-prose] *)){color:inherit}.prose :where(thead th code):not(:where([class~=not-prose] *)){color:inherit}.prose :where(pre):not(:where([class~=not-prose] *)){background-color:transparent;border-radius:.375rem;color:currentColor;font-size:.875em;font-weight:400;line-height:1.7142857;margin:0;overflow-x:auto;padding:0}.prose :where(pre code):not(:where([class~=not-prose] *)){background-color:transparent;border-radius:0;border-width:0;color:inherit;font-family:inherit;font-size:inherit;font-weight:inherit;line-height:inherit;padding:0}.prose :where(pre code):not(:where([class~=not-prose] *)):before{content:none}.prose :where(pre code):not(:where([class~=not-prose] *)):after{content:none}.prose :where(table):not(:where([class~=not-prose] *)){font-size:.875em;line-height:1.7142857;margin-bottom:2em;margin-top:2em;table-layout:auto;text-align:left;width:100%}.prose :where(thead):not(:where([class~=not-prose] *)){border-bottom-color:var(--tw-prose-th-borders);border-bottom-width:1px}.prose :where(thead th):not(:where([class~=not-prose] *)){color:var(--tw-prose-headings);font-weight:600;padding-bottom:.5714286em;padding-left:.5714286em;padding-right:.5714286em;vertical-align:bottom}.prose :where(tbody tr):not(:where([class~=not-prose] *)){border-bottom-color:var(--tw-prose-td-borders);border-bottom-width:1px}.prose :where(tbody tr:last-child):not(:where([class~=not-prose] *)){border-bottom-width:0}.prose :where(tbody td):not(:where([class~=not-prose] *)){vertical-align:baseline}.prose :where(tfoot):not(:where([class~=not-prose] *)){border-top-color:var(--tw-prose-th-borders);border-top-width:1px}.prose :where(tfoot td):not(:where([class~=not-prose] *)){vertical-align:top}.prose{--tw-prose-body:#374151;--tw-prose-headings:#111827;--tw-prose-lead:#4b5563;--tw-prose-links:#111827;--tw-prose-bold:#111827;--tw-prose-counters:#6b7280;--tw-prose-bullets:#d1d5db;--tw-prose-hr:#e5e7eb;--tw-prose-quotes:#111827;--tw-prose-quote-borders:#e5e7eb;--tw-prose-captions:#6b7280;--tw-prose-code:#111827;--tw-prose-pre-code:#e5e7eb;--tw-prose-pre-bg:#1f2937;--tw-prose-th-borders:#d1d5db;--tw-prose-td-borders:#e5e7eb;--tw-prose-invert-body:#d1d5db;--tw-prose-invert-headings:#fff;--tw-prose-invert-lead:#9ca3af;--tw-prose-invert-links:#fff;--tw-prose-invert-bold:#fff;--tw-prose-invert-counters:#9ca3af;--tw-prose-invert-bullets:#4b5563;--tw-prose-invert-hr:#374151;--tw-prose-invert-quotes:#f3f4f6;--tw-prose-invert-quote-borders:#374151;--tw-prose-invert-captions:#9ca3af;--tw-prose-invert-code:#fff;--tw-prose-invert-pre-code:#d1d5db;--tw-prose-invert-pre-bg:rgba(0,0,0,.5);--tw-prose-invert-th-borders:#4b5563;--tw-prose-invert-td-borders:#374151;font-size:1rem;line-height:1.75}.prose :where(p):not(:where([class~=not-prose] *)){margin-bottom:1.25em;margin-top:1.25em}.prose :where(video):not(:where([class~=not-prose] *)){margin-bottom:2em;margin-top:2em}.prose :where(figure):not(:where([class~=not-prose] *)){margin-bottom:2em;margin-top:2em}.prose :where(li):not(:where([class~=not-prose] *)){margin-bottom:.5em;margin-top:.5em}.prose :where(ol>li):not(:where([class~=not-prose] *)){padding-left:.375em}.prose :where(ul>li):not(:where([class~=not-prose] *)){padding-left:.375em}.prose :where(.prose>ul>li p):not(:where([class~=not-prose] *)){margin-bottom:.75em;margin-top:.75em}.prose :where(.prose>ul>li>:first-child):not(:where([class~=not-prose] *)){margin-top:1.25em}.prose :where(.prose>ul>li>:last-child):not(:where([class~=not-prose] *)){margin-bottom:1.25em}.prose :where(.prose>ol>li>:first-child):not(:where([class~=not-prose] *)){margin-top:1.25em}.prose :where(.prose>ol>li>:last-child):not(:where([class~=not-prose] *)){margin-bottom:1.25em}.prose :where(ul ul,ul ol,ol ul,ol ol):not(:where([class~=not-prose] *)){margin-bottom:.75em;margin-top:.75em}.prose :where(hr+*):not(:where([class~=not-prose] *)){margin-top:0}.prose :where(h2+*):not(:where([class~=not-prose] *)){margin-top:0}.prose :where(h3+*):not(:where([class~=not-prose] *)){margin-top:0}.prose :where(h4+*):not(:where([class~=not-prose] *)){margin-top:0}.prose :where(thead th:first-child):not(:where([class~=not-prose] *)){padding-left:0}.prose :where(thead th:last-child):not(:where([class~=not-prose] *)){padding-right:0}.prose :where(tbody td,tfoot td):not(:where([class~=not-prose] *)){padding:.5714286em}.prose :where(tbody td:first-child,tfoot td:first-child):not(:where([class~=not-prose] *)){padding-left:0}.prose :where(tbody td:last-child,tfoot td:last-child):not(:where([class~=not-prose] *)){padding-right:0}.prose :where(.prose>:first-child):not(:where([class~=not-prose] *)){margin-top:0}.prose :where(.prose>:last-child):not(:where([class~=not-prose] *)){margin-bottom:0}.prose-sm :where(.prose>ul>li p):not(:where([class~=not-prose] *)){margin-bottom:.5714286em;margin-top:.5714286em}.prose-sm :where(.prose>ul>li>:first-child):not(:where([class~=not-prose] *)){margin-top:1.1428571em}.prose-sm :where(.prose>ul>li>:last-child):not(:where([class~=not-prose] *)){margin-bottom:1.1428571em}.prose-sm :where(.prose>ol>li>:first-child):not(:where([class~=not-prose] *)){margin-top:1.1428571em}.prose-sm :where(.prose>ol>li>:last-child):not(:where([class~=not-prose] *)){margin-bottom:1.1428571em}.prose-sm :where(.prose>:first-child):not(:where([class~=not-prose] *)){margin-top:0}.prose-sm :where(.prose>:last-child):not(:where([class~=not-prose] *)){margin-bottom:0}.prose-base :where(.prose>ul>li p):not(:where([class~=not-prose] *)){margin-bottom:.75em;margin-top:.75em}.prose-base :where(.prose>ul>li>:first-child):not(:where([class~=not-prose] *)){margin-top:1.25em}.prose-base :where(.prose>ul>li>:last-child):not(:where([class~=not-prose] *)){margin-bottom:1.25em}.prose-base :where(.prose>ol>li>:first-child):not(:where([class~=not-prose] *)){margin-top:1.25em}.prose-base :where(.prose>ol>li>:last-child):not(:where([class~=not-prose] *)){margin-bottom:1.25em}.prose-base :where(.prose>:first-child):not(:where([class~=not-prose] *)){margin-top:0}.prose-base :where(.prose>:last-child):not(:where([class~=not-prose] *)){margin-bottom:0}.prose-lg :where(.prose>ul>li p):not(:where([class~=not-prose] *)){margin-bottom:.8888889em;margin-top:.8888889em}.prose-lg :where(.prose>ul>li>:first-child):not(:where([class~=not-prose] *)){margin-top:1.3333333em}.prose-lg :where(.prose>ul>li>:last-child):not(:where([class~=not-prose] *)){margin-bottom:1.3333333em}.prose-lg :where(.prose>ol>li>:first-child):not(:where([class~=not-prose] *)){margin-top:1.3333333em}.prose-lg :where(.prose>ol>li>:last-child):not(:where([class~=not-prose] *)){margin-bottom:1.3333333em}.prose-lg :where(.prose>:first-child):not(:where([class~=not-prose] *)){margin-top:0}.prose-lg :where(.prose>:last-child):not(:where([class~=not-prose] *)){margin-bottom:0}.prose-xl :where(.prose>ul>li p):not(:where([class~=not-prose] *)){margin-bottom:.8em;margin-top:.8em}.prose-xl :where(.prose>ul>li>:first-child):not(:where([class~=not-prose] *)){margin-top:1.2em}.prose-xl :where(.prose>ul>li>:last-child):not(:where([class~=not-prose] *)){margin-bottom:1.2em}.prose-xl :where(.prose>ol>li>:first-child):not(:where([class~=not-prose] *)){margin-top:1.2em}.prose-xl :where(.prose>ol>li>:last-child):not(:where([class~=not-prose] *)){margin-bottom:1.2em}.prose-xl :where(.prose>:first-child):not(:where([class~=not-prose] *)){margin-top:0}.prose-xl :where(.prose>:last-child):not(:where([class~=not-prose] *)){margin-bottom:0}.prose-2xl :where(.prose>ul>li p):not(:where([class~=not-prose] *)){margin-bottom:.8333333em;margin-top:.8333333em}.prose-2xl :where(.prose>ul>li>:first-child):not(:where([class~=not-prose] *)){margin-top:1.3333333em}.prose-2xl :where(.prose>ul>li>:last-child):not(:where([class~=not-prose] *)){margin-bottom:1.3333333em}.prose-2xl :where(.prose>ol>li>:first-child):not(:where([class~=not-prose] *)){margin-top:1.3333333em}.prose-2xl :where(.prose>ol>li>:last-child):not(:where([class~=not-prose] *)){margin-bottom:1.3333333em}.prose-2xl :where(.prose>:first-child):not(:where([class~=not-prose] *)){margin-top:0}.prose-2xl :where(.prose>:last-child):not(:where([class~=not-prose] *)){margin-bottom:0}.form-input,.form-multiselect,.form-select,.form-textarea{--tw-shadow:0 0 transparent;-webkit-appearance:none;appearance:none;background-color:#fff;border-color:#8e8ea0;border-radius:0;border-width:1px;font-size:1rem;line-height:1.5rem;padding:.5rem .75rem}.form-input:focus,.form-multiselect:focus,.form-select:focus,.form-textarea:focus{--tw-ring-inset:var(--tw-empty,/*!*/ /*!*/);--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:#2563eb;--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);border-color:#2563eb;box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow);outline:2px solid transparent;outline-offset:2px}.form-input::-webkit-input-placeholder,.form-textarea::-webkit-input-placeholder{color:#8e8ea0;opacity:1}.form-input::placeholder,.form-textarea::placeholder{color:#8e8ea0;opacity:1}.form-input::-webkit-datetime-edit-fields-wrapper{padding:0}.form-input::-webkit-date-and-time-value{min-height:1.5em}.form-input::-webkit-datetime-edit,.form-input::-webkit-datetime-edit-day-field,.form-input::-webkit-datetime-edit-hour-field,.form-input::-webkit-datetime-edit-meridiem-field,.form-input::-webkit-datetime-edit-millisecond-field,.form-input::-webkit-datetime-edit-minute-field,.form-input::-webkit-datetime-edit-month-field,.form-input::-webkit-datetime-edit-second-field,.form-input::-webkit-datetime-edit-year-field{padding-bottom:0;padding-top:0}.form-select{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3E%3Cpath stroke='%238e8ea0' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3E%3C/svg%3E\");background-position:right .5rem center;background-repeat:no-repeat;background-size:1.5em 1.5em;padding-right:2.5rem;-webkit-print-color-adjust:exact;print-color-adjust:exact}.btn{align-items:center;border-color:transparent;border-width:1px;display:inline-flex;padding:.5rem .75rem;pointer-events:auto}.btn:focus{outline:2px solid transparent;outline-offset:2px}.btn:disabled{cursor:not-allowed;opacity:.5}.btn-primary{--tw-bg-opacity:1;--tw-text-opacity:1;--tw-shadow:0 1px 2px 0 rgba(0,0,0,.05);--tw-shadow-colored:0 1px 2px 0 var(--tw-shadow-color);background-color:rgba(16,163,127,var(--tw-bg-opacity));border-radius:.25rem;box-shadow:0 0 transparent,0 0 transparent,var(--tw-shadow);box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow);color:rgba(255,255,255,var(--tw-text-opacity));font-size:.875rem;line-height:1.25rem}.btn-primary:hover{--tw-bg-opacity:1;background-color:rgba(26,127,100,var(--tw-bg-opacity))}.btn-primary:focus{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);--tw-ring-offset-width:2px;box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),0 0 transparent;box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 transparent)}.btn-primary.focus-visible{--tw-ring-opacity:1;--tw-ring-color:rgba(25,195,125,var(--tw-ring-opacity))}.btn-primary:focus-visible{--tw-ring-opacity:1;--tw-ring-color:rgba(25,195,125,var(--tw-ring-opacity))}.btn-secondary{--tw-bg-opacity:1;--tw-text-opacity:1;background-color:rgba(224,231,255,var(--tw-bg-opacity));border-radius:.25rem;color:rgba(67,56,202,var(--tw-text-opacity));font-size:.875rem;line-height:1.25rem}.btn-secondary:hover{--tw-bg-opacity:1;background-color:rgba(199,210,254,var(--tw-bg-opacity))}.btn-secondary:focus{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);--tw-ring-offset-width:2px;box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),0 0 transparent;box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 transparent)}.btn-secondary.focus-visible{--tw-ring-opacity:1;--tw-ring-color:rgba(99,102,241,var(--tw-ring-opacity))}.btn-secondary:focus-visible{--tw-ring-opacity:1;--tw-ring-color:rgba(99,102,241,var(--tw-ring-opacity))}.btn-neutral{--tw-bg-opacity:1;--tw-text-opacity:1;--tw-shadow:0 1px 2px 0 rgba(0,0,0,.05);--tw-shadow-colored:0 1px 2px 0 var(--tw-shadow-color);background-color:rgba(255,255,255,var(--tw-bg-opacity));border-color:rgba(0,0,0,.1);border-radius:.25rem;border-width:1px;box-shadow:0 0 transparent,0 0 transparent,var(--tw-shadow);box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow);color:rgba(64,65,79,var(--tw-text-opacity));font-size:.875rem;line-height:1.25rem}.btn-neutral:hover{--tw-bg-opacity:1;background-color:rgba(236,236,241,var(--tw-bg-opacity))}.btn-neutral:focus{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);--tw-ring-offset-width:2px;box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),0 0 transparent;box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 transparent)}.btn-neutral.focus-visible{--tw-ring-opacity:1;--tw-ring-color:rgba(99,102,241,var(--tw-ring-opacity))}.btn-neutral:focus-visible{--tw-ring-opacity:1;--tw-ring-color:rgba(99,102,241,var(--tw-ring-opacity))}.dark .btn-neutral{--tw-border-opacity:1;--tw-bg-opacity:1;--tw-text-opacity:1;background-color:rgba(52,53,65,var(--tw-bg-opacity));border-color:rgba(86,88,105,var(--tw-border-opacity));color:rgba(255,255,255,var(--tw-text-opacity))}.dark .btn-neutral:hover{--tw-bg-opacity:1;background-color:rgba(64,65,79,var(--tw-bg-opacity))}.sr-only{clip:rect(0,0,0,0);border-width:0;height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;white-space:nowrap;width:1px}.pointer-events-none{pointer-events:none}.pointer-events-auto{pointer-events:auto}.visible{visibility:visible}.invisible{visibility:hidden}.static{position:static}.fixed{position:fixed}.absolute{position:absolute}.relative{position:relative}.sticky{position:-webkit-sticky;position:sticky}.\\!sticky{position:-webkit-sticky!important;position:sticky!important}.inset-0{left:0;right:0}.inset-0,.inset-y-0{bottom:0;top:0}.right-0{right:0}.top-1\\/2{top:50%}.top-\\[20px\\]{top:20px}.left-0{left:0}.top-2{top:.5rem}.right-4{right:1rem}.top-4{top:1rem}.top-6{top:1.5rem}.left-2{left:.5rem}.top-8{top:2rem}.left-full{left:100%}.top-0{top:0}.left-1\\/2{left:50%}.top-full{top:100%}.-left-2{left:-.5rem}.bottom-1\\.5{bottom:.375rem}.right-1{right:.25rem}.bottom-1{bottom:.25rem}.bottom-0{bottom:0}.right-6{right:1.5rem}.bottom-\\[140px\\]{bottom:140px}.top-1\\.5{top:.375rem}.top-1{top:.25rem}.z-10{z-index:10}.z-20{z-index:20}.z-40{z-index:40}.-z-10{z-index:-10}.z-0{z-index:0}.float-left{float:left}.m-auto{margin:auto}.m-2{margin:.5rem}.m-0{margin:0}.m-1{margin:.25rem}.mx-auto{margin-left:auto;margin-right:auto}.mx-1{margin-left:.25rem;margin-right:.25rem}.mx-2{margin-left:.5rem;margin-right:.5rem}.mb-4{margin-bottom:1rem}.-mr-2{margin-right:-.5rem}.mb-8{margin-bottom:2rem}.mt-1{margin-top:.25rem}.mr-2{margin-right:.5rem}.ml-4{margin-left:1rem}.mb-2{margin-bottom:.5rem}.-ml-4{margin-left:-1rem}.mt-2{margin-top:.5rem}.ml-auto{margin-left:auto}.mt-3{margin-top:.75rem}.mr-4{margin-right:1rem}.mt-5{margin-top:1.25rem}.ml-6{margin-left:1.5rem}.-mr-12{margin-right:-3rem}.ml-1{margin-left:.25rem}.-ml-0\\.5{margin-left:-.125rem}.-mt-0\\.5{margin-top:-.125rem}.-ml-0{margin-left:0}.-mt-0{margin-top:0}.ml-3{margin-left:.75rem}.ml-2{margin-left:.5rem}.mb-3{margin-bottom:.75rem}.mt-4{margin-top:1rem}.mb-1{margin-bottom:.25rem}.mt-0\\.5{margin-top:.125rem}.mt-0{margin-top:0}.-ml-px{margin-left:-1px}.mb-5{margin-bottom:1.25rem}.\\!mt-4{margin-top:1rem!important}.\\!mb-2{margin-bottom:.5rem!important}.mt-6{margin-top:1.5rem}.mr-1{margin-right:.25rem}.mt-\\[20vh\\]{margin-top:20vh}.mr-auto{margin-right:auto}.mb-16{margin-bottom:4rem}.block{display:block}.inline-block{display:inline-block}.inline{display:inline}.flex{display:flex}.inline-flex{display:inline-flex}.grid{display:grid}.contents{display:contents}.hidden{display:none}.h-\\[30px\\]{height:30px}.h-4{height:1rem}.h-8{height:2rem}.h-10{height:2.5rem}.h-full{height:100%}.h-3{height:.75rem}.h-6{height:1.5rem}.h-12{height:3rem}.h-1{height:.25rem}.h-7{height:1.75rem}.h-48{height:12rem}.h-5{height:1.25rem}.h-2{height:.5rem}.h-\\[1px\\]{height:1px}.h-\\[37px\\]{height:37px}.min-h-\\[20px\\]{min-height:20px}.min-h-full{min-height:100%}.min-h-0{min-height:0}.min-h-\\[32px\\]{min-height:32px}.min-h-\\[71px\\]{min-height:71px}.w-\\[30px\\]{width:30px}.w-4{width:1rem}.w-8{width:2rem}.w-10{width:2.5rem}.w-full{width:100%}.w-\\[calc\\(100\\%-34px\\)\\]{width:calc(100% - 34px)}.w-3{width:.75rem}.w-6{width:1.5rem}.w-12{width:3rem}.w-screen{width:100vw}.w-14{width:3.5rem}.w-11{width:2.75rem}.w-5{width:1.25rem}.w-2{width:.5rem}.w-96{width:24rem}.max-w-2xl{max-width:42rem}.max-w-xs{max-width:20rem}.max-w-7xl{max-width:80rem}.max-w-sm{max-width:24rem}.max-w-full{max-width:100%}.max-w-md{max-width:28rem}.flex-1{flex:1 1 0%}.flex-shrink-0{flex-shrink:0}.shrink{flex-shrink:1}.flex-grow,.grow{flex-grow:1}.-translate-y-1\\/2{--tw-translate-y:-50%}.-translate-x-full,.-translate-y-1\\/2{-webkit-transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.-translate-x-full{--tw-translate-x:-100%}.translate-y-4{--tw-translate-y:1rem}.translate-y-0,.translate-y-4{-webkit-transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.translate-y-0{--tw-translate-y:0px}.translate-x-1{--tw-translate-x:0.25rem}.translate-x-1,.translate-y-1{-webkit-transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.translate-y-1{--tw-translate-y:0.25rem}.translate-x-0{--tw-translate-x:0px}.-translate-y-full,.translate-x-0{-webkit-transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.-translate-y-full{--tw-translate-y:-100%}.-translate-x-1\\/2{--tw-translate-x:-50%}.-translate-x-1\\/2,.translate-x-full{-webkit-transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.translate-x-full{--tw-translate-x:100%}.translate-x-5{--tw-translate-x:1.25rem}.translate-x-4,.translate-x-5{-webkit-transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.translate-x-4{--tw-translate-x:1rem}.rotate-90{--tw-rotate:90deg}.rotate-90,.transform{-webkit-transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}@-webkit-keyframes spin{to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@keyframes spin{to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}.animate-spin{-webkit-animation:spin 1s linear infinite;animation:spin 1s linear infinite}.cursor-pointer{cursor:pointer}.select-none{-webkit-user-select:none;user-select:none}.resize-none{resize:none}.resize{resize:both}.appearance-none{-webkit-appearance:none;appearance:none}.flex-row{flex-direction:row}.flex-col{flex-direction:column}.items-start{align-items:flex-start}.items-end{align-items:flex-end}.items-center{align-items:center}.items-stretch{align-items:stretch}.justify-center{justify-content:center}.justify-between{justify-content:space-between}.justify-evenly{justify-content:space-evenly}.gap-1{gap:.25rem}.gap-2{gap:.5rem}.gap-6{gap:1.5rem}.gap-4{gap:1rem}.gap-3{gap:.75rem}.gap-0\\.5{gap:.125rem}.gap-0{gap:0}.gap-10{gap:2.5rem}.gap-3\\.5{gap:.875rem}.space-y-1>:not([hidden])~:not([hidden]){--tw-space-y-reverse:0;margin-bottom:calc(.25rem*var(--tw-space-y-reverse));margin-top:calc(.25rem*(1 - var(--tw-space-y-reverse)))}.space-y-2>:not([hidden])~:not([hidden]){--tw-space-y-reverse:0;margin-bottom:calc(.5rem*var(--tw-space-y-reverse));margin-top:calc(.5rem*(1 - var(--tw-space-y-reverse)))}.self-end{align-self:flex-end}.self-center{align-self:center}.overflow-hidden{overflow:hidden}.overflow-y-auto{overflow-y:auto}.truncate{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.\\!whitespace-pre-wrap{white-space:pre-wrap!important}.whitespace-pre-wrap{white-space:pre-wrap}.break-words{word-wrap:break-word}.rounded-md{border-radius:.375rem}.rounded-sm{border-radius:.125rem}.rounded-full{border-radius:9999px}.rounded-lg{border-radius:.5rem}.rounded{border-radius:.25rem}.rounded-l-md{border-bottom-left-radius:.375rem;border-top-left-radius:.375rem}.rounded-r-md{border-bottom-right-radius:.375rem;border-top-right-radius:.375rem}.border{border-width:1px}.border-0{border-width:0}.border-2{border-width:2px}.border-y{border-top-width:1px}.border-b,.border-y{border-bottom-width:1px}.border-l{border-left-width:1px}.border-b-2{border-bottom-width:2px}.border-none{border-style:none}.border-white{--tw-border-opacity:1;border-color:rgba(255,255,255,var(--tw-border-opacity))}.border-gray-300{--tw-border-opacity:1;border-color:rgba(197,197,210,var(--tw-border-opacity))}.border-black\\/10{border-color:rgba(0,0,0,.1)}.border-white\\/20{border-color:hsla(0,0%,100%,.2)}.border-indigo-400{--tw-border-opacity:1;border-color:rgba(129,140,248,var(--tw-border-opacity))}.border-orange-500{--tw-border-opacity:1;border-color:rgba(224,108,43,var(--tw-border-opacity))}.border-red-500{--tw-border-opacity:1;border-color:rgba(239,68,68,var(--tw-border-opacity))}.border-gray-100{--tw-border-opacity:1;border-color:rgba(236,236,241,var(--tw-border-opacity))}.border-gray-200{--tw-border-opacity:1;border-color:rgba(217,217,227,var(--tw-border-opacity))}.border-transparent{border-color:transparent}.border-gray-700{--tw-border-opacity:1;border-color:rgba(64,65,79,var(--tw-border-opacity))}.border-indigo-500{--tw-border-opacity:1;border-color:rgba(99,102,241,var(--tw-border-opacity))}.bg-gray-200{--tw-bg-opacity:1;background-color:rgba(217,217,227,var(--tw-bg-opacity))}.bg-orange-500{--tw-bg-opacity:1;background-color:rgba(224,108,43,var(--tw-bg-opacity))}.bg-red-500{--tw-bg-opacity:1;background-color:rgba(239,68,68,var(--tw-bg-opacity))}.bg-\\[\\#5436DA\\]{--tw-bg-opacity:1;background-color:rgba(84,54,218,var(--tw-bg-opacity))}.bg-gray-50{--tw-bg-opacity:1;background-color:rgba(247,247,248,var(--tw-bg-opacity))}.bg-white{--tw-bg-opacity:1;background-color:rgba(255,255,255,var(--tw-bg-opacity))}.bg-black{--tw-bg-opacity:1;background-color:rgba(0,0,0,var(--tw-bg-opacity))}.bg-gray-800{--tw-bg-opacity:1;background-color:rgba(52,53,65,var(--tw-bg-opacity))}.bg-gray-100{--tw-bg-opacity:1;background-color:rgba(236,236,241,var(--tw-bg-opacity))}.bg-gray-500\\/75{background-color:hsla(240,9%,59%,.75)}.bg-red-100{--tw-bg-opacity:1;background-color:rgba(254,226,226,var(--tw-bg-opacity))}.bg-yellow-100{--tw-bg-opacity:1;background-color:rgba(254,249,195,var(--tw-bg-opacity))}.bg-green-100{--tw-bg-opacity:1;background-color:rgba(210,244,211,var(--tw-bg-opacity))}.bg-gray-900{--tw-bg-opacity:1;background-color:rgba(32,33,35,var(--tw-bg-opacity))}.bg-gray-600{--tw-bg-opacity:1;background-color:rgba(86,88,105,var(--tw-bg-opacity))}.bg-transparent{background-color:transparent}.bg-gray-500{--tw-bg-opacity:1;background-color:rgba(142,142,160,var(--tw-bg-opacity))}.\\!bg-white{--tw-bg-opacity:1!important;background-color:rgba(255,255,255,var(--tw-bg-opacity))!important}.bg-orange-500\\/10{background-color:rgba(224,108,43,.1)}.bg-red-500\\/10{background-color:rgba(239,68,68,.1)}.\\!bg-indigo-600{--tw-bg-opacity:1!important;background-color:rgba(79,70,229,var(--tw-bg-opacity))!important}.\\!bg-gray-200{--tw-bg-opacity:1!important;background-color:rgba(217,217,227,var(--tw-bg-opacity))!important}.bg-orange-500\\/80{background-color:rgba(224,108,43,.8)}.bg-red-500\\/50{background-color:rgba(239,68,68,.5)}.bg-gray-300{--tw-bg-opacity:1;background-color:rgba(197,197,210,var(--tw-bg-opacity))}.bg-opacity-75{--tw-bg-opacity:0.75}.bg-vert-light-gradient{background-image:linear-gradient(180deg,hsla(0,0%,100%,0) 13.94%,#fff 54.73%)}.bg-contain{background-size:contain}.bg-center{background-position:50%}.bg-no-repeat{background-repeat:no-repeat}.stroke-0{stroke-width:0}.p-1{padding:.25rem}.p-4{padding:1rem}.p-2{padding:.5rem}.p-0{padding:0}.p-3{padding:.75rem}.p-6{padding:1.5rem}.px-2{padding-left:.5rem;padding-right:.5rem}.py-1{padding-bottom:.25rem;padding-top:.25rem}.py-8{padding-bottom:2rem;padding-top:2rem}.px-16{padding-left:4rem;padding-right:4rem}.px-4{padding-left:1rem;padding-right:1rem}.py-2{padding-bottom:.5rem;padding-top:.5rem}.py-4{padding-bottom:1rem;padding-top:1rem}.px-6{padding-left:1.5rem;padding-right:1.5rem}.px-3{padding-left:.75rem;padding-right:.75rem}.py-3{padding-bottom:.75rem;padding-top:.75rem}.py-10{padding-bottom:2.5rem;padding-top:2.5rem}.py-2\\.5{padding-bottom:.625rem;padding-top:.625rem}.pt-2{padding-top:.5rem}.pr-6{padding-right:1.5rem}.pt-5{padding-top:1.25rem}.pb-4{padding-bottom:1rem}.pb-2{padding-bottom:.5rem}.pl-1{padding-left:.25rem}.pt-1{padding-top:.25rem}.pb-1{padding-bottom:.25rem}.pl-2{padding-left:.5rem}.pr-7{padding-right:1.75rem}.pl-3{padding-left:.75rem}.pb-0{padding-bottom:0}.pl-10{padding-left:2.5rem}.pb-3{padding-bottom:.75rem}.pr-5{padding-right:1.25rem}.pr-1{padding-right:.25rem}.pr-10{padding-right:2.5rem}.text-left{text-align:left}.text-center{text-align:center}.text-right{text-align:right}.align-top{vertical-align:top}.font-sans{font-family:Söhne,ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,Noto Sans,sans-serif,Helvetica Neue,Arial,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji}.font-mono{font-family:Söhne Mono,Monaco,Andale Mono,Ubuntu Mono,monospace}.text-xs{font-size:.75rem;line-height:1rem}.text-\\[10px\\]{font-size:10px}.text-lg{font-size:1.125rem;line-height:1.75rem}.text-4xl{font-size:2.25rem;line-height:2.5rem}.text-sm{font-size:.875rem;line-height:1.25rem}.text-base{font-size:1rem;line-height:1.5rem}.text-3xl{font-size:1.875rem;line-height:2.25rem}.text-2xl{font-size:1.5rem;line-height:2rem}.text-6xl{font-size:3.75rem;line-height:1}.text-xl{font-size:1.25rem;line-height:1.75rem}.font-normal{font-weight:400}.font-semibold{font-weight:600}.font-medium{font-weight:500}.font-bold{font-weight:700}.uppercase{text-transform:uppercase}.normal-case{text-transform:none}.leading-6{line-height:1.5rem}.leading-tight{line-height:1.25}.leading-5{line-height:1.25rem}.text-gray-400{--tw-text-opacity:1;color:rgba(172,172,190,var(--tw-text-opacity))}.text-gray-500{--tw-text-opacity:1;color:rgba(142,142,160,var(--tw-text-opacity))}.text-white{--tw-text-opacity:1;color:rgba(255,255,255,var(--tw-text-opacity))}.text-black{--tw-text-opacity:1;color:rgba(0,0,0,var(--tw-text-opacity))}.text-red-800{--tw-text-opacity:1;color:rgba(153,27,27,var(--tw-text-opacity))}.text-gray-800{--tw-text-opacity:1;color:rgba(52,53,65,var(--tw-text-opacity))}.text-gray-200{--tw-text-opacity:1;color:rgba(217,217,227,var(--tw-text-opacity))}.text-gray-700{--tw-text-opacity:1;color:rgba(64,65,79,var(--tw-text-opacity))}.text-gray-900{--tw-text-opacity:1;color:rgba(32,33,35,var(--tw-text-opacity))}.text-gray-600{--tw-text-opacity:1;color:rgba(86,88,105,var(--tw-text-opacity))}.text-red-600{--tw-text-opacity:1;color:rgba(220,38,38,var(--tw-text-opacity))}.text-yellow-700{--tw-text-opacity:1;color:rgba(161,98,7,var(--tw-text-opacity))}.text-green-700{--tw-text-opacity:1;color:rgba(26,127,100,var(--tw-text-opacity))}.text-indigo-500{--tw-text-opacity:1;color:rgba(99,102,241,var(--tw-text-opacity))}.text-red-500{--tw-text-opacity:1;color:rgba(239,68,68,var(--tw-text-opacity))}.text-orange-500{--tw-text-opacity:1;color:rgba(224,108,43,var(--tw-text-opacity))}.text-black\\/50{color:rgba(0,0,0,.5)}.text-indigo-600{--tw-text-opacity:1;color:rgba(79,70,229,var(--tw-text-opacity))}.text-yellow-400{--tw-text-opacity:1;color:rgba(250,204,21,var(--tw-text-opacity))}.text-red-300{--tw-text-opacity:1;color:rgba(252,165,165,var(--tw-text-opacity))}.text-gray-300{--tw-text-opacity:1;color:rgba(197,197,210,var(--tw-text-opacity))}.text-blue-500{--tw-text-opacity:1;color:rgba(59,130,246,var(--tw-text-opacity))}.underline{text-decoration-line:underline}.placeholder-gray-500::-webkit-input-placeholder{--tw-placeholder-opacity:1;color:rgba(142,142,160,var(--tw-placeholder-opacity))}.placeholder-gray-500::placeholder{--tw-placeholder-opacity:1;color:rgba(142,142,160,var(--tw-placeholder-opacity))}.opacity-0{opacity:0}.opacity-100{opacity:1}.opacity-20{opacity:.2}.shadow-md{--tw-shadow:0 4px 6px -1px rgba(0,0,0,.1),0 2px 4px -2px rgba(0,0,0,.1);--tw-shadow-colored:0 4px 6px -1px var(--tw-shadow-color),0 2px 4px -2px var(--tw-shadow-color)}.shadow-md,.shadow-sm{box-shadow:0 0 transparent,0 0 transparent,var(--tw-shadow);box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow)}.shadow-sm{--tw-shadow:0 1px 2px 0 rgba(0,0,0,.05);--tw-shadow-colored:0 1px 2px 0 var(--tw-shadow-color)}.shadow-xl{--tw-shadow:0 20px 25px -5px rgba(0,0,0,.1),0 8px 10px -6px rgba(0,0,0,.1);--tw-shadow-colored:0 20px 25px -5px var(--tw-shadow-color),0 8px 10px -6px var(--tw-shadow-color)}.shadow-lg,.shadow-xl{box-shadow:0 0 transparent,0 0 transparent,var(--tw-shadow);box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow)}.shadow-lg{--tw-shadow:0 10px 15px -3px rgba(0,0,0,.1),0 4px 6px -4px rgba(0,0,0,.1);--tw-shadow-colored:0 10px 15px -3px var(--tw-shadow-color),0 4px 6px -4px var(--tw-shadow-color)}.shadow{--tw-shadow:0 1px 3px 0 rgba(0,0,0,.1),0 1px 2px -1px rgba(0,0,0,.1);--tw-shadow-colored:0 1px 3px 0 var(--tw-shadow-color),0 1px 2px -1px var(--tw-shadow-color)}.shadow,.shadow-\\[0_0_10px_rgba\\(0\\2c 0\\2c 0\\2c 0\\.10\\)\\]{box-shadow:0 0 transparent,0 0 transparent,var(--tw-shadow);box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow)}.shadow-\\[0_0_10px_rgba\\(0\\2c 0\\2c 0\\2c 0\\.10\\)\\]{--tw-shadow:0 0 10px rgba(0,0,0,.1);--tw-shadow-colored:0 0 10px var(--tw-shadow-color)}.shadow-indigo-400{--tw-shadow-color:#818cf8;--tw-shadow:var(--tw-shadow-colored)}.outline-none{outline:2px solid transparent;outline-offset:2px}.ring-1{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color)}.ring-0,.ring-1{box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),0 0 transparent;box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 transparent)}.ring-0{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(var(--tw-ring-offset-width)) var(--tw-ring-color)}.ring-black{--tw-ring-opacity:1;--tw-ring-color:rgba(0,0,0,var(--tw-ring-opacity))}.ring-opacity-5{--tw-ring-opacity:0.05}.filter{-webkit-filter:var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);filter:var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow)}.filter-none{-webkit-filter:none;filter:none}.transition{transition-duration:.15s;transition-property:color,background-color,border-color,text-decoration-color,fill,stroke,opacity,box-shadow,-webkit-transform,-webkit-filter,-webkit-backdrop-filter;transition-property:color,background-color,border-color,text-decoration-color,fill,stroke,opacity,box-shadow,transform,filter,backdrop-filter;transition-property:color,background-color,border-color,text-decoration-color,fill,stroke,opacity,box-shadow,transform,filter,backdrop-filter,-webkit-transform,-webkit-filter,-webkit-backdrop-filter;transition-timing-function:cubic-bezier(.4,0,.2,1)}.transition-opacity{transition-duration:.15s;transition-property:opacity;transition-timing-function:cubic-bezier(.4,0,.2,1)}.transition-all{transition-duration:.15s;transition-property:all;transition-timing-function:cubic-bezier(.4,0,.2,1)}.transition-colors{transition-duration:.15s;transition-property:color,background-color,border-color,text-decoration-color,fill,stroke;transition-timing-function:cubic-bezier(.4,0,.2,1)}.transition-width{transition-duration:.15s;transition-property:width;transition-timing-function:cubic-bezier(.4,0,.2,1)}.duration-200{transition-duration:.2s}.duration-500{transition-duration:.5s}.duration-300{transition-duration:.3s}.duration-150{transition-duration:.15s}.duration-100{transition-duration:.1s}.ease-out{transition-timing-function:cubic-bezier(0,0,.2,1)}.ease-in{transition-timing-function:cubic-bezier(.4,0,1,1)}.ease-linear{transition-timing-function:linear}.ease-in-out{transition-timing-function:cubic-bezier(.4,0,.2,1)}#__next,#root,body,html{height:100%}.markdown ol{counter-reset:item}.markdown ul li{display:block;margin:0;position:relative}.markdown ul li:before{content:\"•\";font-size:.875rem;line-height:1.25rem;margin-left:-1rem;position:absolute}.markdown{max-width:none}.markdown h1,.markdown h2{font-weight:600}.markdown h2{margin-bottom:1rem;margin-top:2rem}.markdown h3{font-weight:600}.markdown h3,.markdown h4{margin-bottom:.5rem;margin-top:1rem}.markdown h4{font-weight:400}.markdown h5{font-weight:600}.markdown blockquote{--tw-border-opacity:1;border-color:rgba(142,142,160,var(--tw-border-opacity));border-left-width:2px;line-height:1rem;padding-left:1rem}.markdown ol,.markdown ul{display:flex;flex-direction:column;padding-left:1rem}.markdown ol li,.markdown ol li>p,.markdown ol ol,.markdown ol ul,.markdown ul li,.markdown ul li>p,.markdown ul ol,.markdown ul ul{margin:0}.markdown table{--tw-border-spacing-x:0px;--tw-border-spacing-y:0px;border-collapse:separate;border-spacing:var(--tw-border-spacing-x) var(--tw-border-spacing-y);width:100%}.markdown th{background-color:rgba(236,236,241,.2);border-bottom-width:1px;border-left-width:1px;border-top-width:1px;padding:.25rem .75rem}.markdown th:first-child{border-top-left-radius:.375rem}.markdown th:last-child{border-right-width:1px;border-top-right-radius:.375rem}.markdown td{border-bottom-width:1px;border-left-width:1px;padding:.25rem .75rem}.markdown td:last-child{border-right-width:1px}.markdown tbody tr:last-child td:first-child{border-bottom-left-radius:.375rem}.markdown tbody tr:last-child td:last-child{border-bottom-right-radius:.375rem}.markdown a{text-decoration-line:underline;text-underline-offset:2px}.conversation-item-time:before{content:attr(data-time)}.tooltip-label:before{content:attr(data-content)}button.scroll-convo{display:none}@-webkit-keyframes blink{to{visibility:hidden}}@keyframes blink{to{visibility:hidden}}.result-streaming.light>:not(ol):not(ul):not(pre):last-child:after,.result-streaming.light>ol:last-child li:last-child:after,.result-streaming.light>pre:last-child code:after,.result-streaming.light>ul:last-child li:last-child:after{-webkit-animation:blink 1s steps(5,start) infinite;animation:blink 1s steps(5,start) infinite;color:#fff;content:/*savepage-url=/images/cursor-text.svg*/url();display:inline-block;font-size:12px;margin-left:0;vertical-align:middle}.result-streaming.dark>:not(ol):not(ul):not(pre):last-child:after,.result-streaming.dark>ol:last-child li:last-child:after,.result-streaming.dark>pre:last-child code:after,.result-streaming.dark>ul:last-child li:last-child:after{-webkit-animation:blink 1s steps(5,start) infinite;animation:blink 1s steps(5,start) infinite;color:#fff;content:\"█\";margin-left:.25rem;vertical-align:baseline}.before\\:visible:before{content:var(--tw-content);visibility:visible}.before\\:absolute:before{content:var(--tw-content);position:absolute}.before\\:-top-7:before{content:var(--tw-content);top:-1.75rem}.before\\:-top-1:before{content:var(--tw-content);top:-.25rem}.before\\:h-2:before{content:var(--tw-content);height:.5rem}.before\\:w-2:before{content:var(--tw-content);width:.5rem}.before\\:-translate-y-1\\/2:before{--tw-translate-y:-50%}.before\\:-translate-x-1\\/2:before,.before\\:-translate-y-1\\/2:before{content:var(--tw-content);-webkit-transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.before\\:-translate-x-1\\/2:before{--tw-translate-x:-50%}.before\\:rotate-45:before{--tw-rotate:45deg;content:var(--tw-content);-webkit-transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.before\\:bg-gray-900:before{--tw-bg-opacity:1;background-color:rgba(32,33,35,var(--tw-bg-opacity));content:var(--tw-content)}.before\\:content-\\[\\\"\\\"\\]:before{--tw-content:\"\";content:var(--tw-content)}.before\\:content-\\[\\'\\\"\\'\\]:before{--tw-content:'\"';content:var(--tw-content)}.after\\:h-\\[15px\\]:after{content:var(--tw-content);height:15px}.after\\:w-\\[1px\\]:after{content:var(--tw-content);width:1px}.after\\:bg-gray-300:after{--tw-bg-opacity:1;background-color:rgba(197,197,210,var(--tw-bg-opacity));content:var(--tw-content)}.after\\:content-\\[\\\"\\\"\\]:after{--tw-content:\"\";content:var(--tw-content)}.after\\:content-\\[\\'\\\"\\'\\]:after{--tw-content:'\"';content:var(--tw-content)}.last\\:mb-2:last-child{margin-bottom:.5rem}.last\\:after\\:bg-transparent:last-child:after{background-color:transparent;content:var(--tw-content)}.checked\\:border-blue-600:checked{--tw-border-opacity:1;border-color:rgba(37,99,235,var(--tw-border-opacity))}.checked\\:bg-blue-600:checked{--tw-bg-opacity:1;background-color:rgba(37,99,235,var(--tw-bg-opacity))}.focus-within\\:border-indigo-600[focus-within]{--tw-border-opacity:1;border-color:rgba(79,70,229,var(--tw-border-opacity))}.focus-within\\:border-indigo-600:focus-within{--tw-border-opacity:1;border-color:rgba(79,70,229,var(--tw-border-opacity))}.focus-within\\:ring-1[focus-within]{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),0 0 transparent;box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 transparent)}.focus-within\\:ring-1:focus-within{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),0 0 transparent;box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 transparent)}.focus-within\\:ring-indigo-600[focus-within]{--tw-ring-opacity:1;--tw-ring-color:rgba(79,70,229,var(--tw-ring-opacity))}.focus-within\\:ring-indigo-600:focus-within{--tw-ring-opacity:1;--tw-ring-color:rgba(79,70,229,var(--tw-ring-opacity))}.hover\\:bg-gray-100:hover{--tw-bg-opacity:1;background-color:rgba(236,236,241,var(--tw-bg-opacity))}.hover\\:bg-gray-50:hover{--tw-bg-opacity:1;background-color:rgba(247,247,248,var(--tw-bg-opacity))}.hover\\:bg-gray-800:hover{--tw-bg-opacity:1;background-color:rgba(52,53,65,var(--tw-bg-opacity))}.hover\\:bg-white\\/20:hover{background-color:hsla(0,0%,100%,.2)}.hover\\:text-gray-500:hover{--tw-text-opacity:1;color:rgba(142,142,160,var(--tw-text-opacity))}.hover\\:text-gray-700:hover{--tw-text-opacity:1;color:rgba(64,65,79,var(--tw-text-opacity))}.hover\\:text-gray-900:hover{--tw-text-opacity:1;color:rgba(32,33,35,var(--tw-text-opacity))}.hover\\:text-white:hover{--tw-text-opacity:1;color:rgba(255,255,255,var(--tw-text-opacity))}.focus\\:z-10:focus{z-index:10}.focus\\:border-indigo-600:focus{--tw-border-opacity:1;border-color:rgba(79,70,229,var(--tw-border-opacity))}.focus\\:border-indigo-500:focus{--tw-border-opacity:1;border-color:rgba(99,102,241,var(--tw-border-opacity))}.focus\\:outline-none:focus{outline:2px solid transparent;outline-offset:2px}.focus\\:ring-0:focus{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(var(--tw-ring-offset-width)) var(--tw-ring-color)}.focus\\:ring-0:focus,.focus\\:ring-2:focus{box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),0 0 transparent;box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 transparent)}.focus\\:ring-2:focus{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color)}.focus\\:ring-1:focus{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),0 0 transparent;box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 transparent)}.focus\\:ring-inset:focus{--tw-ring-inset:inset}.focus\\:ring-indigo-500:focus{--tw-ring-opacity:1;--tw-ring-color:rgba(99,102,241,var(--tw-ring-opacity))}.focus\\:ring-indigo-600:focus{--tw-ring-opacity:1;--tw-ring-color:rgba(79,70,229,var(--tw-ring-opacity))}.focus\\:ring-white:focus{--tw-ring-opacity:1;--tw-ring-color:rgba(255,255,255,var(--tw-ring-opacity))}.focus\\:ring-gray-500:focus{--tw-ring-opacity:1;--tw-ring-color:rgba(142,142,160,var(--tw-ring-opacity))}.focus\\:ring-offset-2:focus{--tw-ring-offset-width:2px}.focus-visible\\:ring-0.focus-visible{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),0 0 transparent;box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 transparent)}.focus-visible\\:ring-0:focus-visible{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),0 0 transparent;box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 transparent)}.disabled\\:bottom-1:disabled{bottom:.25rem}.disabled\\:text-gray-300:disabled{--tw-text-opacity:1;color:rgba(197,197,210,var(--tw-text-opacity))}.disabled\\:hover\\:bg-transparent:hover:disabled{background-color:transparent}.group:hover .group-hover\\:visible{visibility:visible}.group:hover .group-hover\\:text-gray-500{--tw-text-opacity:1;color:rgba(142,142,160,var(--tw-text-opacity))}.group:hover .group-hover\\:text-gray-700{--tw-text-opacity:1;color:rgba(64,65,79,var(--tw-text-opacity))}.dark .dark\\:prose-invert{--tw-prose-body:var(--tw-prose-invert-body);--tw-prose-headings:var(--tw-prose-invert-headings);--tw-prose-lead:var(--tw-prose-invert-lead);--tw-prose-links:var(--tw-prose-invert-links);--tw-prose-bold:var(--tw-prose-invert-bold);--tw-prose-counters:var(--tw-prose-invert-counters);--tw-prose-bullets:var(--tw-prose-invert-bullets);--tw-prose-hr:var(--tw-prose-invert-hr);--tw-prose-quotes:var(--tw-prose-invert-quotes);--tw-prose-quote-borders:var(--tw-prose-invert-quote-borders);--tw-prose-captions:var(--tw-prose-invert-captions);--tw-prose-code:var(--tw-prose-invert-code);--tw-prose-pre-code:var(--tw-prose-invert-pre-code);--tw-prose-pre-bg:var(--tw-prose-invert-pre-bg);--tw-prose-th-borders:var(--tw-prose-invert-th-borders);--tw-prose-td-borders:var(--tw-prose-invert-td-borders)}.dark .dark\\:border-gray-900\\/50{border-color:rgba(32,33,35,.5)}.dark .dark\\:border-gray-600{--tw-border-opacity:1;border-color:rgba(86,88,105,var(--tw-border-opacity))}.dark .dark\\:border-gray-700{--tw-border-opacity:1;border-color:rgba(64,65,79,var(--tw-border-opacity))}.dark .dark\\:border-transparent{border-color:transparent}.dark .dark\\:border-white\\/10{border-color:hsla(0,0%,100%,.1)}.dark .dark\\:bg-white\\/5{background-color:hsla(0,0%,100%,.05)}.dark .dark\\:bg-gray-800{--tw-bg-opacity:1;background-color:rgba(52,53,65,var(--tw-bg-opacity))}.dark .dark\\:bg-\\[\\#444654\\]{--tw-bg-opacity:1;background-color:rgba(68,70,84,var(--tw-bg-opacity))}.dark .dark\\:bg-gray-700{--tw-bg-opacity:1;background-color:rgba(64,65,79,var(--tw-bg-opacity))}.dark .dark\\:bg-gray-800\\/75{background-color:rgba(52,53,65,.75)}.dark .dark\\:bg-gray-900{--tw-bg-opacity:1;background-color:rgba(32,33,35,var(--tw-bg-opacity))}.dark .dark\\:bg-transparent{background-color:transparent}.dark .dark\\:bg-white\\/10{background-color:hsla(0,0%,100%,.1)}.dark .dark\\:bg-gray-100{--tw-bg-opacity:1;background-color:rgba(236,236,241,var(--tw-bg-opacity))}.dark .dark\\:bg-vert-dark-gradient{background-image:linear-gradient(180deg,rgba(53,55,64,0),#353740 58.85%)}.dark .dark\\:text-gray-100{--tw-text-opacity:1;color:rgba(236,236,241,var(--tw-text-opacity))}.dark .dark\\:text-gray-400{--tw-text-opacity:1;color:rgba(172,172,190,var(--tw-text-opacity))}.dark .dark\\:text-gray-200{--tw-text-opacity:1;color:rgba(217,217,227,var(--tw-text-opacity))}.dark .dark\\:text-gray-900{--tw-text-opacity:1;color:rgba(32,33,35,var(--tw-text-opacity))}.dark .dark\\:text-white{--tw-text-opacity:1;color:rgba(255,255,255,var(--tw-text-opacity))}.dark .dark\\:text-white\\/50{color:hsla(0,0%,100%,.5)}.dark .dark\\:text-gray-700{--tw-text-opacity:1;color:rgba(64,65,79,var(--tw-text-opacity))}.dark .dark\\:text-gray-300{--tw-text-opacity:1;color:rgba(197,197,210,var(--tw-text-opacity))}.dark .dark\\:shadow-\\[0_0_15px_rgba\\(0\\2c 0\\2c 0\\2c 0\\.10\\)\\]{--tw-shadow:0 0 15px rgba(0,0,0,.1);--tw-shadow-colored:0 0 15px var(--tw-shadow-color);box-shadow:0 0 transparent,0 0 transparent,var(--tw-shadow);box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow)}.dark .dark\\:ring-gray-600{--tw-ring-opacity:1;--tw-ring-color:rgba(86,88,105,var(--tw-ring-opacity))}.dark .dark\\:before\\:bg-gray-100:before{--tw-bg-opacity:1;background-color:rgba(236,236,241,var(--tw-bg-opacity));content:var(--tw-content)}.dark .dark\\:hover\\:bg-gray-700:hover{--tw-bg-opacity:1;background-color:rgba(64,65,79,var(--tw-bg-opacity))}.dark .dark\\:hover\\:bg-gray-900:hover{--tw-bg-opacity:1;background-color:rgba(32,33,35,var(--tw-bg-opacity))}.dark .dark\\:hover\\:bg-gray-100:hover{--tw-bg-opacity:1;background-color:rgba(236,236,241,var(--tw-bg-opacity))}.dark .dark\\:hover\\:text-gray-200:hover{--tw-text-opacity:1;color:rgba(217,217,227,var(--tw-text-opacity))}.dark .dark\\:hover\\:text-white:hover{--tw-text-opacity:1;color:rgba(255,255,255,var(--tw-text-opacity))}.dark .dark\\:hover\\:text-gray-400:hover{--tw-text-opacity:1;color:rgba(172,172,190,var(--tw-text-opacity))}.dark .dark\\:focus\\:border-white:focus{--tw-border-opacity:1;border-color:rgba(255,255,255,var(--tw-border-opacity))}.dark .dark\\:focus\\:ring-white:focus{--tw-ring-opacity:1;--tw-ring-color:rgba(255,255,255,var(--tw-ring-opacity))}.dark .dark\\:disabled\\:text-gray-400:disabled{--tw-text-opacity:1;color:rgba(172,172,190,var(--tw-text-opacity))}.dark .dark\\:disabled\\:hover\\:bg-transparent:hover:disabled{background-color:transparent}.dark .disabled\\:dark\\:hover\\:text-gray-400:hover:disabled{--tw-text-opacity:1;color:rgba(172,172,190,var(--tw-text-opacity))}@media (min-width:640px){.sm\\:my-8{margin-bottom:2rem;margin-top:2rem}.sm\\:mt-0{margin-top:0}.sm\\:mt-4{margin-top:1rem}.sm\\:flex{display:flex}.sm\\:h-10{height:2.5rem}.sm\\:w-auto{width:auto}.sm\\:w-full{width:100%}.sm\\:w-10{width:2.5rem}.sm\\:max-w-lg{max-width:32rem}.sm\\:translate-y-0{--tw-translate-y:0px}.sm\\:scale-95,.sm\\:translate-y-0{-webkit-transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.sm\\:scale-95{--tw-scale-x:.95;--tw-scale-y:.95}.sm\\:scale-100{--tw-scale-x:1;--tw-scale-y:1;-webkit-transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.sm\\:flex-row-reverse{flex-direction:row-reverse}.sm\\:items-center{align-items:center}.sm\\:gap-4{gap:1rem}.sm\\:p-0{padding:0}.sm\\:p-6{padding:1.5rem}.sm\\:p-4{padding:1rem}.sm\\:px-0{padding-left:0;padding-right:0}.sm\\:px-6{padding-left:1.5rem;padding-right:1.5rem}.sm\\:pl-3{padding-left:.75rem}.sm\\:pt-3{padding-top:.75rem}.sm\\:text-left{text-align:left}.sm\\:text-sm{font-size:.875rem;line-height:1.25rem}.sm\\:duration-300{transition-duration:.3s}.sm\\:duration-500{transition-duration:.5s}}@media (min-width:768px){.md\\:fixed{position:fixed}.md\\:inset-y-0{bottom:0;top:0}.md\\:bottom-2\\.5{bottom:.625rem}.md\\:right-2{right:.5rem}.md\\:bottom-2{bottom:.5rem}.md\\:bottom-\\[132px\\]{bottom:132px}.md\\:mt-2{margin-top:.5rem}.md\\:mt-3{margin-top:.75rem}.md\\:flex{display:flex}.md\\:hidden{display:none}.md\\:h-full{height:100%}.md\\:min-h-\\[34px\\]{min-height:34px}.md\\:w-52{width:13rem}.md\\:max-w-2xl{max-width:42rem}.md\\:flex-col{flex-direction:column}.md\\:items-start{align-items:flex-start}.md\\:border-0{border-width:0}.md\\:py-6{padding-bottom:1.5rem;padding-top:1.5rem}.md\\:py-3{padding-bottom:.75rem;padding-top:.75rem}.md\\:px-4{padding-left:1rem;padding-right:1rem}.md\\:px-0{padding-left:0;padding-right:0}.md\\:py-0{padding-bottom:0;padding-top:0}.md\\:pl-4{padding-left:1rem}.md\\:pb-1{padding-bottom:.25rem}.md\\:pl-52{padding-left:13rem}.md\\:pt-3{padding-top:.75rem}.md\\:pb-6{padding-bottom:1.5rem}.md\\:text-sm{font-size:.875rem;line-height:1.25rem}.md\\:last\\:mb-6:last-child{margin-bottom:1.5rem}}@media (min-width:1024px){.lg\\:absolute{position:absolute}.lg\\:top-0{top:0}.lg\\:right-0{right:0}.lg\\:mx-auto{margin-left:auto;margin-right:auto}.lg\\:mt-0{margin-top:0}.lg\\:w-1\\/2{width:50%}.lg\\:w-2\\/3{width:66.666667%}.lg\\:w-\\[calc\\(100\\%-20px\\)\\]{width:calc(100% - 20px)}.lg\\:w-\\[calc\\(100\\%-115px\\)\\]{width:calc(100% - 115px)}.lg\\:max-w-2xl{max-width:42rem}.lg\\:max-w-3xl{max-width:48rem}.lg\\:translate-x-full{--tw-translate-x:100%;-webkit-transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.lg\\:gap-1{gap:.25rem}.lg\\:self-center{align-self:center}.lg\\:px-0{padding-left:0;padding-right:0}.lg\\:px-8{padding-left:2rem;padding-right:2rem}.lg\\:pl-2{padding-left:.5rem}.lg\\:pt-6{padding-top:1.5rem}}@media (min-width:1280px){.xl\\:max-w-3xl{max-width:48rem}}code,pre{font-family:Söhne Mono,Monaco,Andale Mono,Ubuntu Mono,monospace!important}code[class=language-plaintext]{white-space:pre-line}code.hljs,code[class*=language-],pre[class*=language-]{word-wrap:normal;background:none;color:#fff;-webkit-hyphens:none;hyphens:none;line-height:1.5;tab-size:4;text-align:left;white-space:pre;word-break:normal;word-spacing:normal}pre[class*=language-]{border-radius:.3em;overflow:auto}:not(pre)>code.hljs,:not(pre)>code[class*=language-]{border-radius:.3em;padding:.1em;white-space:normal}.hljs-comment{color:hsla(0,0%,100%,.5)}.hljs-meta{color:hsla(0,0%,100%,.6)}.hljs-built_in,.hljs-class .hljs-title{color:#e9950c}.hljs-doctag,.hljs-formula,.hljs-keyword,.hljs-literal{color:#2e95d3}.hljs-addition,.hljs-attribute,.hljs-meta-string,.hljs-regexp,.hljs-string{color:#00a67d}.hljs-attr,.hljs-number,.hljs-selector-attr,.hljs-selector-class,.hljs-selector-pseudo,.hljs-template-variable,.hljs-type,.hljs-variable{color:#df3079}.hljs-bullet,.hljs-link,.hljs-selector-id,.hljs-symbol,.hljs-title{color:#f22c3d}.token.cdata,.token.comment,.token.doctype,.token.prolog{color:#a9aec1}.token.punctuation{color:#fefefe}.token.constant,.token.deleted,.token.property,.token.symbol,.token.tag{color:#ffa07a}.token.boolean,.token.number{color:#00e0e0}.token.attr-name,.token.builtin,.token.char,.token.inserted,.token.selector,.token.string{color:#abe338}.language-css .token.string,.style .token.string,.token.entity,.token.operator,.token.url,.token.variable{color:#00e0e0}.token.atrule,.token.attr-value,.token.function{color:gold}.token.keyword{color:#00e0e0}.token.important,.token.regex{color:gold}.token.bold,.token.important{font-weight:700}.token.italic{font-style:italic}.token.entity{cursor:help}@media screen and (-ms-high-contrast:active){code[class*=language-],pre[class*=language-]{background:window;color:windowText}:not(pre)>code[class*=language-],pre[class*=language-]{background:window}.token.important{background:highlight;color:window;font-weight:400}.token.atrule,.token.attr-value,.token.function,.token.keyword,.token.operator,.token.selector{font-weight:700}.token.attr-value,.token.comment,.token.doctype,.token.function,.token.keyword,.token.operator,.token.property,.token.string{color:highlight}.token.attr-value,.token.url{font-weight:400}}ChatGPT.react-scroll-to-bottom--css-uqjbr-79elbk { position: relative; } .react-scroll-to-bottom--css-uqjbr-1n7m0yu { height: 100%; overflow-y: auto; width: 100%; } .react-scroll-to-bottom--css-uqjbr-1tj0vk3 { background-color: rgba(0, 0, 0, 0.2); border-radius: 10px; border-width: 0px; bottom: 5px; cursor: pointer; height: 20px; outline: 0px; position: absolute; right: 20px; width: 20px; } .react-scroll-to-bottom--css-uqjbr-1tj0vk3:hover { background-color: rgba(0, 0, 0, 0.4); } .react-scroll-to-bottom--css-uqjbr-1tj0vk3:active { background-color: rgba(0, 0, 0, 0.6); } :root { } \"use strict\"; window.addEventListener(\"DOMContentLoaded\", function(event) { savepage_ShadowLoader(5); },false); function savepage_ShadowLoader(c){createShadowDOMs(0,document.documentElement);function createShadowDOMs(a,b){var i;if(b.localName==\"iframe\"||b.localName==\"frame\"){if(a=1&&b.children[0].localName==\"template\"&&b.children[0].hasAttribute(\"data-savepage-shadowroot\")){b.attachShadow({mode:\"open\"}).appendChild(b.children[0].content);b.removeChild(b.children[0]);for(i=0;i","categories":[],"tags":[]},{"title":"ACM集训算法","slug":"ACM集训算法","date":"2022-11-16T14:12:34.000Z","updated":"2022-12-07T13:53:19.132Z","comments":true,"path":"/b9cd3733.html","link":"","permalink":"https://wkxuan.cn/b9cd3733.html","excerpt":"","text":"以下全都是一起参加ACM的队友的代码，我自己写的全都因为电脑重装系统没了，感谢队友。:innocent::pray: 打表分为离线打表和在线打表，看oj平台和比赛要求吧，一般都是在线打，除非计算量很大的就离线打。 看了下代码，好像用的蛮多的都是关于素数的，用到欧拉筛。 动态规划推荐：【宫水三叶】深度讲解背包问题 dp树上dp状压dp搜索树用得差不多，DFS多一点 BFSDFS并查集单调栈与单调队列前缀与差分。。。 备注： 感觉往下的用的都很少了，只针对特别的题目有用，有兴趣的自行查阅 分块算法吉司机线段树维护区间最大值mx，区间中最大值出现次数tot，区间中的次大值se，区间和sum 扩展欧几里得与逆元模线性方程组欧拉函数12345678910111213141516171819202122232425262728typedef long long ll;#define N 1000100ll phi[N], d[N];void ini() //欧拉筛打表&#123; memset(isPrime, true, sizeof(isPrime)); int i, j; for (i = 2; i &lt; N; i++) &#123; if (isPrime[i]) prime[cnt++] = i, phi[i] = i - 1; for (j = 0; j &lt; cnt &amp;&amp; i * prime[j] &lt; N; j++) &#123; isPrime[i * prime[j]] = 0; if (i % prime[j] == 0) &#123; phi[i * prime[j]] = phi[i] * prime[j]; break; &#125; phi[i * prime[j]] = phi[i] * phi[prime[j]]; &#125; &#125; j = 2; for (i = 1; i &lt; 1000003; i++) &#123; if (phi[j] &gt;= i) d[i] = j; else j++, i--; &#125;&#125; 区间与环形dp生成树最短路LCAMiller_rabin和Rollard rho大数乘和大数幂作为基础函数 Miller_rabin判断一个数是否是素数，好像是99.99%的正确率？ 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849ll quick_mul(ll a, ll b, ll m = mod)&#123; ll ret = 0; while (b) &#123; if (b &amp; 1) ret = (ret + a) % m; b &gt;&gt;= 1; a = (a &lt;&lt; 1) % m; &#125; return ret;&#125;ll quick_pow(ll a, ll b, ll m = mod)&#123; ll ret = 1; while (b) &#123; if (b &amp; 1) ret = quick_mul(ret, a, m); b &gt;&gt;= 1; a = quick_mul(a, a, m); &#125; return ret;&#125;bool Miller_Rabin(ll p)&#123; ll n = 0, m = p - 1; if (p == 2) return true; if (p &lt; 2 || !(p &amp; 1)) return false; while (!(m &amp; 1)) n++, m &gt;&gt;= 1; for (int i = 0; i &lt; 10; i++) &#123; ll x = rand() % (p - 1) + 1; // if (quick_pow(x, p - 1, p) != 1) // return false; x = quick_pow(x, m, p); for (int j = 0; j &lt; n; j++) &#123; ll x1 = quick_mul(x, x, p); if (x1 == 1 &amp;&amp; x != 1 &amp;&amp; x != p - 1) return false; x = x1; &#125; if (x != 1) return false; &#125; return true;&#125; Pollard rho快速找到大整数的一个非1、非自身的因子的算法。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253ll quick_mul(ll a, ll b, ll m = mod)&#123; ll ret = 0; while (b) &#123; if (b &amp; 1) ret = (ret + a) % m; b &gt;&gt;= 1; a = (a &lt;&lt; 1) % m; &#125; return ret;&#125;ll quick_pow(ll a, ll b, ll m = mod)&#123; ll ret = 1; while (b) &#123; if (b &amp; 1) ret = quick_mul(ret, a, m); b &gt;&gt;= 1; a = quick_mul(a, a, m); &#125; return ret;&#125;ll gcd(ll a, ll b)&#123; return b == 0 ? a : gcd(b, a % b);&#125;ll f(ll x, ll c, ll n)&#123; return (quick_mul(x, x, n) + c) % n;&#125;ll Pollard_Rho(ll n)&#123; if (n == 4) return 2; ll f1 = 0, f2 = 0; while (1) &#123; ll c = rand() % (n - 1) + 1; do &#123; for (int i = 0; i &lt; 128; i++) &#123; f1 = f(f1, c, n); f2 = f(f(f2, c, n), c, n); if (f1 == f2) break; ll d = gcd(abs(f1 - f2), n); if (d &gt; 1) return d; &#125; &#125; while (f1 != f2); &#125;&#125; ZKW线段树123456789101112131415161718192021222324252627282930313233343536373839404142ll sum[N &lt;&lt; 2], lazy[N &lt;&lt; 2];void build()&#123; int i; for (m = 1; m &lt;= n; m &lt;&lt;= 1) ; for (i = 1; i &lt;= n; i++) cin &gt;&gt; sum[m + i]; for (i = m - 1; i; i--) sum[i] = sum[i &lt;&lt; 1] + sum[(i &lt;&lt; 1) | 1];&#125;void upd(int l, int r, ll v)&#123; ll lc = 0, rc = 0, len = 1; for (l += m - 1, r += m + 1; l ^ r ^ 1; l &gt;&gt;= 1, r &gt;&gt;= 1, len &lt;&lt;= 1) &#123; if (~l &amp; 1) lazy[l ^ 1] += v, lc += len; if (r &amp; 1) lazy[r ^ 1] += v, rc += len; sum[l &gt;&gt; 1] += v * lc; sum[r &gt;&gt; 1] += v * rc; &#125; for (lc += rc, l &gt;&gt;= 1; l; l &gt;&gt;= 1) sum[l] += v * lc;&#125;ll query(int l, int r)&#123; ll ans = 0, lc = 0, rc = 0, len = 1; for (l += m - 1, r += m + 1; l ^ r ^ 1; l &gt;&gt;= 1, r &gt;&gt;= 1, len &lt;&lt;= 1) &#123; if (~l &amp; 1) ans += sum[l ^ 1] + len * lazy[l ^ 1], lc += len; if (r &amp; 1) ans += sum[r ^ 1] + len * lazy[r ^ 1], rc += len; ans += lc * lazy[l &gt;&gt; 1] + rc * lazy[r &gt;&gt; 1]; &#125; for (lc += rc, l &gt;&gt;= 1; l; l &gt;&gt;= 1) ans += lc * lazy[l]; return ans;&#125;","categories":[],"tags":[{"name":"C++","slug":"C","permalink":"https://wkxuan.cn/tags/C/"},{"name":"ACM","slug":"ACM","permalink":"https://wkxuan.cn/tags/ACM/"}]},{"title":"【记】win11资源管理器经常卡死","slug":"【记】win11资源管理器经常卡死","date":"2022-11-07T04:46:30.000Z","updated":"2022-11-07T04:54:36.161Z","comments":true,"path":"/e2d8af2c.html","link":"","permalink":"https://wkxuan.cn/e2d8af2c.html","excerpt":"","text":"关闭详细窗格显示","categories":[],"tags":[{"name":"记录bugs","slug":"记录bugs","permalink":"https://wkxuan.cn/tags/%E8%AE%B0%E5%BD%95bugs/"}]},{"title":"bat脚本新建文章","slug":"博客相关/windows脚本新建文章","date":"2022-11-03T11:23:25.000Z","updated":"2022-11-07T04:53:57.027Z","comments":true,"path":"/12709623.html","link":"","permalink":"https://wkxuan.cn/12709623.html","excerpt":"","text":"参考【Hexo】bat自动处理hexo命令 注意最后一行相当于在_posts目录下运行文章名.md命令，也就是用默认的md打开方式打开该文件，我默认的md打开方式是Typora，所以实际效果就是用Typora打开了该文章。如果不需要可以去掉 1234567@echo offset /p name=input name:echo name:%name%echo please waitcall cd &quot;YOUR_BLOG_ROOT&quot;call hexo n %name% start /d &quot;YOUR_BLOG_ROOT\\source\\_posts&quot; %name%.md","categories":[],"tags":[{"name":"博客优化","slug":"博客优化","permalink":"https://wkxuan.cn/tags/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/"},{"name":"Bat","slug":"Bat","permalink":"https://wkxuan.cn/tags/Bat/"},{"name":"Windows","slug":"Windows","permalink":"https://wkxuan.cn/tags/Windows/"}]},{"title":"笔试准备","slug":"笔试准备","date":"2022-10-30T07:03:57.000Z","updated":"2022-11-03T11:08:13.892Z","comments":true,"path":"/a06fd12d.html","link":"","permalink":"https://wkxuan.cn/a06fd12d.html","excerpt":"","text":"基本知识数据结构栈 Java 12345678Stack&lt;Integer&gt; s1 = new Stack&lt;Integer&gt;();Stack&lt;Integer&gt; s2 = new Stack&lt;Integer&gt;();s1.push(x);s2.push(x);int p1 = s1.peek();int p2 = s2.peek();System.out.println(p1 == p2);System.out.println(s1.peek() == s2.peek()); 序号 方法描述 1 boolean empty() 测试堆栈是否为空。 2 Object peek( ) 查看堆栈顶部的对象，但不从堆栈中移除它。 3 Object pop( ) 移除堆栈顶部的对象，并作为此函数的值返回该对象。 4 Object push(Object element) 把项压入堆栈顶部。 5 int search(Object element) 返回对象在堆栈中的位置，以 1 为基数。 C++ 12stack&lt;int&gt; st;st.push(1), a = st.top(), st.pop(), st.size(), st.empty(); Python 一般我会用数组 12345678st = []st.append(1)st.pop()len(st)if st: print(&quot;st不为空&quot;)else: print(&quot;st为空&quot;) 队列其实一般说到队列，我们更多的时候会想到Queue，但是Java中做了很多封装，常用的如LinkedList，C++则可以用dequeue或者queue Java 1LinkedList&lt;String&gt; sites = new LinkedList&lt;String&gt;(); 方法 描述 public boolean add(E e) 链表末尾添加元素，返回是否成功，成功为 true，失败为 false。 public void add(int index, E element) 向指定位置插入元素。 public boolean addAll(Collection c) 将一个集合的所有元素添加到链表后面，返回是否成功，成功为 true，失败为 false。 public boolean addAll(int index, Collection c) 将一个集合的所有元素添加到链表的指定位置后面，返回是否成功，成功为 true，失败为 false。 public void addFirst(E e) 元素添加到头部。 public void addLast(E e) 元素添加到尾部。 public boolean offer(E e) 向链表末尾添加元素，返回是否成功，成功为 true，失败为 false。 public boolean offerFirst(E e) 头部插入元素，返回是否成功，成功为 true，失败为 false。 public boolean offerLast(E e) 尾部插入元素，返回是否成功，成功为 true，失败为 false。 public void clear() 清空链表。 public E removeFirst() 删除并返回第一个元素。 public E removeLast() 删除并返回最后一个元素。 public boolean remove(Object o) 删除某一元素，返回是否成功，成功为 true，失败为 false。 public E remove(int index) 删除指定位置的元素。 public E poll() 删除并返回第一个元素。 public E remove() 删除并返回第一个元素。 public boolean contains(Object o) 判断是否含有某一元素。 public E get(int index) 返回指定位置的元素。 public E getFirst() 返回第一个元素。 public E getLast() 返回最后一个元素。 public int indexOf(Object o) 查找指定元素从前往后第一次出现的索引。 public int lastIndexOf(Object o) 查找指定元素最后一次出现的索引。 public E peek() 返回第一个元素。 public E element() 返回第一个元素。 public E peekFirst() 返回头部元素。 public E peekLast() 返回尾部元素。 public E set(int index, E element) 设置指定位置的元素。 public Object clone() 克隆该列表。 public Iterator descendingIterator() 返回倒序迭代器。 public int size() 返回链表元素个数。 public ListIterator listIterator(int index) 返回从指定位置开始到末尾的迭代器。 public Object[] toArray() 返回一个由链表元素组成的数组。 public T[] toArray(T[] a) 返回一个由链表元素转换类型而成的数组。 C++ 12queue&lt;int&gt; qu;dequeue&lt;int&gt; dequ; 方法 双端队列 push(int x) pop_back() pop() pop_front() size() push_back() empty() push_front insert(int index, int val) erase(int index) Python 引用模块Queueimport Queue 12345678Queue.qsize() 返回队列的大小Queue.empty() 如果队列为空，返回True,反之FalseQueue.full() 如果队列满了，返回True,反之False，Queue.full 与 maxsize 大小对应Queue.get([block[, timeout]])获取队列，timeout等待时间Queue.get_nowait() 相当于Queue.get(False)，非阻塞方法Queue.put(item) 写入队列，timeout等待时间Queue.task_done() 在完成一项工作之后，Queue.task_done()函数向任务已经完成的队列发送一个信号。每个get()调用得到一个任务，接下来task_done()调用告诉队列该任务已经处理完毕。Queue.join() 实际上意味着等到队列为空，再执行别的操作 链表 Java：略 C++：略 Python：略 树&amp;图将树和图放在一起讲，因为他们之间最大的区别就在于有环和无环（或者有向和无向，毕竟树的本质就是有向无环图），而在程序算法设计中，对于其数据信息，我个人一般会用数组或者结构体来存储，只有在使用的时候才会具体区分其是数还是图。因为平时C++用的比较多，但是投的是Java岗，所以这里给出Java的一些实现方式（以后会把C++的各种算法模板放上来） Java 链式向前星 12345678910111213141516171819202122232425262728293031323334353637383940414243444546import java.util.Arrays;public class Tree &#123; private final int N = 10005; private Node[] edge = new Node[N &lt;&lt; 1]; private int[] head = new int[N]; private boolean[] vis = new boolean[N]; private int cnt = 0; private static class Node &#123; int to, next; &#125; public Tree() &#123; Arrays.fill(head, -1); Arrays.fill(vis, false); &#125; public void add(int u, int v) &#123; edge[cnt] = new Node(); // 注意初始化 edge[cnt].to = v; edge[cnt].next = head[u]; head[u] = cnt++; &#125; public void dfs(int u, int depth) &#123; for (int i = head[u]; ~i != 0; i = edge[i].next) &#123; int v = edge[i].to; if (!vis[v]) &#123; vis[v] = true; System.out.printf(&quot;From %d to %d, depth: %d%n&quot;, u, v, depth); dfs(v, depth + 1); vis[v] = false; &#125; &#125; &#125; public static void main(String[] args) &#123; int a = -1; System.out.println(~a == 0); Tree tree = new Tree(); for (int i = 0; i &lt; 10; ++i) tree.add(i / 2, i + 1); tree.dfs(0, 0); &#125;&#125; C++ Python 常用算法字符串处理模式匹配：KMP算法先从最朴素的算法开始 1234567891011121314151617181920public static int simple(String source, String target) &#123; char[] s = source.toCharArray(); char[] t = target.toCharArray(); int i = 0; // 主串的位置 int j = 0; // 模式串的位置 while (i &lt; s.length &amp;&amp; j &lt; t.length) &#123; if (s[i] == t[j]) &#123; // 当两个字符相同，就比较下一个 i++; j++; &#125; else &#123; i = i - j + 1; // 一旦不匹配，i后退 j = 0; // j归0 &#125; &#125; if (j == t.length) &#123; return i - j; &#125; else &#123; return -1; &#125;&#125; 这里的问题是如果source长这样：”xxxxxxxaaabc”，target&#x3D;”abc”，那么当target[0]匹配不到source[0]时，target[0]会去匹配source[1]，但事实上source[1]和source[0]相等（都是’x’），甚至之后的好多字符都是’x’，无法匹配target[0]，那么我们能不能直接”跳“到与target[0]匹配的位置呢？又该如何跳呢？ 可以肯定的是，我们需要一个数组来保存每个soure中每一个下标对应的跳跃位置；但事实是，这个数组和source并没有关系，我们需要的是target对应的跳跃数组，将其命名为next，下面给出next的获取方式，以便讲解 12345678910111213141516// 最前面的k个字符和j之前的最后k个字符是一样的。public static int[] getNext(String target) &#123; char[] t = target.toCharArray(); int[] next = new int[target.length()]; next[0] = -1; int j = 0; int k = -1; while (j &lt; t.length - 1) &#123; if (k == -1 || t[j] == t[k]) &#123; next[++j] = ++k; &#125; else &#123; k = next[k]; &#125; &#125; return next;&#125; 依然使用上述例子，我们假设source&#x3D;’abaabxxaaabc&#x3D;&#x3D;abaababc&#x3D;&#x3D;’，target&#x3D;’abaababc’，底纹是为了方便观看 &#x3D;&#x3D;abaab&#x3D;&#x3D;xxaaabcabaababc &#x3D;&#x3D;abaab&#x3D;&#x3D;abc 对于这前五个字符串，当第六个字符不匹配的时候，此时j&#x3D;5，表示next数组的下一个值的位置，k&#x3D;4，而此时t[5]为’a’，t[4]为’x’，我们发现，如果按照朴素的算法来，那么跳跃的格子数将为1（事实上朴素的暴力算法next数组全为1），但是对于字符串’abaab’，其前缀和后缀的最大匹配长度为2，即我们可以直接将target的头与第四个字符对齐，也就是 &#x3D;&#x3D;abaab&#x3D;&#x3D;xxaaabcabaababc ==abaab==abc 这样正好相当于跳了两个格子，剩下的正常匹配即可 12345678910111213141516171819202122public static int KMP(String source, String target) &#123; char[] s = source.toCharArray(); char[] t = target.toCharArray(); int i = 0; // 主串的位置 int j = 0; // 模式串的位置 int[] next = getNext(target); while (i &lt; s.length &amp;&amp; j &lt; t.length) &#123; if (j == -1 || s[i] == t[j]) &#123; // 当j为-1时，要移动的是i，当然j也要归0 i++; j++; &#125; else &#123; // i不需要回溯了 // i = i - j + 1; j = next[j]; // j回到指定位置 &#125; &#125; if (j == t.length) &#123; return i - j; &#125; else &#123; return -1; &#125;&#125; 排序复杂度&amp;稳定性概览 归并1234567891011121314151617181920212223242526272829 // 注意是左闭右闭private int[] MergeSort(int[] nums, int left, int right) &#123; int mid = left + right &gt;&gt; 1; if (left &lt; right) &#123; // 左边归并 MergeSort(nums, left, mid); // 右边归并 MergeSort(nums, mid + 1, right); // 合并，最重要的 merge(nums, left, mid, right); &#125; return nums;&#125;// 仍然是左闭右闭// 在此之前，nums[left:mid]和nums[mid:right]都已经是有序的了private void merge(int[] nums, int left, int mid, int right) &#123; int[] temp = new int[right - left + 1]; int i = left, j = mid + 1, cur = 0; while (i &lt;= mid &amp;&amp; j &lt;= right) &#123; // 放相对小的 if (nums[i] &lt; nums[j]) temp[cur++] = nums[i++]; else temp[cur++] = nums[j++]; &#125; // 把剩下相对大的放进去 while (i &lt;= mid) temp[cur++] = nums[i++]; while (j &lt;= right) temp[cur++] = nums[j++]; // 然后放到nums中 for (i = 0; i &lt; temp.length; ++i) nums[i + left] = temp[i];&#125; 快排12345678910111213141516171819202122232425public void QuickSort(int[] nums, int left, int right) &#123; if (left &gt;= right) return; int key = Partition(nums, left, right); QuickSort(nums, left, key - 1); QuickSort(nums, key + 1, right);&#125;private int Partition(int[] nums, int left, int right) &#123; int key = left;//取最左边的元素做key while (left &lt; right) &#123;//当左右没有相遇 while (left &lt; right &amp;&amp; nums[right] &gt;= nums[key])//如果右比key小就退出循环 right--; while (left &lt; right &amp;&amp; nums[left] &lt;= nums[key])//如果左比key大就退出循环 left++; swap(nums, left, right);//交换左右 &#125; swap(nums, key, left); return left;//返回key的位置&#125;private void swap(int[] nums, int left, int right) &#123; int t = nums[left]; nums[left] = nums[right]; nums[right] = t;&#125; 堆排原理就是通过构建一个大（小）顶堆，并插入元素，不断调整堆结构的过程。 优化的地方在于，使用数组来构建堆（数据结构中讲过），而C++中我可能会用priority_queue&lt;int&gt;来做，毕竟push然后pop就完事了 1234567891011121314151617181920212223242526272829303132333435363738394041public void heapSort(int[] array) &#123; if (array == null) return; // heap的根节点为0 int length = array.length; // 从非叶节点开始构建大顶堆 for (int i = length / 2 - 1; i &gt;= 0; --i) &#123; // 从第一个非叶子结点从下至上，从右至左调整结构 // pos/2 表示的是父结点， 再减一则是上一层的最后一个结点 // 从这里开始是为了初始化大顶堆（注意默认的array是有元素的） adjustHeap(array, i, length); &#125; //2.调整堆结构+交换堆顶元素与末尾元素，此做法相当于把最大值放到末尾，然后就不将末尾元素纳入排序的范围内了，也就等同于&quot;pop&quot;了 for (int j = length - 1; j &gt; 0; j--) &#123; //将堆顶元素与末尾元素进行交换 swap(array, 0, j); //重新对堆进行调整 adjustHeap(array, 0, j); &#125;&#125;private void adjustHeap(int[] array, int i, int length) &#123; int tmp = array[i]; // 左递归子节点 for (int k = i * 2 + 1; k &lt; length; k = k * 2 + 1) &#123; // 与兄弟结点比较并取大的那一个 if (k + 1 &lt; length &amp;&amp; array[k] &lt; array[k + 1]) &#123; k++; &#125; // 如果子节点大于父节点，将子节点值赋给父节点，且array[i]这个位置相当于被“置空”了 if (array[k] &gt; tmp) &#123; array[i] = array[k]; i = k; &#125; else &#123; // 一直找到一个比tmp小的，break掉 // 这样前一个位置，也就是array[i]一定是比array大且位置已经“置空”了的 break; &#125; &#125; // 到这里就相当于为tmp找到了他合适的位置了 array[i] = tmp;&#125; 计数排序1234567891011121314151617181920212223242526272829303132333435public static void countingSort(int[] array) &#123; if (array == null) return; int length = array.length; int mx = array[0]; int mn = array[0]; for (int v : array) &#123; mx = Math.max(mx, v); mn = Math.min(mn, v); &#125; // 最大最小元素之间范围[mn, mx]的长度 int offset = mx - mn + 1; int[] count = new int[offset + 1]; for (int v : array) &#123; // 计算当前值的频率，为了方便下面对count进行前缀和，那么这个值将等同于下一个值的开始位置 count[v - mn + 1]++; &#125; // 求和是为了方便后面给临时数组赋值 // 例如：[2,4,4,5,5,5]（就不打乱顺序了） 对应的count数组为：[0,1,2,3] -&gt; [0, 1, 3, 6]，第一个值0代表最小值的开始位置 // 我们会发现，如果将count数组中的每个值看做下标，其正好是排序的数组aux中每个数对应的末尾 // 如0的后面的下标是1，最后一个1的后面是3，最后一个2的后面是6 for (int i = 0; i &lt; offset; i++) &#123; count[i + 1] += count[i]; &#125; // 3. 元素按照开始索引分类，用到一个和待排数组一样大临时数组存放数据 int[] aux = new int[length]; for (int v : array) &#123; // 填充一个数据后，自增，以便相同的数据可以填到下一个空位 aux[count[v - mn]++] = v; &#125; // 4. 复制该数组到array中，注意这里使用了Python写法方面阅读，实际使用需要删除`XXX=` System.arraycopy(aux, sourcePos=0, array, destinationPos=0, len=length);&#125; 桶排序原理有点类似于归并+计数，就是按照一定的规则将数据放到不同index的桶中，然后对所有非空的桶，对他们按照一定的算法进行排序（如归并、快排，甚至是递归的桶排序，注意，如果递归使用桶排序为各个桶排序，则当桶数量为1时要手动减小BucketSize增加下一循环桶的数量，否则会陷入死循环，导致内存溢出。），然后再按照index从小到大一个个放入原array中，下面给出一个简单的计算index的规则，知乎上的 123private static int toBucketIndex(int value, int maxValue, int length) &#123; return (value * length) / (maxValue + 1);&#125; 样例效果如下：长度为10，maxValue&#x3D;94，注意这个规则要根据具体的桶的数量来定（如果可以申请很多桶，那么在计算到index过大的时候，可以用LinkedList，与ArrayList 相比，LinkedList 的增加和删除的操作效率更高，而查找和修改的操作效率较低。） 基数排序在此之前请先读懂计数排序和桶排序 原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。基数排序的方式可以采用LSD（Least significant digital）或MSD（Most significant digital），LSD的排序方式由键值的最右边开始，而MSD则相反，由键值的最左边开始。 LSD：先从低位开始进行排序，在每个关键字上，可采用桶排序 取得数组中的最大数，并取得位数； arr为原始数组，从最低位开始取每个位组成radix数组； 对radix进行计数排序（利用计数排序适用于小范围数的特点）； 说一下个人理解的原理：对于第i次结束后，第i位（从低位开始）一定是有序的。 例如只有一位数字：[4, 6, 3] 那么放到对应的桶（分别对应4,6,3）中再按照0-9的顺序拿出来之后变成[3, 4, 6]，即第一位变成有序的了。 若只有两位数字：[910, 20, 45, 43, 61] 从第一位开始，放到桶中再拿出来变成[910, 20, 61, 43, 45]，我们会发现，若【两个数字，设为a,b】第二位的数字（即十位）是相同的，那么在第一次操作之后，其一定会变成有序的，且即使a&#x3D;&#x3D;b，a和b的相对位置也不会变（因为先进先出），如同这里的43和45。 当我们对第二位操作的时候，由于43, 45的相对位置不变，因此不必担心【再次排序可能会打乱其顺序？】的问题，所以再次操作将其拿出来后，会变成[910, 20, 43, 45, 61]，可以发现，所有的二位数都有序了。 而这里放了一个三位数的意义就在于，说明其并不会影响与之位数不同的数的排序，因为在我们进行第三次操作后，由于其他数的前缀默认添加了0，那么它自然会跑到后面去 1234567891011121314151617181920212223242526272829public void LSD(int[] array) &#123; int length = array.length; int mx = Arrays.stream(array).max().getAsInt(); // 【长度最长的数字】的长度 int d = Arrays.stream(array).map(s -&gt; String.valueOf(s).length()).max().getAsInt(); // 0-9正好十个桶 LinkedList&lt;Integer&gt;[] bucket = (LinkedList&lt;Integer&gt;[]) new LinkedList[10]; int mod = 1; // 从1到d for (int i = 1; i &lt;= d; i++) &#123; for (int v : array) &#123; int index = (v / mod) % 10; if (bucket[index] == null) &#123; bucket[index] = new LinkedList&lt;&gt;(); &#125; bucket[index].add(v); &#125; int count = 0; for (int j = 0; j &lt; 10; j++) &#123; if (bucket[j] == null) continue; for (int v : bucket[j]) &#123; array[count++] = v; &#125; bucket[j].clear(); &#125; mod *= 10; &#125;&#125; MSD：先从高位开始进行排序，在每个关键字上，可采用计数排序 找出待排序的数组中最大和最小的元素； 统计数组中每个值为i的元素出现的次数，存入数组C的第i项； 对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）； 反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1。 知乎上抄的，暂不做翻译了，原地址 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647public static void radixSort(int[] array) &#123; if (array == null || array.length &lt;= 1) &#123; return; &#125; int length = array.length; // 每位数字范围0~9，基为10 int radix = 10; int[] aux = new int[length]; int[] count = new int[radix + 1]; // 以关键字来排序的轮数，由位数最多的数字决定，其余位数少的数字在比较高位时，自动用0进行比较 // 将数字转换成字符串，字符串的长度就是数字的位数，字符串最长的那个数字也拥有最多的位数 int x = Arrays.stream(array).map(s -&gt; String.valueOf(s).length()).max().getAsInt(); // 共需要d轮计数排序, 从d = 0开始，说明是从个位开始比较，符合从右到左的顺序 for (int d = 0; d &lt; x; d++) &#123; // 1. 计算频率，在需要的数组长度上额外加1 for (int i = 0; i &lt; length; i++) &#123; // 使用加1后的索引，有重复的该位置就自增 count[digitAt(array[i], d) + 1]++; &#125; // 2. 频率 -&gt; 元素的开始索引 for (int i = 0; i &lt; radix; i++) &#123; count[i + 1] += count[i]; &#125; // 3. 元素按照开始索引分类，用到一个和待排数组一样大临时数组存放数据 for (int i = 0; i &lt; length; i++) &#123; // 填充一个数据后，自增，以便相同的数据可以填到下一个空位 aux[count[digitAt(array[i], d)]++] = array[i]; &#125; // 4. 数据回写 for (int i = 0; i &lt; length; i++) &#123; array[i] = aux[i]; &#125; // 重置count[]，以便下一轮统计使用 for (int i = 0; i &lt; count.length; i++) &#123; count[i] = 0; &#125; &#125;&#125;// 与上面的mod作用相同private static int digitAt(int value, int d) &#123; return (value / (int) Math.pow(10, d)) % 10;&#125; 选择排序从0-len，选出最大（小）的元素放到头部，然后在剩下len-1个选，以此类推 12345678910111213141516171819202122232425public static void selectionSort(int[] array) &#123; if (array == null || array.length &lt;= 1) &#123; return; &#125; int length = array.length; for (int i = 0; i &lt; length - 1; i++) &#123; // 保存最小数的索引 int minIndex = i; for (int j = i + 1; j &lt; length; j++) &#123; // 找到最小的数 if (array[j] &lt; array[minIndex]) &#123; minIndex = j; &#125; &#125; // 交换元素位置 if (i != minIndex) &#123; swap(array, minIndex, i); &#125; &#125;&#125; 希尔排序 希尔排序是希尔（Donald Shell）于1959年提出的一种排序算法。希尔排序也是一种插入排序，它是简单插入排序经过改进之后的一个更高效的版本，也称为缩小增量排序，同时该算法是冲破O(n2）的第一批算法之一。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫缩小增量排序。 12345678910111213141516171819202122232425262728public static void shellSort(int[] array) &#123; if (array == null || array.length &lt;= 1) &#123; return; &#125; int length = array.length; // temp为临时变量，gap增量默认是长度的一半，每次变为之前的一半，直到最终数组有序 int temp, gap = length / 2; while (gap &gt; 0) &#123; for (int i = gap; i &lt; length; i++) &#123; // 将当前的数与减去增量之后位置的数进行比较，如果大于当前数，将它后移 temp = array[i]; int preIndex = i - gap; // 有可能分成好多组，所以要用while去寻找每个组中对应i的preIndex中值最大的 while (preIndex &gt;= 0 &amp;&amp; array[preIndex] &gt; temp) &#123; array[preIndex + gap] = array[preIndex]; preIndex -= gap; &#125; // 将当前数放到空出来的位置 array[preIndex + gap] = temp; &#125; gap /= 2; // 实际上这里的2和上面的length / 2都可以将2设为参数，让用户去选择增量gap &#125;&#125; 查找 二分查找 分块查找 二叉查找树：AVL树、红黑树、splag树 分治 二分查找就是分治 二分答案 操作系统进程和线程 进程（Process）是资源分配的基本单位，线程（Thread）是CPU调度的基本单位。 线程将进程的资源分和CPU调度分离开来。 以前进程既是资源分配又是CPU调度的基本单位，后来为了更好的利用高性能的CPU，将资源分配和CPU调度分开。因此，出现了线程。 进程和线程的联系： 一个线程只能属于一个进程，一个进程可以拥有多个线程。线程之间共享进程资源。 进程和线程的实例： 打开一个QQ，向朋友A发文字消息是一个线程，向朋友B发语音是一个线程，查看QQ空间是一个线程。QQ软件的运行是一个进程，软件中支持不同的操作，需要由线程去完成这些不同的任务。 死锁同步中断内存管理计算机网络几种网络协议和模型 软件工程各种UML图：多画几个例子 其他注意点 代码：展现专业素质 面向对象编程（不要只用main函数）：用结构化（class或struct） 代码规范：命名规则（英文或拼音、驼峰命名）、对齐和缩进 阅读代码能力：快速读懂代码 写代码的能力：熟悉常用算法模板、一次性0bug 进阶补充计算几何 线性代数：与图像处理相关的一些矩阵变换 基础：向量的点乘和叉乘 判断：线段相交、点在多边形内部、线段与直线相交、两条之间交点、多边形面积和重心（有一些模板） 提高：凸包、半平面交","categories":[],"tags":[{"name":"找班上","slug":"找班上","permalink":"https://wkxuan.cn/tags/%E6%89%BE%E7%8F%AD%E4%B8%8A/"}]},{"title":"16-Spring Cloud Security与OAuth2","slug":"SpringBoot/16-Spring Cloud Security与OAuth2","date":"2022-04-19T16:11:47.000Z","updated":"2022-10-18T05:36:59.061Z","comments":true,"path":"/f0a645c6.html","link":"","permalink":"https://wkxuan.cn/f0a645c6.html","excerpt":"","text":"Spring Cloud Security与OAuth2Spring Cloud Security分布式系统的安全控制 Spring Security安全控制原理：Filter 启动的时候创建一个过滤器的代理，代理将请求转化到Spring定义的一系列Filter，最终实现针对Web层安全的控制。 Spring Cloud能帮助我们解决哪些问题 OAuth2是一个标准，与编程语言无关；本质也是一个微服务； Open Authentication 一个基于令牌的安全框架，允许用户使用第三方验证服务进行验证 4个组成部分 A protected resource,受保护资源 A resource owner，资源所有者 An application，应用程序 OAuth2 authentication server，OAuth2验证服务器（认证服务器） 认证与访问流程 用户向认证服务器请求登录 认证返回token给用户 用户携带token访问受保护资源 受保护资源拿着token向OAuth2验证合法性 返回用户所需资源 分布式系统关系图 开发OAuth2认证服务添加依赖 123456789&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-security&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!-- 不仅仅用在spring cloud框架内 --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.security.oauth&lt;/groupId&gt; &lt;artifactId&gt;spring-security-oauth2&lt;/artifactId&gt;&lt;/dependency&gt; 启动类加注解 @EnableAuthorizationServer 实现供受保护服务将访问的端点：&#x2F;auth&#x2F;user，用于获取认证信息 创建配置类OAuth2Config-哪些应用程序(Client)、凭据？1234567891011121314151617181920212223242526@Configurationpublic class OAuth2Config extends AuthorizationServerConfigurerAdapter &#123; @Autowired private AuthenticationManager authenticationManager; @Autowired private UserDetailsService userDetailsService; // 配置app的信息 @Override public void configure(ClientDetailsServiceConfigurer clients) throws Exception &#123; clients.inMemory() // 存在内存中，实际应用中放在关系数据库中 .withClient(&quot;eagleeye&quot;) // app名称 .secret(&quot;thisissecret&quot;) // app密码 .authorizedGrantTypes(&quot;refresh_token&quot;, &quot;password&quot;, &quot;client_credentials&quot;) // 授权类型（了解 .scopes(&quot;webclient&quot;, &quot;mobileclient&quot;); // 被处理的业务的范围 &#125; @Override public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception &#123; endpoints .authenticationManager(authenticationManager) .userDetailsService(userDetailsService); &#125;&#125; 个人用户凭据、所属角色定义 支持的存储：内存、JDBC、&#x3D;&#x3D;LDAP服务器&#x3D;&#x3D; 123456789101112131415161718192021222324@Configurationpublic class WebSecurityConfigurer extends WebSecurityConfigurerAdapter &#123; @Override @Bean public AuthenticationManager authenticationManagerBean() throws Exception &#123; return super.authenticationManagerBean(); &#125; @Override @Bean public UserDetailsService userDetailsServiceBean() throws Exception &#123; return super.userDetailsServiceBean(); &#125; // 配置用户的信息，授权 @Override protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123; auth .inMemoryAuthentication() .withUser(&quot;john.carnell&quot;).password(&quot;password1&quot;).roles(&quot;USER&quot;) .and() .withUser(&quot;william.woodward&quot;).password(&quot;password2&quot;).roles(&quot;USER&quot;, &quot;ADMIN&quot;); &#125;&#125; authentication vs. authorization 认证与授权 测试 以下URL都是自动实现的 注意/auth是因为在配置文件中加上了： 12server: contextPath: /auth 验证用户POST：http://localhost:8901/auth/oauth/token 提供信息（*为必须） Auth中（Basic Auth类型）（即头部Authorization） 应用名称* 应用密码* body中（form-data类型） username* password* grant_type 授权类型 scope 使用范围 返回json access_token token_type bearer表示不记名 refresh_token： 刷新的token（token的默认有效期为12小时），当token过期时，需要携带此token再次发起验证获取新的token expires_in：有效期，单位：秒 scope：指定的使用范围 如： 访问自定义端点：&#x2F;auth&#x2F;user（这里是定义在启动类中）/auth为配置文件的上下文 1234567@RequestMapping(value = &#123; &quot;/user&quot; &#125;, produces = &quot;application/json&quot;)public Map&lt;String, Object&gt; user(OAuth2Authentication user) &#123; Map&lt;String, Object&gt; userInfo = new HashMap&lt;&gt;(); userInfo.put(&quot;user&quot;, user.getUserAuthentication().getPrincipal()); userInfo.put(&quot;authorities&quot;, AuthorityUtils.authorityListToSet(user.getUserAuthentication().getAuthorities())); return userInfo;&#125; GET：http://localhost:8901/auth/user 提供信息携带上一步的token，并在Authorization中选择OAuth2.0类型，Access Token选择Available Tokens 开发受保护资源（服务）1（licensing）添加依赖 12345678&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-security&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.security.oauth&lt;/groupId&gt; &lt;artifactId&gt;spring-security-oauth2&lt;/artifactId&gt;&lt;/dependency&gt; 配置security.oauth2.resource.userInfoUri，指向到认证服务的端点这里是通过在run.sh中通过-Dsecurity.oauth2.resource.userInfoUri=$AUTHSERVER_URI引入的 AUTHSERVER_URI在docker-compose中，值为：http://authenticationservice:8901/auth/user 启动类加注解@EnableResourceServer，指定当前服务是一个受保护的资源，强制执行一个过滤器 权限控制在业务服务中开发而不是OAuth2，是为了解耦 123456789101112@Configurationpublic class ResourceServerConfiguration extends ResourceServerConfigurerAdapter&#123; @Override public void configure(HttpSecurity http) throws Exception &#123; http .authorizeRequests() .antMatchers(&quot;/v1/organizations/**&quot;) // 针对此url必须拥有下面的ADMIN .hasRole(&quot;ADMIN&quot;) .anyRequest() .authenticated(); // 其他url必须要认证 &#125;&#125; 传递Authorization（OAuth2访问令牌） 网关（Zuul）的传递 Zuul将OAuth2令牌传播到许可证服务 在Zuul的配置文件（在confsvr中）配置： 123# 这是一个黑名单，在其中去掉Authorization即可# 我也不知道默认是啥样，可能是这样？当然可能也有其他参数：zuul.sensitiveHeaders: Cookie,Set-Cookie,Authorizationzuul.sensitiveHeaders: Cookie,Set-Cookie 配置完成后，zuulserver在调用与访问服务时都会自动带上token了 licensing的传递在调用organization-service的地方做出一些修改，使用OAuth2RestTemplate，调用远程服务（通过Zuul） 此后在licensing发送请求时就会自动带上token了 原本的restTemplate来自于org.springframework.web.client.RestTemplate 现在修改为org.springframework.security.oauth2.client.OAuth2RestTemplate 且需要在启动类中手动注入Bean 12345@Beanpublic OAuth2RestTemplate oauth2RestTemplate(OAuth2ClientContext oauth2ClientContext, OAuth2ProtectedResourceDetails details) &#123; return new OAuth2RestTemplate(details, oauth2ClientContext);&#125; JWT解决重复向OAuth2认证的问题 JSON Web Token，是IETF提出的开发标准，旨在为OAuth2令牌提供标准结构 优点 JWT令牌编码为Base64,容易传递 认证服务器作了签名（不会被伪造） 自包含信息，不需要调用认证服务 可扩展 使用添加依赖认证服务和受保护资源的服务都要加 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.security&lt;/groupId&gt; &lt;artifactId&gt;spring-security-jwt&lt;/artifactId&gt;&lt;/dependency&gt; 创建Bean（如何创建和签名JWT令牌）authentication服务、licensing服务 1234567891011121314151617181920212223242526272829303132@Configurationpublic class JWTTokenStoreConfig &#123; @Autowired private ServiceConfig serviceConfig; @Bean public TokenStore tokenStore() &#123; return new JwtTokenStore(jwtAccessTokenConverter()); &#125; @Bean @Primary public DefaultTokenServices tokenServices() &#123; DefaultTokenServices defaultTokenServices = new DefaultTokenServices(); defaultTokenServices.setTokenStore(tokenStore()); defaultTokenServices.setSupportRefreshToken(true); return defaultTokenServices; &#125; @Bean public JwtAccessTokenConverter jwtAccessTokenConverter() &#123; JwtAccessTokenConverter converter = new JwtAccessTokenConverter(); // 非常重要 // 加了签名的key（key来自于confsvr中的配置文件）属性名：signing.key // 签名随便写，但要保证与业务端一致 converter.setSigningKey(serviceConfig.getJwtSigningKey()); return converter; &#125;&#125; authentication在其中多加一个可扩展接口的Bean（可选） 1234@Beanpublic TokenEnhancer jwtTokenEnhancer() &#123; return new JWTTokenEnhancer();&#125; OAuth2认证服务：配置到OAuth2服务中authentication服务中添加配置类： 主要是为了将一些bean注入 12345678910111213141516171819202122232425262728293031323334353637383940414243@Configurationpublic class JWTOAuth2Config extends AuthorizationServerConfigurerAdapter &#123; @Autowired private AuthenticationManager authenticationManager; @Autowired private UserDetailsService userDetailsService; @Autowired private TokenStore tokenStore; @Autowired private DefaultTokenServices tokenServices; @Autowired private JwtAccessTokenConverter jwtAccessTokenConverter; @Autowired private TokenEnhancer jwtTokenEnhancer; // 可扩展接口 @Override public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception &#123; // 可扩展接口 TokenEnhancerChain tokenEnhancerChain = new TokenEnhancerChain(); tokenEnhancerChain.setTokenEnhancers(Arrays.asList(jwtTokenEnhancer, jwtAccessTokenConverter)); endpoints.tokenStore(tokenStore) //JWT .accessTokenConverter(jwtAccessTokenConverter) //JWT .tokenEnhancer(tokenEnhancerChain) //JWT .authenticationManager(authenticationManager) .userDetailsService(userDetailsService); &#125; @Override public void configure(ClientDetailsServiceConfigurer clients) throws Exception &#123; clients.inMemory() .withClient(&quot;eagleeye&quot;) .secret(&quot;thisissecret&quot;) .authorizedGrantTypes(&quot;refresh_token&quot;, &quot;password&quot;, &quot;client_credentials&quot;) .scopes(&quot;webclient&quot;, &quot;mobileclient&quot;); &#125;&#125; 可扩展接口（可选）依赖： 12345&lt;dependency&gt; &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt; &lt;artifactId&gt;jjwt&lt;/artifactId&gt; &lt;version&gt;0.7.0&lt;/version&gt;&lt;/dependency&gt; authentication中创建类1234567891011121314151617181920public class JWTTokenEnhancer implements TokenEnhancer &#123; @Autowired private OrgUserRepository orgUserRepo; private String getOrgId(String userName)&#123; UserOrganization orgUser = orgUserRepo.findByUserName( userName ); return orgUser.getOrganizationId(); &#125; @Override public OAuth2AccessToken enhance(OAuth2AccessToken accessToken, OAuth2Authentication authentication) &#123; Map&lt;String, Object&gt; additionalInfo = new HashMap&lt;&gt;(); String orgId = getOrgId(authentication.getName()); // 加上自己想要的信息 additionalInfo.put(&quot;organizationId&quot;, orgId); ((DefaultOAuth2AccessToken) accessToken).setAdditionalInformation(additionalInfo); return accessToken; &#125;&#125; 可扩展接口的解析zuul的前置过滤器中添加函数 1234567891011121314151617private String getOrganizationId()&#123; String result=&quot;&quot;; if (filterUtils.getAuthToken()!=null)&#123; String authToken = filterUtils.getAuthToken().replace(&quot;Bearer &quot;,&quot;&quot;); try &#123; Claims claims = Jwts.parser() .setSigningKey(serviceConfig.getJwtSigningKey().getBytes(&quot;UTF-8&quot;)) .parseClaimsJws(authToken).getBody(); result = (String) claims.get(&quot;organizationId&quot;); &#125; catch (Exception e)&#123; e.printStackTrace(); &#125; &#125; return result;&#125; 与之前相比？ 受保护服务中（licensing）不用再配置security.oauth2.resource.userInfoUri 认证服务、licensing、organization服务配置服务中都要加上signing.key，且保持一致 在线工具jwt编解码工具：jwt.io","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://wkxuan.cn/tags/SpringBoot/"},{"name":"SpringSecurity","slug":"SpringSecurity","permalink":"https://wkxuan.cn/tags/SpringSecurity/"}]},{"title":"15-服务网关和路由","slug":"SpringBoot/15-服务网关和路由","date":"2022-04-18T08:08:58.000Z","updated":"2022-10-18T05:36:59.059Z","comments":true,"path":"/bb89c1a1.html","link":"","permalink":"https://wkxuan.cn/bb89c1a1.html","excerpt":"","text":"服务网关和路由服务网关分布式系统的横切关注点 cross-cutting concern 安全 日志记录 用户跟踪 服务网关（service gateway） 服务网关 服务网关位于服务客户端和相应的服务实例之间 所有服务调用（内部和外部）都应流经服务网关 服务网关提供的能力 静态路由 动态路由 验证和授权 度量数据收集和日志记录 服务网关的实现Zuul Zuul is a gateway service that provides dynamic routing, monitoring, resiliency, security, and more. 将应用程序中的所有服务的路由映射到一个URL 过滤器 分布式系统关系图 网关作用：一个中转站（外部访问、内部调用都要通过网关），所以普通用户调用时用的是网关的端口加上zuul.prefix 通过服务发现自动映射路由 服务ID 需要访问Eureka，有服务才会创建路由 默认的映射路由为：（通过GEThttp://localhost:5555/routes获取） /服务ID/**: 服务ID 使用服务发现手动映射路由 手动映射：confsvr中，修改zuulservice.yml配置： 1234zuul.prefix: /apizuul.routes.organizationservice: /organization/**zuul.routes.licensingservice: /licensing/**zuul.routes.authenticationservice: /auth/** 此时的映射路由会添加（注意原先的还在，而且加上了前缀api） /api/服务ID去掉service后缀/**:服务ID 也就是对URL完成了缩短 使用静态URL手动映射路由适用场景：非Java开发的项目（没有注册到服务发现中） 静态URL是指向未通过Eureka服务发现引擎注册的服务的URL 禁用Ribbon与Eureka集成，手动指定负载均衡的服务实例 12zuul.routes.licensestatic.path: /注意加上zuul.prefix（如果有的话）/otherService/**zuul.routes.licensestatic.url: http://otherService:8081 负载均衡 123456# 定义一个 服务IDzuul.routes.licensestatic.serviceId: licensestatic# 多个实例（可能是非Java开发的）zuul.routes.licensestatic.ribbon.listOfServers: http://licenseservice-static1:8081, http://licenseservice-static2:8082# 此时就不需要ribbon了，所以要加上falseribbon.eureka.enabled: false 动态重新加载路由配置如果属性文件放在git仓库中，那么可以到仓库中来手动修改配置，且让Zuul能够重新加载这些配置，就可以发送POST请求到 POST:http://localhost:5555/refresh来让微服务主动刷新配置 设置超时原因： Hystrix的超时时间为1秒 Ribbon的超时时间为5秒 Ribbon的懒加载导致第一次调用慢 剩下的这些配置没讲 123456zuul.sensitiveHeaders: Cookie,Set-Cookiezuul.debug.request: truehystrix.command.default.execution.isolation.thread.timeoutInMilliseconds: 2500#hystrix.command.licensingservice.execution.isolation.thread.timeoutInMilliseconds: 2#licensingservice.ribbon.ReadTimeout: 2signing.key: &quot;345345fsdfsf5345&quot; 过滤器 使用Zuul和Zuul过滤器允许开发人员为通过Zuul路由的所有服务实现横切关注点 ZuulFilter 前置过滤器，在Zuul将实际请求发送到目的地之前被调用 后置过滤器，在目标服务被调用并将响应发送回客户端后被调用 路由过滤器，用于在调用目标服务之前拦截调用 前置过滤器123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051@Componentpublic class TrackingFilter extends ZuulFilter&#123; private static final int FILTER_ORDER = 1; private static final boolean SHOULD_FILTER=true; private static final Logger logger = LoggerFactory.getLogger(TrackingFilter.class); @Autowired FilterUtils filterUtils; @Override public String filterType() &#123; return FilterUtils.PRE_FILTER_TYPE; &#125; @Override public int filterOrder() &#123; return FILTER_ORDER; &#125; public boolean shouldFilter() &#123; return SHOULD_FILTER; &#125; private boolean isCorrelationIdPresent()&#123; if (filterUtils.getCorrelationId() !=null)&#123; return true; &#125; return false; &#125; private String generateCorrelationId()&#123; return java.util.UUID.randomUUID().toString(); &#125; public Object run() &#123; // 获取关联ID（手动定义的） if (isCorrelationIdPresent()) &#123; logger.debug(&quot;tmx-correlation-id found in tracking filter: &#123;&#125;. &quot;, filterUtils.getCorrelationId()); &#125; else&#123; // 没有的话就设置一个（随机生成） filterUtils.setCorrelationId(generateCorrelationId()); logger.debug(&quot;tmx-correlation-id generated in tracking filter: &#123;&#125;.&quot;, filterUtils.getCorrelationId()); &#125; // 获取请求上下文 RequestContext ctx = RequestContext.getCurrentContext(); logger.debug(&quot;Processing incoming request for &#123;&#125;.&quot;, ctx.getRequest().getRequestURI()); logger.debug(&quot;====incoming=========ServiceId==&#123;&#125;&quot;,filterUtils.getServiceId()); return null; &#125;&#125; 路由过滤器动态路由 没细讲，跳过 后置过滤器通过filterType来区分前置与后置 123456789101112131415161718192021222324252627282930313233343536@Componentpublic class ResponseFilter extends ZuulFilter&#123; private static final int FILTER_ORDER=1; private static final boolean SHOULD_FILTER=true; private static final Logger logger = LoggerFactory.getLogger(ResponseFilter.class); @Autowired FilterUtils filterUtils; @Override public String filterType() &#123; return FilterUtils.POST_FILTER_TYPE; &#125; @Override public int filterOrder() &#123; return FILTER_ORDER; &#125; @Override public boolean shouldFilter() &#123; return SHOULD_FILTER; &#125; @Override public Object run() &#123; RequestContext ctx = RequestContext.getCurrentContext(); logger.debug(&quot;Adding the correlation id to the outbound headers. &#123;&#125;&quot;, filterUtils.getCorrelationId()); ctx.getResponse().addHeader(FilterUtils.CORRELATION_ID, filterUtils.getCorrelationId()); logger.debug(&quot;Completing outgoing request for &#123;&#125;.&quot;, ctx.getRequest().getRequestURI()); logger.debug(&quot;====outgoing=========ServiceId==&#123;&#125;&quot;,filterUtils.getServiceId()); return null; &#125;&#125; 过滤器总结主要功能： 当用户请求头中没有关联ID时，zuulservice会在前置过滤器随机生成一个（设为X），并传给licensing licensing的filter会获取到X并保存到线程中。 若licensing需要向organization调用服务（我们只考虑这种情况，否则也不需要关联ID了），则在发送请求之前会由Hystrix获取线程中的X（见[2.2 licensing-service](### licensing-service)的第二点），然后再发送请求给zuulservice让他帮忙联系organization。（如果organization长时间未响应则会触发@HystrixCommand中具体参数的响应） zuulservice会在前置过滤器再次判断，但是这时候有关联ID了，就是这个X，然后带着这个X向organization发送请求 organization接收到请求，像licensing一样保存这个IDX，返回数据，且带上X给zuulservice zuulservice此时会在后置过滤器中处理这个X，并传给licensing licensing处理完用户请求，并再次带着X返回结果给zuulservice licensing的处理结果会带着X再次进入zuulservice的后置过滤器，zuulservice会在最终返回给用户的response带上这个X 若用户请求头有关联ID也同理 具体实现zuulsvr 添加依赖 1234 &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-zuul&lt;/artifactId&gt;&lt;/dependency&gt; 启动类加注解 @EnableZuulProxy 编写相关配置 application.yml 1234567891011121314151617server: port: 5555 #Setting logging levelslogging: level: com.netflix: WARN org.springframework.web: WARN com.thoughtmechanix: DEBUGeureka: instance: preferIpAddress: true client: registerWithEureka: true # 服务网关也要注册到服务发现(erueka)中去 fetchRegistry: true serviceUrl: defaultZone: http://localhost:8761/eureka/ bootstrap.yml 123456789spring: application: name: zuulservice profiles: active: default cloud: config: enabled: true licensing-service 在调用organization-service的地方做出一些修改 原先的调用代码： 123456789public Organization getOrganization(String organizationId)&#123; ResponseEntity&lt;Organization&gt; restExchange = restTemplate.exchange( &quot;http://organizationservice/v1/organizations/&#123;organizationId&#125;&quot;, HttpMethod.GET, null, Organization.class, organizationId); return restExchange.getBody();&#125; 修改成： 123456789101112public Organization getOrganization(String organizationId)&#123; ResponseEntity&lt;Organization&gt; restExchange = restTemplate.exchange( // 这个URL要根据具体情况来改变 // 如是否有api（即zuul.prefix） // 如organization是否有后缀（即手动配置路由）） // 但是/v1及以后的是固定的（即真正的organization服务地址） &quot;http://zuulservice/api/organization/v1/organizations/&#123;organizationId&#125;&quot;, HttpMethod.GET, null, Organization.class, organizationId); return restExchange.getBody();&#125; 为了让Hystrix能够获取到线程中的关联ID，需要取消上节课中【支持Ribbon的RestTemplate的拦截器】（即UserContextInterceptor）前取消@Component注解；然后在启动类中主动添加@Bean与@LoadBalanced。 看不懂也没关系，代码如下： 12345678910111213141516171819202122232425@SpringBootApplication@EnableEurekaClient@EnableCircuitBreakerpublic class Application &#123; @LoadBalanced @Bean public RestTemplate getRestTemplate()&#123; RestTemplate template = new RestTemplate(); List interceptors = template.getInterceptors(); if (interceptors==null)&#123; template.setInterceptors(Collections.singletonList(new UserContextInterceptor())); &#125; else&#123; interceptors.add(new UserContextInterceptor()); template.setInterceptors(interceptors); &#125; return template; &#125; public static void main(String[] args) &#123; SpringApplication.run(Application.class, args); &#125;&#125;","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://wkxuan.cn/tags/SpringBoot/"}]},{"title":"14-客户端弹性、断路器模式","slug":"SpringBoot/14-客户端弹性、断路器模式","date":"2022-04-17T13:55:24.000Z","updated":"2022-10-18T05:36:59.057Z","comments":true,"path":"/9191e0b5.html","link":"","permalink":"https://wkxuan.cn/9191e0b5.html","excerpt":"","text":"客户端弹性、断路器模式客户端弹性客户端弹性模式 远程服务发生错误或表现不佳导致的问题：客户端长时间等待调用返回 客户端弹性模式要解决的重点：让客户端免于崩溃。 目标：让客户端快速失败，而不消耗数据库连接或线程池之类的宝贵资源，防止远程服务的问题向客户端上游传播。 4种客户端弹性模式 客户端负载均衡（client load banlance）模式 Ribbon提供的负载均衡器，帮助发现问题，并删除实例 断路器模式(Circuit Breaker Patten) 监视调用失败的次数，快速失败 后备（fallback）模式 远程服务调用失败，执行替代代码路径 舱壁隔离模式(Bulkhead Isolation Pattern) 线程池充当服务的舱壁 当船的某些船舱进水、不影响其他船舱 HystrixHystrix是一个延迟和容错库，旨在隔离对远程系统，服务和第三方库的访问点，停止级联故障，并在不可避免发生故障的复杂分布式系统中实现弹性。 使用Hystrix（客户端） 客户端添加依赖 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-hystrix&lt;/artifactId&gt;&lt;/dependency&gt; 启动类加注解：@EnableCircuitBreaker 用断路器包装远程资源调用，方法加注解：@HystrixCommand 加了此注解之后，该方法的调用会由另外一个单独的线程来处理 Tomcat正常的处理逻辑： 123request -&gt; filter chain -&gt; controller -&gt; service -&gt; dao ...然后从右往左看：response &lt;- filter &lt;- controller &lt;- service &lt;- dao ...以上所有的处理都是由一个线程完成的 而加了注解的方法（一般在service中），会单独分配线程。 默认1秒超时，超时会抛异常 com.netflix.hystrix.exception.HystrixRuntimeException（返回的状态码为500） 自定义参数 后备模式1234567@HystrixCommand( fallbackMethod = &quot;buildFallbackLicenseList&quot;, // 备用方法。值为方法名，该方法的签名必须与本方法一致且位于同类下 commandProperties = &#123; // 设置超时时间，也可以在配置文件application.yml中配置 @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value = &quot;12000&quot;), &#125;) 客户端负载均衡模式启动类添加bean： 1234@Beanpublic IRule ribbonRule() &#123; return new RandomRule(); // 随机策略，现有最好的策略&#125; 舱壁隔离模式(Bulkhead Isolation Pattern)将同类的方法调用放在同一个线程池中。 123456789@HystrixCommand( // 线程池 // 缺省的线程池有10个所有请求共用的线程（所以需要自定义线程池key来隔离其他线程池） threadPoolKey = &quot;licenseByOrgThreadPool&quot;, // 线程池key threadPoolProperties = &#123; // 线程池的一些配置 @HystrixProperty(name = &quot;coreSize&quot;, value = &quot;30&quot;), // 线程池大小 @HystrixProperty(name = &quot;maxQueueSize&quot;, value = &quot;10&quot;) // 请求队列的最大值 &#125;) 传递关联ID（correlation ID) 关联ID是唯一标识符，可用于在单个事务中跨多个服务调用进行跟踪 通过HTTP Header传递 通过实现过滤器拦截rest服务请求获取上游来的header属性 调用rest服务前使用ClientHttpRequestInterceptor或RequestInterceptor添加header属性，使传递到下游 传递的本质就是用户在发送请求时必须携带一个ID，发送给客户端时，客户端通过在一个自定义的filter中保存起来 然后再定义一个request intercepter，让客户端向外（服务端）发送请求时自动携带这个ID，这样服务端就能收到了 Filter定义123456789101112131415161718192021222324252627@Componentpublic class UserContextFilter implements Filter &#123; private static final Logger logger = LoggerFactory.getLogger(UserContextFilter.class); @Override public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123; HttpServletRequest httpServletRequest = (HttpServletRequest) servletRequest; UserContextHolder.getContext().setCorrelationId( httpServletRequest.getHeader(UserContext.CORRELATION_ID) ); UserContextHolder.getContext().setUserId(httpServletRequest.getHeader(UserContext.USER_ID)); UserContextHolder.getContext().setAuthToken(httpServletRequest.getHeader(UserContext.AUTH_TOKEN)); UserContextHolder.getContext().setOrgId(httpServletRequest.getHeader(UserContext.ORG_ID)); logger.debug(&quot;UserContextFilter Correlation id: &#123;&#125;&quot;, UserContextHolder.getContext().getCorrelationId()); filterChain.doFilter(httpServletRequest, servletResponse); &#125; @Override public void init(FilterConfig filterConfig) throws ServletException &#123;&#125; @Override public void destroy() &#123;&#125;&#125; Intercepter定义（两种，二选一）支持Ribbon的RestTemplate123456789101112131415161718192021import org.springframework.http.client.ClientHttpRequestExecution;import org.springframework.http.client.ClientHttpRequestInterceptor;import org.springframework.http.client.ClientHttpResponse;@Componentpublic class UserContextInterceptor implements ClientHttpRequestInterceptor &#123; private static final Logger logger = LoggerFactory.getLogger(UserContextInterceptor.class); @Override public ClientHttpResponse intercept( HttpRequest request, byte[] body, ClientHttpRequestExecution execution) throws IOException &#123; HttpHeaders headers = request.getHeaders(); headers.add(UserContext.CORRELATION_ID, UserContextHolder.getContext().getCorrelationId()); headers.add(UserContext.AUTH_TOKEN, UserContextHolder.getContext().getAuthToken()); logger.debug(&quot;=================UserContextInterceptor class Correlation id: &#123;&#125;&quot; ,UserContextHolder.getContext().getCorrelationId()); return execution.execute(request, body); &#125;&#125; Feign1234567891011121314151617181920212223242526272829import feign.Request;import feign.RequestInterceptor;import feign.RequestTemplate;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;@Componentpublic class MyRequestInterceptor implements RequestInterceptor &#123; private static final Logger logger = LoggerFactory.getLogger(MyRequestInterceptor.class); @Autowired private UserContext userContext; @Override public void apply(RequestTemplate requestTemplate) &#123; Request request = requestTemplate.request(); String url = request.url(); requestTemplate.header(UserContext.CORRELATION_ID, userContext.getCorrelationId()); requestTemplate.header(UserContext.AUTH_TOKEN, userContext.getAuthToken()); logger.debug(&quot;==========MyRequestInterceptor class Correlation id: &#123;&#125;&quot; , UserContextHolder.getContext().getCorrelationId()); &#125;&#125; 问题：全局关联的ID会被其他线程复写*解决：ThreadLocal ThreadLocal是JDK包提供的，它提供线程本地变量，如果创建一个ThreadLocal变量，那么访问这个变量的每个线程都会有这个变量的一个副本，在实际多线程操作的时候，操作的是自己本地内存中的变量，从而规避了线程安全问题 代码改写将保存关联ID的filter用ThreadLocal保存即可 1234567891011121314151617181920212223public class UserContextHolder &#123; private static final ThreadLocal&lt;UserContext&gt; userContext = new ThreadLocal&lt;UserContext&gt;(); public static final UserContext getContext()&#123; UserContext context = userContext.get(); if (context == null) &#123; context = createEmptyContext(); userContext.set(context); &#125; return userContext.get(); &#125; public static final void setContext(UserContext context) &#123; Assert.notNull(context, &quot;Only non-null UserContext instances are permitted&quot;); userContext.set(context); &#125; public static final UserContext createEmptyContext()&#123; return new UserContext(); &#125;&#125; ThreadLocal的新问题*一个线程中存储的数据无法被其他线程读取。 即：原本filter-&gt;controller-&gt;...的线程与加了@HystrixCommand注解的方法所在的新线程之间无法通信，也就无法传递关联ID到其他的服务 解决：section14/licensing-service/src/main/java/.../hystrix 包下面的三个类，比较复杂，有兴趣的可自行查看。 本质是解决了一个ThreadLocal传递到另外一个ThreadLocal 断路器模式*断路器模式**(Circuit Breaker Patten)** 1234567891011121314@HystrixCommand( commandProperties = &#123; // 最小的失败请求数目，数目越多情况越严重 @HystrixProperty(name = &quot;circuitBreaker.requestVolumeThreshold&quot;, value = &quot;3&quot;), // 失败的比例（这里是10%，对应下图的第二个菱形） @HystrixProperty(name = &quot;circuitBreaker.errorThresholdPercentage&quot;, value = &quot;10&quot;), // 默认是5秒（第二行的窗口期） @HystrixProperty(name = &quot;circuitBreaker.sleepWindowInMilliseconds&quot;, value = &quot;7000&quot;), // 默认是10秒（10 000毫秒）时间窗口，这里设置为30秒 @HystrixProperty(name = &quot;metrics.rollingStats.timeInMilliseconds&quot;, value = &quot;30000&quot;), // 窗口期内安排多少个桶来收集数据 @HystrixProperty(name = &quot;metrics.rollingStats.numBuckets&quot;, value = &quot;5&quot;) &#125;) @HystrixCommand注解配置 属性名称 默认值 说明 fallbackMethod None 备用方法 threadPoolKey None 线程池 threadPoolProperties None 线程池key coreSize 10 线程池相关属性 maxQueueSize -1 线程池维持队列 circuitBreaker.requestVolumeThreshold 20 circuitBreaker.errorThresholdPercentage 50 circuitBreaker.sleepWindowInMilliseconds 5000 metricsRollingStats.timeInMilliseconds 10000 metricsRollingStats.numBuckets 10","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://wkxuan.cn/tags/SpringBoot/"}]},{"title":"13-服务发现、负载均衡","slug":"SpringBoot/13-服务发现、负载均衡","date":"2022-04-17T10:26:57.000Z","updated":"2022-10-18T05:36:59.055Z","comments":true,"path":"/71fcd19e.html","link":"","permalink":"https://wkxuan.cn/71fcd19e.html","excerpt":"","text":"服务发现、负载均衡服务发现Service Discovery，本质也是一个服务（与配置服务类似） 好处 快速水平伸缩，而不是垂直伸缩。不影响客户端 水平伸缩：服务实例数动态增加或减少 提高应用程序的弹性 一个服务（发生故障）挂了，服务中心会将其删除，同时也会通知客户端 Eureka服务发现引擎 服务端向服务中心注册自己的信息：服务名、IP地址、端口号； 客户端向服务中心提供需要访问的服务名，服务中心向其返回实例有哪些、端口以及IP Ribbon，客户端负载均衡 主要提供客户侧的软件负载均衡算法 服务端启动后会向服务中心注册 客户端访问服务时，Ribbon按照一定策略返回服务的实例 轮询策略（按照顺序） 随机策略 访问时获取的服务信息也有缓存 服务调用关系 注册服务eurekasvr 添加依赖 1234567&lt;!-- 服务端 --&gt;&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-eureka-server&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; 启动类加上@EnableEurekaServer注解 1234567@SpringBootApplication@EnableEurekaServerpublic class EurekaServerApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(EurekaServerApplication.class, args); &#125;&#125; application.yml配置文件 1234567891011server: port: 8761 eureka: client: registerWithEureka: false # 当前服务是否要注册到服务中心去 fetchRegistry: false # 是否要（定时？）更新服务信息 server: waitTimeInMsWhenSyncEmpty: 5 # 服务注册后等待多久才对外提供服务信息（单位：毫秒） serviceUrl: # 当前服务的url defaultZone: http://localhost:8761 confsvrapplication.yml中添加： 1spring.cloud.config.discovery.enabled=true organizationservice 添加依赖 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;&lt;/dependency&gt; 启动类添加@EnableEurekaClient注解 意味着当前服务启动时，需要与EurekaSever进行交互，将当前服务的信息登记到EurekaServer中去 application.yml中配置需要登记的信息 12345678eureka: instance: preferIpAddress: true # 记住ip地址而不是机器的机器名 client: registerWithEureka: true # 服务信息需要注册到服务中心去 fetchRegistry: true # 定期刷新 serviceUrl: # 服务中心的Url defaultZone: http://localhost:8761/eureka/ 查找和调用服务（客户端如何调用服务端的接口） 第三方库：Ribbon，本地缓存，本地负载均衡 三种方式 Spring DiscoveryClient（不建议） 使用支持Ribbon的RestTemplate 使用Netflix Feign licensingservice 添加依赖 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;&lt;/dependency&gt; 配置文件 12345678eureka: instance: preferIpAddress: true client: registerWithEureka: true fetchRegistry: true serviceUrl: defaultZone: http://localhost:8761/eureka/ 注：以下代码都是在licensingservice中进行编写Spring DiscoveryClient（比较原始，不结合Ribbon） 启动类添加注解 @EnableDiscoveryClient 不指定实现工具 或@EnableEurekaClient 指定实现工具为Eureka 12345678@SpringBootApplication@EnableDiscoveryClient// @EnableEurekaClient // 二选一public class Application &#123; public static void main(String[] args) &#123; SpringApplication.run(Application.class, args); &#125;&#125; 创建类OrganizationDiscoveryClient可以在client包下） 12345678910111213141516171819202122232425262728293031323334import org.springframework.cloud.client.discovery.DiscoveryClient;import org.springframework.cloud.client.ServiceInstance;import org.springframework.web.client.RestTemplate; 、// springweb里的，和服务发现没关系@Componentpublic class OrganizationDiscoveryClient &#123; // 注入对象 @Autowired private DiscoveryClient discoveryClient; // 获取实例 public Organization getOrganization(String organizationId) &#123; // RestTemplate restTemplate = new RestTemplate(); // 指定服务名，获取实例（可能有多个） List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(&quot;organizationservice&quot;); if (instances.size() == 0) return null; // 组装出实例的uri String serviceUri = String.format(&quot;%s/v1/organizations/%s&quot;, instances.get(0).getUri().toString(), organizationId); System.out.println(&quot;!!!! SERVICE URI: &quot; + serviceUri); // 给organization发送一个get请求（url见上一行代码） ResponseEntity&lt;Organization&gt; restExchange = restTemplate.exchange( serviceUri, HttpMethod.GET, null, Organization.class, organizationId); return restExchange.getBody(); &#125;&#125; 支持Ribbon的RestTemplate 启动类无需添加注解，但需要注入bean 1234567891011121314151617181920import org.springframework.cloud.client.loadbalancer.LoadBalanced;@SpringBootApplicationpublic class Application &#123; @LoadBalanced @Bean public RestTemplate getRestTemplate() &#123; return new RestTemplate(); &#125; public static void main(String[] args) &#123; SpringApplication.run(Application.class, args); &#125; @Bean public IRule ribbonRule() &#123; return new RandomRule(); &#125;&#125; 创建client类 可以发现这里没有获取实例（也就是没有IP地址和端口号），而是直接使用了服务名，原理就是在启动类中对restTemplate进行了拦截（基于Ribbon的注解 @LoadBalanced 实现的效果） 123456789101112131415@Componentpublic class OrganizationRestTemplateClient &#123; @Autowired RestTemplate restTemplate; public Organization getOrganization(String organizationId)&#123; ResponseEntity&lt;Organization&gt; restExchange = restTemplate.exchange( &quot;http://organizationservice/v1/organizations/&#123;organizationId&#125;&quot;, HttpMethod.GET, null, Organization.class, organizationId); return restExchange.getBody(); &#125;&#125; Netflix Feign（最简便） 添加依赖 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-feign&lt;/artifactId&gt;&lt;/dependency&gt; 启动类添加注解 1234567891011import org.springframework.cloud.netflix.feign.EnableFeignClients;@SpringBootApplication@EnableFeignClientspublic class Application &#123; public static void main(String[] args) &#123; SpringApplication.run(Application.class, args); &#125;&#125; 创建client接口并添加注解@FeignClient(&quot;organizationservice&quot;) 12345678@FeignClient(&quot;organizationservice&quot;)public interface OrganizationFeignClient &#123; @RequestMapping( method= RequestMethod.GET, value=&quot;/v1/organizations/&#123;organizationId&#125;&quot;, consumes=&quot;application/json&quot;) // 需要返回的数据格式 Organization getOrganization(@PathVariable(&quot;organizationId&quot;) String organizationId);&#125; 使用时直接将接口的对象注入@Autowired 部署脚本 docker-compose的作用是启动所有的服务，所以在此之前要将所有的服务进行打包镜像 &#x3D;&gt; 在每个子项目的根目录下运行mvn clean package docker:build 位置：总项目根目录/docker/default/docker-compose.yml 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748version: &#x27;2&#x27;services: eurekaserver: image: johncarnell/tmx-eurekasvr:section13 ports: - &quot;8761:8761&quot; configserver: image: johncarnell/tmx-confsvr:section13 ports: - &quot;8888:8888&quot; environment: EUREKASERVER_URI: &quot;http://eurekaserver:8761/eureka/&quot; EUREKASERVER_PORT: &quot;8761&quot; ENCRYPT_KEY: &quot;IMSYMMETRIC&quot; database: image: postgres:9.5 ports: - &quot;5432:5432&quot; environment: - POSTGRES_USER=postgres - POSTGRES_PASSWORD=p0stgr@s - POSTGRES_DB=eagle_eye_local licensingservice: image: johncarnell/tmx-licensing-service:section13 ports: - &quot;8080:8080&quot; environment: PROFILE: &quot;default&quot; SERVER_PORT: &quot;8080&quot; CONFIGSERVER_URI: &quot;http://configserver:8888&quot; EUREKASERVER_URI: &quot;http://eurekaserver:8761/eureka/&quot; EUREKASERVER_PORT: &quot;8761&quot; # 这三个端口号都用于启动前确认 CONFIGSERVER_PORT: &quot;8888&quot; DATABASESERVER_PORT: &quot;5432&quot; ENCRYPT_KEY: &quot;IMSYMMETRIC&quot; organizationservice: image: johncarnell/tmx-organization-service:section13# ports:# - &quot;8085:8085&quot; environment: PROFILE: &quot;default&quot; SERVER_PORT: &quot;8085&quot; CONFIGSERVER_URI: &quot;http://configserver:8888&quot; EUREKASERVER_URI: &quot;http://eurekaserver:8761/eureka/&quot; EUREKASERVER_PORT: &quot;8761&quot; CONFIGSERVER_PORT: &quot;8888&quot; DATABASESERVER_PORT: &quot;5432&quot; ENCRYPT_KEY: &quot;IMSYMMETRIC&quot; Eureka使用 GET请求http://localhost:8761/eureka/apps/服务名 未在HEADERS中指定返回格式，则默认是HTML格式 若指定格式为application/json，则为JSON格式 也可以直接在浏览器中打开http://localhost:8761 负载均衡 在通过docker-compose启动实例时，改成如下命令： 1docker-compose up --scale organizationservice=3 # 表示启动三个organizationservice实例 策略自定义：对RestTemplate和Feign都有用 在organizationservice的启动类中，添加代码： 1234@Beanpublic IRule ribbonRule() &#123; return new RandomRule(); // 随机策略，现有最好的策略&#125; 策略参考 RoundRobinRule 轮询 RandomRule 随机","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://wkxuan.cn/tags/SpringBoot/"},{"name":"负载均衡","slug":"负载均衡","permalink":"https://wkxuan.cn/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"}]},{"title":"12-配置服务加密所需要的镜像生成步骤","slug":"SpringBoot/12-配置服务加密所需要的镜像生成步骤","date":"2022-04-16T08:20:16.000Z","updated":"2022-10-20T03:05:37.122Z","comments":true,"path":"/5.8698e+69.html","link":"","permalink":"https://wkxuan.cn/5.8698e+69.html","excerpt":"","text":"拉取openjdk:8-jdk-alpine镜像生成openjdk:netcat文件位置：section11/docker/base/Dockerfile 1234567FROM openjdk:8-jdk-alpineRUN apk update &amp;&amp; apk upgrade &amp;&amp; apk add netcat-openbsd# 请在当前目录下运行以下命令生成基础镜像# docker build -t openjdk:netcat .# docker images# docker run --rm openjdk:netcat nc -h 生成openjdk:sec文件位置：section11/docker/base/Dockerfile3，这里是因为文件与步骤二的文件同目录，所以换了个名字 所需文件： jce_policy-8 123456789FROM openjdk:netcatCOPY jce_policy-8.zip /tmp/RUN cd /tmp/ &amp;&amp; \\ unzip jce_policy-8.zip &amp;&amp; \\ rm jce_policy-8.zip &amp;&amp; \\ yes |cp -v /tmp/UnlimitedJCEPolicyJDK8/*.jar /usr/lib/jvm/java-1.8-openjdk/jre/lib/security/# 请在当前目录下运行以下命令生成基础镜像# docker build -f Dockerfile3 -t openjdk:sec . 生成配置服务镜像文件位置：section12/src/main/docker/Dockerfile 123456FROM openjdk:secRUN mkdir -p /usr/local/configserverADD @project.build.finalName@.jar /usr/local/configserver/ADD run.sh run.shRUN chmod +x run.shCMD ./run.sh","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://wkxuan.cn/tags/SpringBoot/"}]},{"title":"12-配置服务、服务编排","slug":"SpringBoot/12-配置服务、服务编排","date":"2022-04-16T08:19:16.000Z","updated":"2022-10-27T08:58:50.798Z","comments":true,"path":"/45be6616.html","link":"","permalink":"https://wkxuan.cn/45be6616.html","excerpt":"","text":"配置服务、服务编排配置服务 服务配置信息与源码分离 配置作为单独的服务提供 配置管理服务：专门为其他所有服务提供配置文件 Spring Cloud Config Server 配置服务使用的存储库类型 共享文件系统 源代码控制下的文件（Git仓库） 好处：方便配置数据版本管理 关系数据库 nosql数据库 Spring Cloud Config 提供的：文件系统、Git、Eureka、Consul 创建Spring Cloud配置服务器 基于Spring Boot pom.xml文件中的依赖 spring-cloud-config-server spring-cloud-starter-config 指定父模块 导入dependencyManagement，依赖的构件和版本号 application.yml：服务端口号、后端数据来源 git、native bootstrap.yml，指定服务名configserver @EnableConfigServer 数据来源本地文件系统（ native） 如何开发配置服务配置服务的pom：1234567891011121314151617181920212223&lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;Camden.SR5&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/dependencyManagement&gt;&lt;dependencies&gt; &lt;!-- server即配置服务提供方 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt; 源码只需要一个启动类并添加注解@EnableConfigServer： 1234567@SpringBootApplication@EnableConfigServerpublic class ConfigServerApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(ConfigServerApplication.class, args); &#125;&#125; 配置文件（所有文件都在resources目录下） bootstrap.yml（优先于application.yml），提供微服务的name（类似于id） 123spring: application: name: configserver application.yml 共享文件系统 1234567891011server: port: 8888spring: profiles: active: native cloud: config: server: encrypt.enabled: true native: searchLocations: classpath:config/licensingservice # 微服务配置文件路径 远程github 12345678910server: port: 8888spring: cloud: config: server: encrypt.enabled: true git: uri: https://github.com/tzs919/config12.git searchPaths: licensingservice # 到文件夹 如何从配置服务中读取数据查看配置服务的数据编写完配置服务并启动后，默认提供若干个REST接口。 用户可以通过对应的一些接口访问，如 localhost:8888/服务名/default 其中default表示配置文件不带后缀（即服务名.yml） localhost:8888/服务名/prod 访问的配置文件则为：服务名-prod.yml，然后从中取出一些需要的数据，如果该配置文件中没有需要的数据，则会再次从服务名.yml中找 业务服务使用配置数据 添加依赖 123456789&lt;!-- client即配置服务使用方 --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-config-client&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;&lt;/dependency&gt; 添加配置文件 bootstrap.yml（resources目录下），application.yml为空 12345678spring: application: name: licensingservice # 用于拼接url profiles: active: default # 用于拼接url cloud: config: uri: http://localhost:8888 # 最终的url： http://localhost:8888/licensingservice/default 代码中读取配置文件的变量在Java代码中读取： 12@Value(&quot;$&#123;mydata.data&#125;&quot;)private String data; 注解所在的包：org.springframework.beans.factory.annotation.Value 关于client微服务的打包镜像以及启动其中的run.sh主要分为以下三个部分（为了方便解析我将其拆开来了，实际上是在同一个文件中）： 1while ! `nc -z configserver $CONFIGSERVER_PORT `; do sleep 3; done nc命令是上一节课section11的课后作业所打包的镜像，命令的作用就是返回configserver在$CONFIGSERVER_PORT端口的运行状态；这条语句的作用是：若配置服务没有启动，则一直等待。 在docker-compose.xml中对非配置服务添加depends_on属性可以达到类似的效果，但根本区别在于无法保证配置服务启动成功，只能保证晚于配置服务启动，示例如：licensingservice.depends_on: configserver 1while ! `nc -z database $DATABASESERVER_PORT`; do sleep 3; done 若数据库服务没有启动，则一直等待。 1java -Dspring.cloud.config.uri=$CONFIGSERVER_URI -Dspring.profiles.active=$PROFILE -jar /usr/local/licensingservice/@project.build.finalName@.jar java -jar XXX.jar已经很熟悉了，就是运行jar包； -D的作用是替换配置文件中的对应数据，第一个参数替换的就是spring.cloud.config.uri=$CONFIGSERVER_URI -Dspring.profiles.active=$PROFILE的作用也同上（即：指定具体的配置文件是哪个） 那么，综上的一些解析，run.sh中的这些变量从哪里来呢？&gt;&gt; docker-compose.yml中，见[服务编排工具 docker-compose](# 服务编排工具 docker-compose) 服务编排工具 docker-compose命令123456789101112docker-compsoe up # 所有服务启动dokcer-compose --h # 查看帮助docker-compose up -ddocker-compose psdocker-compose stopdocker-compose stop nginx # 终止指定的服务# 查看容器的输出日志docker-compose logs -f [services...] # 构建镜像时不使用缓存（能避免很多因为缓存造成的问题）docker-compose build --no-cache --force-rm# 移除指定的容器docker-compose rm nginx 文件docker-compose.yml 文件位于section12\\docker\\common\\docker-compose.yml 这会导致最终效果如下图所示 1234567891011121314151617181920212223242526version: &#x27;2&#x27; # 版本 services: # 服务 configserver: # 配置服务 image: johncarnell/tmx-confsvr:section12 # 服务对应的镜像 ports: - &quot;8888:8888&quot; # 端口映射 environment: # 环境变量（服务打包镜像时用的，见对应的run.sh） ENCRYPT_KEY: &quot;IMSYMMETRIC&quot; # 用于密码加密 database: image: postgres:9.5 ports: - &quot;5432:5432&quot; environment: POSTGRES_USER: &quot;postgres&quot; POSTGRES_PASSWORD: &quot;p0stgr@s&quot; POSTGRES_DB: &quot;eagle_eye_local&quot; # 初始用户 licensingservice: # 业务服务 image: johncarnell/tmx-licensing-service:section12 ports: - &quot;8080:8080&quot; environment: PROFILE: &quot;default&quot; # 业务服务打包镜像所需要的所有变量 CONFIGSERVER_URI: &quot;http://configserver:8888&quot; CONFIGSERVER_PORT: &quot;8888&quot; DATABASESERVER_PORT: &quot;5432&quot; ENCRYPT_KEY: &quot;IMSYMMETRIC&quot; 配置服务的密码加密配置 在服务器上：下载并安装加密所需的Oracle JCE jar（jce_policy-8） 将local_policy.jar、US_export_policy.jar复制到$JAVA_HOME/jre/lib/security目录 JCE: Unlimited Strength Java Cryptography Extension 在docker-compose中的services.configserver.environment配置共享密钥：设置环境变量ENCRYPT_KEY（字符串） 当加密和解密用的KEY是同一个，则成为对称加密，否则是非对称加密 对称加密（共享密码）、非对称加密（公钥&#x2F;私钥） 使用 原理 如果发现有ENCRYPT_KEY，则自动添加两个端点：/encrypt和/decrypt 加密 对http://localhost:8888/encrypt发送POST请求，并将密码放进body（以raw的形式） 解密 对http://localhost:8888/decrypt发送POST请求，并将加密后的密码放进body（以raw的形式） 加密后的密码添加前缀放入配置文件中 密码的前面加上{cipher}前缀，如： 1spring.datasource.password: &quot;&#123;cipher&#125;4788dfe1ccbe6485934aec2ffeddb06163ea3d616df5fd75be96aadd4df1da91&quot; 取消自动解密 配置服务的application.yml中 1234567spring: profiles: active: native cloud: config: server: encrypt.enabled: true # 这个为false时取消自动解密 业务服务的解密工作 添加依赖： 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.security&lt;/groupId&gt; &lt;artifactId&gt;spring-security-rsa&lt;/artifactId&gt;&lt;/dependency&gt; 添加环境变量 在docker-compose中的services.licensingservice.environment设置环境变量ENCRYPT_KEY，需要与加密的相同 对业务服务的配置刷新 添加Config，注意@RefreshScope注解 1234567891011@Component@RefreshScopepublic class ServiceConfig&#123; // @Value(&quot;$&#123;example.property&#125;&quot;) // private String exampleProperty; // public String getExampleProperty()&#123; // return exampleProperty; // &#125;&#125; 对URL：http://ip:业务服务端口/refresh 发送POST请求","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://wkxuan.cn/tags/SpringBoot/"}]},{"title":"11-微服务、SpringBoot、服务镜像生成","slug":"SpringBoot/11-微服务、SpringBoot、服务镜像生成","date":"2022-04-15T15:08:53.000Z","updated":"2022-10-20T03:05:16.220Z","comments":true,"path":"/Infinity.html","link":"","permalink":"https://wkxuan.cn/Infinity.html","excerpt":"","text":"微服务背景知识 概念： Rest原则 Representational State Transfer，表现层状态转移 资源，网络上的实体，标识：URI URI：在REST中，更强调的是数据与资源 表现层（Representation）：json、xml、html、pdf、excel… 状态转移（State Transfer）：服务端——客户端 HTTP协议的四个操作方式的动词：GET、POST、PUT、DELETE 对应C（POST）R（GET）U（PUT）D（DELETE） 如果一个架构符合REST原则，就称之为RESTful架构 客户端与服务的交互Client发送request到Server，Server返回response给Client 请求报文 请求头header 由key&#x2F;value对组成，key和value之间通过冒号分割 主要包含如下： User-Agent：生成请求的浏览器类型 Accept：客户端可识别的响应内容类型列表；星号* 用于按范围将类型分组。*&#x2F;*表示可接受全部类型，type&#x2F;*表示可接受 type 类型的所有子类型。 Accept-Language: 客户端可接受的自然语言 Accept-Encoding: 客户端可接受的编码压缩格式 Accept-Charset： 可接受的字符集 Host: 请求的主机名，允许多个域名绑定同一 IP 地址 connection：连接方式（close 或 keepalive） Cookie: 存储在客户端的扩展字段 Content-Type:标识请求内容的类型 Content-Length:标识请求内容的长度 请求体body 请求体主要用于 POST 请求，与 POST 请求方法配套的请求头一般有 Content-Type和 Content-Length 响应报文 状态行：由 HTTP 协议版本、状态码、状态码描述三部分构成，它们之间由空格隔开。 状态码：由 3 位数字组成，第一位标识响应的类型，常用的5大类状态码如下： 1xx：表示服务器已接收了客户端的请求，客户端可以继续发送请求 2xx：表示服务器已成功接收到请求并进行处理 3xx：表示服务器要求客户端重定向 4xx：表示客户端的请求有非法内容 5xx：标识服务器未能正常处理客户端的请求而出现意外错误 响应头 Location：服务器返回给客户端，用于重定向到新的位置 Server： 包含服务器用来处理请求的软件信息及版本信息Vary：标识不可缓存的请求头列表 Connection: 连接方式， close 是告诉服务端，断开连接，不用等待后续的请求了。 keep-alive 则是告诉服务端，在完成本次请求的响应后，保持连接 Keep-Alive: 300，期望服务端保持连接多长时间（秒） 响应内容：服务端返回给请求端的文本信息。 客户端表述的两种方式 内容协商（Content negotiation）不重要 ContentNegotiatingViewResolver是要创建的bean，基于内容协商生成表述，判断的依据有请求头的Accept，URL请求路径加扩展名（优先）。 然后会转向具体的视图解析器生成不同的视图表述 ContentNegotiationManager（配置的作用） 通过setter注入到ContentNegotiatingViewResolver中 创建这个Bean的方式是继承自WebMvcConfigerAdapter（基于spring mvc） 覆盖方法configureContentNegotiation，配置缺省内容类型等。 消息转换器（Message conversion） 使用注解**@ResponseBody（放在函数前）或@RestController**（放在类前，对所有函数生效），作用：指定使用消息转换器（返回值转成json格式） java对象转换成json串，借助第三方工具： 12345678910&lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-core&lt;/artifactId&gt; &lt;version&gt;2.4.3&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt; &lt;version&gt;2.4.3&lt;/version&gt;&lt;/dependency&gt; 没有model和视图，控制器产生数据，然后消息转换器转换数据之后的资源表述。 spring自动注册一些消息转换器（HttpMethodConverter），不过类路径下要有对应转换能力的库，如：Jackson Json processor、JAXB库 请求传入，@RequestBody以及HttpMethodConverter @RequestBody可以将body中的json串转成Java对象 @RequestMapping(method&#x3D;””, cosumes&#x3D;”application&#x2F;json”)表示只处理请求体为application&#x2F;json类型的请求 ExceptionHandler @ExceptionHandler与@ResponseStatus 表示当业务处理过程中出现异常时，不返回500状态码，而是自定义的返回值，例子如下：定义在Controller中 1234567@ExceptionHandler(SpittleNotFoundException.class)@ResponseStatus(HttpStatus.NOT_FOUND)public @ResponseBody Error spittleNotFound(SpittleNotFoundException e) &#123; long spittleId = e.getSpittleId(); return new Error(4, &quot;Spittle [&quot; + spittleId + &quot;] not found&quot;);&#125; Rest客户端 new RestTemplats() getForObject(),指定返回类型，自动转换 getForEntity()，返回ResponseEntity,有头部信息，getBody()可以转换 put()，传递的对象存在转换问题，String转成test&#x2F;plain，MultiValueMap转成x-www-form-urlncoded，对象可能转成json，要看classpass类路径下有无库。 delete（）,删除一个资源，一般提供资源路径即可 postForObject()&#x2F;postForEntity()&#x2F;postForLocation 因为需要返回值 postForLocation，只需要路径，不需要body，路径信息来源头部Location信息 exchange(),可指定请求头信息 MultiValueMap headers; HttpEntity&lt;Object&gt; requestEntity=new HttpEntity&lt;Object&gt;(headers); ResponseEntity&lt;Spitter&gt; response = rest.exchange() SpringBoot作用 简化Spring Web开发 Spring Boot Starter 自动管理依赖、版本号（通过parent指定） 自动配置 * 自动创建需要的Bean（有一些列自动判断的方式，如根据类路径加载的类） 自动读取配置数据（DataSource） 如：DataSource、JdbcTemplate、视图解析器等 Actuator（endpoint端点，即通过自动实现的一些URL可查看微服务信息） &#x2F;autoconfig 使用了哪些自动配置（positiveMatches） &#x2F;beans，包含bean依赖关系 &#x2F;health，健康检查（是否挂了） [微服务](# 微服务)中有具体解析 工具 mvn spring-boot:run等命令插件，可以帮助启动微服务 12345678&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; 逻辑视图渲染插件thymeleaf 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;&lt;/dependency&gt; 数据库配置 12345678910&lt;!-- jdbc驱动 --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!-- 内嵌数据库 --&gt;&lt;dependency&gt; &lt;groupId&gt;com.h2database&lt;/groupId&gt; &lt;artifactId&gt;h2&lt;/artifactId&gt;&lt;/dependency&gt; 配置后会自动到resources下寻找schema.sql文件（无需配置），然后运行该sql 微服务传统的单体应用程序 数据库的表对所有模块可见 一个人的修改整个应用都要重新构建、测试、部署 整体复制分布式部署，不能拆分按需部署 微服务架构模式的特征 应用程序分解为具有明确定义了职责范围的细粒度组件 完全独立部署，独立测试，并可复用 使用轻量级通信协议，HTTP和JSON，松耦合 服务实现可使用多种编程语言和技术 将大型团队划分成多个小型开发团队，每个团队只负责他们各自的服务 Spring Boot 和 Spring Cloud 简单地来说，SpringBoot用来开发单个微服务，实现REST接口。 SpringCloud来解决微服务之间的协作和调用、配置等 Spring Boot提供了基于java的、面向REST的微服务框架 Spring Cloud使实施和部署微服务到私有云或公有云变得更加简单 微服务开发要考虑的问题（Spring Cloud可以解决的问题） 微服务划分，服务粒度、通信协议、接口设计、配置管理、使用事件解耦微服务 服务注册、发现和路由 弹性，负载均衡，断路器模式（熔断），容错 可伸缩 日志记录和跟踪 安全 构建和部署，基础设施即代码 Spring Cloud的工具集成 Spring Boot Spring Cloud Config Spring Cloud服务发现与Consul、Eureka集成 与Netflix Hystrix、Ribbon集成 与Netflix Zuul集成 Spring Cloud Stream，与RabbitMQ、Kafka集成 Spring Cloud Sleuth，与日志聚合工具Papertrail、跟踪工具Zipkin集成 Spring Cloud Security Actuator 依赖（放在父目录的pom中）： 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&lt;/dependency&gt; 作用：会自动生成一些路径，可查看微服务状态信息 服务镜像生成原理：基于Dockerfile文件，通过docker build命令生成docker镜像。 样例pom.xml父pom添加plugin，注意其中的一些变量需要在properties中定义 12345678910111213141516171819202122232425262728293031323334353637383940&lt;plugin&gt; &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;copy-resources&lt;/id&gt; &lt;!-- here the phase you need --&gt; &lt;phase&gt;validate&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;copy-resources&lt;/goal&gt; &lt;/goals&gt; &lt;configuration&gt; &lt;outputDirectory&gt;$&#123;basedir&#125;/target/dockerfile&lt;/outputDirectory&gt; &lt;resources&gt; &lt;resource&gt; &lt;directory&gt;src/main/docker&lt;/directory&gt; &lt;filtering&gt;true&lt;/filtering&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;/configuration&gt; &lt;/execution&gt; &lt;/executions&gt;&lt;/plugin&gt;&lt;!-- 加上此插件后，原本的生成镜像的命令就可以通过mvn clean package docker:build达到相同的效果 --&gt;&lt;!-- 原本的生成镜像的命令参考[4.2 docker build] --&gt;&lt;plugin&gt; &lt;groupId&gt;com.spotify&lt;/groupId&gt; &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt; &lt;version&gt;0.4.10&lt;/version&gt; &lt;configuration&gt; &lt;imageName&gt;$&#123;docker.image.name&#125;:$&#123;docker.image.tag&#125;&lt;/imageName&gt; &lt;dockerDirectory&gt;$&#123;basedir&#125;/target/dockerfile&lt;/dockerDirectory&gt; &lt;resources&gt; &lt;resource&gt; &lt;targetPath&gt;/&lt;/targetPath&gt; &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt; &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;/configuration&gt;&lt;/plugin&gt; src&#x2F;main&#x2F;docker目录下Dockerfile：生成镜像的关键 123456FROM openjdk:netcatRUN mkdir -p /usr/local/licensingserviceADD @project.build.finalName@.jar /usr/local/licensingservice/ADD run.sh run.shRUN chmod +x run.shCMD ./run.sh run.sh：批处理的脚本 12345#!/bin/shecho &quot;********************************************************&quot;echo &quot;Starting License Server&quot;echo &quot;********************************************************&quot;java -jar /usr/local/licensingservice/@project.build.finalName@.jar docker build生成镜像docker build [OPTIONS] PATH | URL | - 例如，在Dockerfile所在的目录下：**docker build -t 镜像名:版本号 .** 注意最后的点，表示当前目录 Dockerfile FROM：指定基础镜像，必须为第一个命令 镜像分层（镜像的逐步累加，可以理解为镜像的套娃） MAINTAINER: 维护者信息 RUN：构建镜像时执行的命令 ADD：将本地文件添加到容器中，tar类型文件会自动解压 COPY：功能类似ADD，但是不会自动解压文件 CMD：构建容器后调用，也就是在容器启动时才进行调用 ENTRYPOINT：配置容器，使其可执行化。配合CMD可省去”application”，只使用参数 LABEL：用于为镜像添加元数据 ENV：设置环境变量 EXPOSE：指定与外界交互的端口 VOLUME：用于指定持久化目录 WORKDIR：工作目录，类似于cd命令 USER:指定运行容器时的用户名或 UID ARG：用于指定传递给构建运行时的变量 ONBUILD：用于设置镜像触发器","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://wkxuan.cn/tags/SpringBoot/"}]},{"title":"10-Docker","slug":"SpringBoot/10-Docker","date":"2022-04-06T15:01:59.000Z","updated":"2022-10-20T03:05:08.539Z","comments":true,"path":"/b0df9026.html","link":"","permalink":"https://wkxuan.cn/b0df9026.html","excerpt":"","text":"容器概念、Docker命令使用Docker Desktop本质： Windows——通过Docker Client远程连接到Docker Engine Hyper-V Linux Docker Engine 容器轻量级的虚拟机，共用主机内核，拥有独立的文件系统、网络空间和进程空间视图等。 与虚拟机的区别 虚拟机是操作系统级别的资源隔离，容器是轻量级的资源隔离 Docker的三部分 Docker Client（在Windows） Docker Daemon（Docker Engine）（在Linux） Docker registires（Docker仓库） 基本命令 小知识：docker命令参数中若包含两个字母及以上，一般都是–，如--name, --rm， --env-file=XXX其他的就是-，如-d, -p, -v 获取容器的ip地址：cat /etc/hosts 123456789101112docker container ls # 查看容器docker container --help # 查看子命令docker run ... # 创建容器并运行命令docker pull # 拉取远程镜像docker image inspecet 镜像 # 列出镜像相关的信息docker versiondocker infodocker image ls === docker images 镜像与容器镜像名：镜像的Tag（类似于版本号）、镜像的ID、镜像的大小 docker run参数列表： 123456789101112-d # 后台运行-i # 以交互模式运行容器，通常与-t同时使用，即-it：直接进入终端-t # 为容器重新分配一个伪输入终端--rm # 当交互结束时，容器自动会被删除，与-d互斥；--rm优先级更高--name=XXX # 为容器起一个名字，=可以换成空格, XXX可以加引号-e JAVA_HOME=/usr/local/java # 设置环境变量--env-file=C:/Users/a.txt # 从指定文件读取环境变量docker exec -it mycontainer bash # 以交互式运行mycontainer并执行bash命令；exec即执行命令-p 宿主机端口:容器端口 # 端口映射-v 宿主机目录:容器目录 # 路径映射-w &#123;path&#125; # 指定命令执行时，所在的路径，如 -w /home -it会直接进入/home目录执行一系列命令--link 容器1:容器2 # 可以在容器2中访问容器1 （其中容器2就是当前的容器名，也就是说，这个命令包含了--name） docker container管理容器 12345678docker container ls # 正在运行的容器列表，加上-a则所有的，-q则只列iddocker inspect 容器 # 列出容器相关的信息docker port 容器 # 查看端口映射docker logs -f 容器 # 查看后台日志， Ctrl-C 停止docker stop/start/restart 容器docker attach 容器 # 附着到容器，效果：取消-d命令并输出容器日志docker rm -f 容器 # 强制删除docker container prune # 清理掉所有处于终止状态的容器 数据持久化绑定挂载卷的方式即-v 数据目录:容器的数据目录 数据卷（Volume）Docker-managed volumes（docker管理卷） 将容器中的数据持久化到硬盘中 volumes：Docker管理宿主机文件系统的一部分，默认位于/var/lib/dokcer/volumes目录中 镜像分层 写时复制（COW， Copy-On-Write） 见十一节 命令123docker volume ls # 查看所有volumedocker volume create MY_volume # 创建volume，容器可以访问# 使用：-v MY_volume:/usr/share/nginx/data 导出&#x2F;导入容器镜像1234docekr export 容器 &gt; XXX.tar # 导出docker import XXX.tar 容器:版本 # 导入# 快照导入：docker import http://..../xxx.tgz 容器 容器网络1234docker network lsdocker network inspect 网络名/ID # 查看信息docker network create my-network # 创建网络docker run --net=my-network ... # 使用网络 none网络，–net&#x3D;none 没有网络（与外界不通） host网络，–net&#x3D;host 与宿主机同一个网络 bridge网络 *，–net&#x3D;bridge （默认的） 每创建一个容器，都会创建一个虚拟的网卡，并将端口映射到宿主机中 container模式， –net&#x3D;container:NAME_or_ID 1234567connect NETWORK CONTAINER Connect a container to a network create Create a network disconnect NETWORK CONTAINER Disconnect a container from a network inspect Display detailed information on one or more networks ls List networks prune Remove all unused networks rm Remove one or more networks 举例： 123docker network create my-networkdocker run --net=my-network --name mymongo -d mongo docker run --net=my-network -it --rm mongo mongosh --host mymongo","categories":[],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://wkxuan.cn/tags/Docker/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://wkxuan.cn/tags/SpringBoot/"}]},{"title":"10-复习","slug":"SpringBoot/10-复习","date":"2022-04-06T14:01:59.000Z","updated":"2022-10-20T03:04:46.340Z","comments":true,"path":"/65c3d8fa.html","link":"","permalink":"https://wkxuan.cn/65c3d8fa.html","excerpt":"","text":"阶段回顾 Spring核心容器 依赖注入 DI 自动化配置 Component Autowired 构造器 Setter方法 required&#x3D;true ComponentScan JavaConfig：Configuration、Bean XML方式 混合配置 JavaConfig的导入 @Import（配置类.class...) @ImportResource（xml文件） XML中的导入 &lt;import resource=&quot;xml文件&quot;/&gt; &lt;bean class=&quot;配置类&quot;&gt; 面向切面编程 切面和业务逻辑的解耦 术语Advice、Pointcut（表达式语法）、Aspect 分别代表：切什么、在哪里切、怎样切 两种支持类型 @AspectJ注解驱动的切面 XML配置 @EnableAspectJAutoProxy JDBCWeb开发框架（MVC、控制器、视图渲染） Servlet 处理客户端请求（根据请求的URL决定将请求路由到哪个controller） Filter 过滤器 在路由之前过滤请求（可能有多个，构成一个过滤链） Handler mapping servlet通过这个来确定url与controller的映射 Controller 处理请求（可能会调用service层、dao层…） Model and logical view name service层、dao层…的返回的结果Model，再加上逻辑视图作为Controller的总的返回值给Servlet ViewResolver 结合Model和返回的视图做一个视图解析，如果解析到了某个页面，就会做Model和视图的结合，也就是渲染 View 最终渲染的结果页面 Response 携带结果返回 DispatchServlet配置 Servlet3规范 使用Java将DispatchServlet配置到Servlet容器中（本质上是因为继承了WebApplicationInitializer 获得请求的输入 查询参数&#x3D;&gt;?max&#x3D;123 &#x3D;&gt;@RequestParam(&quot;max&quot;) 路径参数 &#x3D;&gt;&#x2F;{name} &#x3D;&gt;@PathVariable(&quot;name&quot;) 表单参数&#x3D;&gt;参数名与对象字段名相同 测试控制器 org.springframework.test.web.servlet.MockMvc 安全与权限逻辑：定义一个过滤器Filter，DelegatingFilterProxy将请求委托给FilterChainProxy 继承AbstractWeb @EnableWebMvcSecurity 数据持久化业务与访问持久化数据解耦 数据访问对象DAO或Repository 方便业务层的测试 方便DAO层的替换 四种配置数据源的方式 JNDI 连接池（第三方） JDBC驱动程序定义 嵌入式（内存数据库如H2） Spring的JDBC框架 JDBC模板所做的事：资源管理和异常处理 ORM 对象关系映射（数据库与Java对象之间的某种映射，以实现直接存取Java对象） Hibernate三类查询 JPA——Java Persistence API 宗旨是为POJO提供持久化标准规范 JPQL SpringDataJpa 加注解@EnableJpaRepositories 继承接口JpaRepository MongoDB 注解@EnableMongoRepositories(basePackages=&quot;DAO层&quot;) 继承MongoRepository （与JpaRepository一样来自CRUBRepository） Redis数据类型（键值对中的value） String Linked Lists Hashes Sets RedisTemplate 简单的值 List类型的值 在Set上执行操作 绑定到某个Key上","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://wkxuan.cn/tags/SpringBoot/"},{"name":"AOP","slug":"AOP","permalink":"https://wkxuan.cn/tags/AOP/"},{"name":"JDBC","slug":"JDBC","permalink":"https://wkxuan.cn/tags/JDBC/"}]},{"title":"9-缓存编程（EhCache和Redis）","slug":"SpringBoot/9-缓存编程（EhCache和Redis）","date":"2022-04-06T13:01:59.000Z","updated":"2022-10-18T05:36:59.076Z","comments":true,"path":"/df14f865.html","link":"","permalink":"https://wkxuan.cn/df14f865.html","excerpt":"","text":"缓存编程对于需要多次重复访问的数据，可以将其放到缓存中以减少数据库访问次数。 Spring官方并没有提供缓存的功能，需要借助第三方工具，如以下两个。 EhCache 基于JVM，本质上是一个进程 与Java应用程序跑在同一个进程中，若JVM挂了，EhCache也会挂 读取速度相对Redis更快（性能优势） Redis 集群部署 远程、跨进程访问 数据可靠性更高 启用缓存 配置类前加上@EnableCaching（下面三小点具体写配置类） 在aspect、pointcut中实现（AOP） &#x3D;&gt; 对代码没有侵入性 原理：启用了缓存的切面，能够让@Cacheable等注解起作用 缓存管理器，与缓存实现集成 org.springframework.cache.CacheManager 在接口的方法前加上注解 考试会考 @Cacheable(&quot;缓存名&quot;) 作用： 第一次查询后会将返回结果放入缓存 可以从内存中快速获取之前缓存的值 @CachePut(value=&quot;缓存名&quot;, key=&quot;#result.id&quot;) 注意#result代表的就是返回值（对象）、本质是一个引用，.id的前提是该返回值有这个属性 value表示存到哪一个缓存中 作用：只负责将结果存入缓存 时机：在作用完返回结果后 @CacheEvict(value=&quot;缓存名&quot;,condition=&quot;&quot;) 作用：删除缓存 基于jdk的Cache实现12345678910import org.springframework.cache.CacheManager;@Configuration@EnableCachingpublic class CachingConfig &#123; @Bean public CacheManager cacheManager() &#123; return new ConcurrentMapCacheManager(); &#125;&#125; EhCache概念 CacheManager：Cache的容器对象，并管理（添加或删除）Cache的生命周期 Cache：一个Cache可以包含多个Element（键值对），并被CacheManager管理。实现了对缓存的逻辑行为 Element：需要缓存的元素，维护者一个键值对，元素可以设置有效期，0表示无限制 自定义缓存配置 name：缓存的名称，可以通过指定名称获取指定的某个Cache对象 maxElementsInMemory：内存中允许存储的最大的元素个数，0代表无限个 clearOnFlush：内存数量最大时是否清除 eternal：设置缓存中对象是否为永久的，如果是，超时设置将被忽略，对象从不过期。 timeToIdleSeconds： 设置对象在失效前的允许闲置时间（单位：秒） timeToLiveSeconds：缓存数据的生存时间（TTL） overflowToDisk：内存不足时，是否启用磁盘缓存 maxEntriesLocalDisk：当内存中对象数量达到maxElementsInMemory时，Ehcache将会对象写到磁盘中。maxElementsOnDisk：硬盘最大缓存个数 diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区 diskPersistent：是否在VM重启时存储硬盘的缓存数据。默认值是false memoryStoreEvictionPolicy：如果内存中数据超过内存限制，向磁盘缓存时的策略。默认值LRU，可选FIFO、LFU。 代码 依赖包： 12345678910&lt;dependency&gt; &lt;groupId&gt;net.sf.ehcache&lt;/groupId&gt; &lt;artifactId&gt;ehcache&lt;/artifactId&gt; &lt;version&gt;2.7.4&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;net.sf.ehcache&lt;/groupId&gt; &lt;artifactId&gt;ehcache-jcache&lt;/artifactId&gt; &lt;version&gt;1.4.0-beta1&lt;/version&gt;&lt;/dependency&gt; 配置： 12345678910111213141516171819202122import net.sf.ehcache.CacheManager;import org.springframework.cache.ehcache.EhCacheCacheManager;import org.springframework.cache.ehcache.EhCacheManagerFactoryBean;@Configuration@EnableCachingpublic class CachingConfig &#123; @Bean public EhCacheCacheManager cacheManager(CacheManager cm) &#123; return new EhCacheCacheManager(cm); &#125; @Bean public EhCacheManagerFactoryBean ehcache() &#123; EhCacheManagerFactoryBean ehCacheFactoryBean = new EhCacheManagerFactoryBean(); ehCacheFactoryBean.setConfigLocation( new ClassPathResource(&quot;spittr/cache/ehcache.xml&quot;)); return ehCacheFactoryBean; &#125;&#125; 其中的xml： 123456&lt;ehcache&gt; &lt;cache name=&quot;spittleCache&quot; maxBytesLocalHeap=&quot;50m&quot; timeToLiveSeconds=&quot;100&quot;&gt; &lt;/cache&gt;&lt;/ehcache&gt; Redis 依赖包： 12345678910&lt;dependency&gt; &lt;groupId&gt;redis.clients&lt;/groupId&gt; &lt;artifactId&gt;jedis&lt;/artifactId&gt; &lt;version&gt;2.5.2&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.data&lt;/groupId&gt; &lt;artifactId&gt;spring-data-redis&lt;/artifactId&gt; &lt;version&gt;1.3.2.RELEASE&lt;/version&gt;&lt;/dependency&gt; 1234567891011121314151617181920212223242526272829import org.springframework.cache.CacheManager;import org.springframework.data.redis.cache.RedisCacheManager;import org.springframework.data.redis.connection.RedisConnectionFactory;import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;import org.springframework.data.redis.serializer.StringRedisSerializer;@Configuration@EnableCachingpublic class CachingConfig &#123; @Bean public CacheManager cacheManager(RedisTemplate redisTemplate) &#123; return new RedisCacheManager(redisTemplate); &#125; @Bean public RedisConnectionFactory redisCF() &#123; // 默认是localhost:6379 return new JedisConnectionFactory(); &#125; @Bean public RedisTemplate&lt;String, String&gt; redisTemplate(RedisConnectionFactory cf) &#123; RedisTemplate&lt;String, String&gt; redis = new RedisTemplate&lt;&gt;(); redis.setConnectionFactory(cf); return redis; &#125;&#125; EhCache相对比较底层的实现（不需要Spring）123456789101112131415161718192021222324252627282930313233343536373839@Testpublic void test1() &#123; // 1. 创建缓存管理器 CacheManager cacheManager = CacheManager.create(&quot;src/main/resources/spittr/cache/hellocache.xml&quot;); // 在配置中持久化到硬盘 // 2. 获取缓存对象 Cache cache = cacheManager.getCache(&quot;HelloWorldCache&quot;); // 3. 创建元素 Element element1 = new Element(&quot;key1&quot;, &quot;value1&quot;); // 4. 将元素添加到缓存 cache.put(element1); // 5. 获取缓存 Element element2 = cache.get(&quot;key1&quot;); System.out.println(element2); System.out.println(element2.getObjectValue()); // 6. 删除元素 // cache.remove(&quot;key1&quot;); Spitter spitter = new Spitter(1L, &quot;habuma&quot;, &quot;password&quot;, &quot;Craig Walls&quot;, &quot;craig@habuma.com&quot;, false); Element celement = new Element(&quot;zhangsan&quot;, spitter); cache.put(celement); Element customer2 = cache.get(&quot;zhangsan&quot;); System.out.println(customer2); System.out.println(customer2.getObjectValue()); System.out.println(cache.getSize()); // 7. 刷新缓存，持久化到硬盘 cache.flush(); // 8. 关闭缓存管理器 cacheManager.shutdown();&#125; 其中的配置文件hellocache.xml 123456789101112131415161718192021222324252627282930313233&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;ehcache xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;http://ehcache.org/ehcache.xsd&quot;&gt; &lt;!-- 磁盘缓存位置 --&gt; &lt;diskStore path=&quot;c:/ehcache&quot;/&gt; &lt;!-- 默认缓存 --&gt; &lt;defaultCache maxEntriesLocalHeap=&quot;10000&quot; eternal=&quot;false&quot; timeToIdleSeconds=&quot;120&quot; timeToLiveSeconds=&quot;120&quot; maxEntriesLocalDisk=&quot;10000000&quot; diskExpiryThreadIntervalSeconds=&quot;120&quot; memoryStoreEvictionPolicy=&quot;LRU&quot;&gt; &lt;persistence strategy=&quot;localTempSwap&quot;/&gt; &lt;/defaultCache&gt; &lt;!-- helloworld缓存 --&gt; &lt;cache name=&quot;HelloWorldCache&quot; maxElementsInMemory=&quot;1&quot; eternal=&quot;true&quot; timeToIdleSeconds=&quot;5&quot; timeToLiveSeconds=&quot;5&quot; overflowToDisk=&quot;false&quot; diskPersistent=&quot;true&quot; memoryStoreEvictionPolicy=&quot;LRU&quot;/&gt; &lt;cache name=&quot;spittleCache&quot; maxBytesLocalHeap=&quot;50m&quot; timeToLiveSeconds=&quot;100&quot;&gt; &lt;/cache&gt;&lt;/ehcache&gt;","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://wkxuan.cn/tags/SpringBoot/"}]},{"title":"8-NoSQL数据库使用和编程（MongoDB、Redis）","slug":"SpringBoot/8-NoSQL数据库使用和编程（MongoDB、Redis）","date":"2022-04-06T09:38:26.000Z","updated":"2022-10-18T05:36:59.074Z","comments":true,"path":"/22a0af5c.html","link":"","permalink":"https://wkxuan.cn/22a0af5c.html","excerpt":"","text":"NoSQL Not Only SQL，非关系型数据库 没有声明性查询语言 没有预定义的模式 键值对、列、文档、图形 MongoDBC++语言编写，基于分布式文件存储的开源数据库系统 文档存储一般用类似JSON的格式存储，存储的内容是文档型的 12345&#123; name: &quot;xwk&quot;, age: 22, status: &quot;OK&quot;&#125; MongoDB Shell mongosh（基于Node.js，可以用js语法） MongoDB Shell是自带的交互式JavaScript shell，用来对MongoDB进行操作和管理的交互式环境 MongoDB的一些概念 SQL术语&#x2F;概念 MongoDB术语&#x2F;概念 解释说明 database database 数据库 table collection 表&#x2F;集合 row document 行&#x2F;文档 column field 字段 默认端口：27017 12345678910docker run --name mymongo -d -p 27017:27017 mongodocker stop mymongodocker rm mymongomongo访问docker run -it --link mymongo:taozs --rm mongo mongosh --host taozsdocker network create my-networkdocker run --net=my-network --name mymongo -d mongo docker run --net=my-network -it --rm mongo mongo --host mymongo 一些命令12345678910111213141516171819202122db.help() # help on db methodsdb.mycoll.help() # help on collection methodssh.help() # sharding helpersrs.help() # replica set helpershelp admin # administrative helphelp connect # connecting to a db helphelp keys # key shortcutshelp misc # misc things to knowhelp mr # mapreduceshow dbs # show database namesshow collections # show collections in current databaseshow users # show users in current databaseshow profile # show most recent system.profile entries with time &gt;= 1msshow logs # show the accessible logger namesshow log [name] # prints out the last segment of log in memory, &#x27;global&#x27; is defaultuse &lt;db_name&gt; # set current databasedb.foo.find() # list objects in collection foodb.foo.find( &#123; a : 1 &#125; ) # list objects in foo where a == 1it # result of the last line evaluated; use to further iterateDBQuery.shellBatchSize = x # set default number of items to display on shellexit # quit the mongo shell 12345678910show dbs # 哪些数据库use &#123;dbName&#125; # 选择数据库db # 当前数据库show collections # 显示表db.&#123;表名&#125;.find() # 查看表数据db.createCollection(&quot;person&quot;) # 创建表show collectionsdb.person.insert(&#123;一个JSON串&#125;)db.person.find().pretty()db.dropDatabase() # 删除当前数据库 基于JDBC驱动的编程12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455import com.mongodb.MongoClient;import com.mongodb.client.FindIterable;import com.mongodb.client.MongoCollection;import com.mongodb.client.MongoCursor;import com.mongodb.client.MongoDatabase;import com.mongodb.client.model.Filters;import org.bson.Document;import java.util.ArrayList;import java.util.List;public class MongoDBJDBC &#123; public static void main(String args[]) &#123; try &#123; MongoClient mongoClient = new MongoClient(&quot;localhost&quot;, 27017); MongoDatabase mongoDatabase = mongoClient.getDatabase(&quot;test&quot;); MongoCollection&lt;Document&gt; collection = mongoDatabase.getCollection(&quot;mytable&quot;); collection.deleteMany(Filters.eq(&quot;name&quot;, &quot;taozs&quot;)); //插入 Document document = new Document(&quot;name&quot;, &quot;taozs&quot;). append(&quot;age&quot;, 18). append(&quot;memo&quot;, &quot;taozhaosheng&quot;); List&lt;Document&gt; documents = new ArrayList&lt;&gt;(); documents.add(document); collection.insertMany(documents); //删除符合条件的第一个文档// collection.deleteOne(Filters.eq(&quot;age&quot;, 18)); //删除所有符合条件的文档// collection.deleteMany(Filters.eq(&quot;age&quot;, 18)); //查询 FindIterable&lt;Document&gt; findIterable = collection.find(); MongoCursor&lt;Document&gt; mongoCursor = findIterable.iterator(); while (mongoCursor.hasNext()) &#123; Document doc =mongoCursor.next(); System.out.println(doc); System.out.println(doc.toJson()); &#125; mongoClient.close(); &#125; catch (Exception e) &#123; System.err.println(e.getClass().getName() + &quot;: &quot; + e.getMessage()); &#125; &#125;&#125; Spring data MongoDB 依赖： 1234567891011&lt;dependency&gt; &lt;groupId&gt;org.mongodb&lt;/groupId&gt; &lt;artifactId&gt;mongo-java-driver&lt;/artifactId&gt; &lt;version&gt;3.12.2&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.data&lt;/groupId&gt; &lt;artifactId&gt;spring-data-mongodb&lt;/artifactId&gt; &lt;version&gt;1.5.2.RELEASE&lt;/version&gt;&lt;/dependency&gt; 实体类 表用@Document注解 主键可以用@Id（org.springframework.data.annotation.Id） 用Collection&lt;Item&gt; = new LinkedHashSet&lt;&gt;()来表名一对多的映射关系 字段名@Field(&quot;数据库列名&quot;)，等同于@Column(&quot;&quot;) 例如： 123456789101112131415161718192021import java.util.Collection;import java.util.LinkedHashSet;import org.springframework.data.annotation.Id;import org.springframework.data.mongodb.core.mapping.Document;import org.springframework.data.mongodb.core.mapping.Field;@Data@Documentpublic class Order &#123; @Id private String id; @Field(&quot;client&quot;) private String customer; private String type; private Collection&lt;Item&gt; items = new LinkedHashSet&lt;&gt;();&#125; 配置类123456789101112131415161718192021222324import com.mongodb.MongoClient;import org.springframework.context.annotation.Configuration;import org.springframework.data.mongodb.config.AbstractMongoConfiguration;import org.springframework.data.mongodb.repository.config.EnableMongoRepositories;@Configuration@EnableMongoRepositories(basePackages = &quot;orders.db&quot;) // 扫描接口所在的包public class MongoConfig extends AbstractMongoConfiguration &#123; @Override protected String getDatabaseName() &#123; // 操作的数据库名，如果没有会自动创建 return &quot;OrdersDB&quot;; &#125; @Override public MongoClient mongo() throws Exception &#123; // MongoDB底层驱动，默认参数是localhost:27017 // 也可以指定： // return new MongoClient(ip, port); return new MongoClient(); &#125;&#125; AbstractMongoConfiguration中有实现MongoDBTemplate的Bean，你也可以将其注入到自己的接口实现类中，然后调用其Operations实现自定义方法 例如： 12@AutowiredMongoOperations mongoOps; 网上的关于数据库配置：在application.yml中 1spring.data.mongodb.uri=mongodb://name:pass@localhost:27017/test 接口实现123456789101112131415161718192021package orders.db;import java.util.List;import orders.Order;import org.springframework.data.mongodb.repository.MongoRepository;import org.springframework.data.mongodb.repository.Query;public interface OrderRepository extends MongoRepository&lt;Order, String&gt; &#123; // Order为实体类 List&lt;Order&gt; findByCustomer(String customer); List&lt;Order&gt; findByCustomerLike(String customer); List&lt;Order&gt; findByCustomerAndType(String customer, String type); List&lt;Order&gt; getByType(String type); @Query(&quot;&#123;customer:&#x27;Chuck Wagon&#x27;&#125;&quot;) List&lt;Order&gt; findChucksOrders();&#125; Redis默认端口6379 键值对（key-value）的Hash表结构 内存数据库（缓存） 集群 主从（master&#x2F;slave）复制 数据持久化 注意key、value区分大小写 数据类型 String （包括数值） Linked Lists （列表，先进先出） 队列lpush/rpop 阻塞等待：BRPOP和BLPOP Hashes Sets 一些命令12345678910111213141516http://doc.redisfans.com/flushdb # 删除当前数据库中的所有Key flushall # 删除所有数据库中的key config get databases # 获取数据库信息# 选择数据库select 0-15# redis的启动和访问docker run -d --name myredis -p 6379:6379 redisdocker run -it --rm --link myredis:taozs redis redis-cli -h taozsredis-cli -h host -p port -a password String12345678910111213141516keys *set key value get keyset counter 100 # 注意数值类型属于Stringincr counterincrby counter 50decrdecrbymset a 10 b 20 c 30mget a b cexists keydel keytype keyexpire key 5 # 创建一个key，存活时间为5秒set a 111 ex 5ttl key # 查询一个key剩余的存活时间 Linked Lists、Hash和Sets123456789101112131415# Linked Listsrpush mylist 15 # 右侧插入lrange mylist 0 -1 # -1是列表的最后一个元素，-2是列表的倒数第二个元素，依此类推。rpush mylist 1 2 3 4 5 &quot;foo bar“lpush mylist 1 2 3 4 5rpop keylpop keybrpop tasks 5 # 右侧弹出一个值（若tasks为空，则会一直block，等待时间为5秒）# Hashhmset user name tao age 10 # hmset key [属性名 属性值][属性名 属性值]...hgetall userhget user name# Setssadd myset 1 2 3 # sadd key 集合值smembers myset 连接到RedisJedisConnectionFactory（第一个字母是J不是R）创建Bean 12345678910111213141516171819202122import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.data.redis.connection.RedisConnectionFactory;import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;import org.springframework.data.redis.core.RedisTemplate;@Configurationpublic class RedisConfig &#123; @Bean public RedisConnectionFactory redisCF() &#123; return new JedisConnectionFactory(); &#125; @Bean public RedisTemplate&lt;String, Product&gt; redisTemplate(RedisConnectionFactory cf) &#123; RedisTemplate&lt;String, Product&gt; redis = new RedisTemplate&lt;&gt;(); redis.setConnectionFactory(cf); return redis; &#125;&#125; 使用（详见section8-Redis）注意！如果想要往Redis中存入数据，就必须使用序列化的对象，即实体类需要继承Serializable并添加属性private static final long serialVersionUID = 1L; ⬆但是此时Redis中的数据就会变得不可读 创建redis对象 1234567891011// 使用简单的值opsForValue()----ValueOperationsset、get// 使用List类型的值opsForList()----ListOperationsrightPush、leftPop、range// 在Set上执行操作opsForSet()----SetOperationsadd、difference、union、intersect// 绑定到某个key上boundListOps(&quot;cart&quot;) 指定序列化器 默认处理：JdkSerializationRedisSerializer 也可以自定义： StringRedisSerializer Jackson2JsonRedisSerializer 例如： 123456789101112@Autowiredprivate RedisConnectionFactory cf;...public void Test()&#123; RedisTemplate&lt;String, Product&gt; redis = new RedisTemplate&lt;&gt;(); redis.setConnectionFactory(cf); redis.setKeySerializer(new StringRedisSerializer()); redis.setValueSerializer(new Jackson2JsonRedisSerializer&lt;Product&gt;(Product.class)); redis.afterPropertiesSet(); // if this were declared as a bean, you wouldn&#x27;t have to do this ...&#125; 小工具 java-fakerhttps://github.com/DiUS/java-faker 可以帮助创建一些假数据 123Faker faker = new Faker(Locale.CHINA); // 支持中文for (int i = 0; i &lt; 100; ++i) System.out.println(faker.address().streetAddress());","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://wkxuan.cn/tags/SpringBoot/"}]},{"title":"7-ORM与Hibernate、JPA编程","slug":"SpringBoot/7-ORM与Hibernate、JPA编程","date":"2022-03-22T09:34:35.000Z","updated":"2022-10-18T05:36:59.071Z","comments":true,"path":"/6a2f2c0.html","link":"","permalink":"https://wkxuan.cn/6a2f2c0.html","excerpt":"","text":"ORM与Hibernate、JPA编程ORM 对象关系映射（object-relationship mapping） 在Java对象与关系数据库之间建立某种映射，以直接存取Java对象 Hibernate、MyBatis JPA（Java Persistence API） Hibernate编程123456789101112131415161718&lt;!-- 官方的 --&gt;&lt;dependency&gt;&lt;groupId&gt;org.springframework&lt;/groupId&gt;&lt;artifactId&gt;spring-orm&lt;/artifactId&gt; &lt;version&gt;$&#123;springVersion&#125;&lt;/version&gt;&lt;/dependency&gt;&lt;!-- 具体的数据库 --&gt;&lt;dependency&gt;&lt;groupId&gt;com.h2database&lt;/groupId&gt;&lt;artifactId&gt;h2&lt;/artifactId&gt; &lt;version&gt;$&#123;h2Version&#125;&lt;/version&gt;&lt;/dependency&gt;&lt;!-- 第三方 --&gt;&lt;dependency&gt;&lt;groupId&gt;org.hibernate&lt;/groupId&gt;&lt;artifactId&gt;hibernate-core&lt;/artifactId&gt; &lt;version&gt;$&#123;hibernateVersion&#125;&lt;/version&gt;&lt;/dependency&gt; 通过SessionFactory配置数据源，然后@Bean，在下面的代码中进行注入 定义这么多东西： 12345678910private SessionFactory sessionFactory;@Injectpublic HibernateSpitterRepository(SessionFactory sessionFactory) &#123; this.sessionFactory = sessionFactory;&#125;private Session currentSession() &#123; return sessionFactory.getCurrentSession();// 拿到session对象&#125; 使用： currentSession().save() currentSession().get() &#96;&#96;&#96;java currentSession() .createCriteria(Spitter.class)&#x2F;&#x2F; 绑定对象 .add(Restrictions.eq(“username”, username)) &#x2F;&#x2F; 加入查询条件 .list(); 1234567891011121314151617181920212223242526 - ...### Hibernate三类查询1. HQL：hibernate query language，即hibernate提供的面向对象的查询语言 select/update/delete…… from …… where …… group by …… having …… order by …… asc/desc ```java // HQL:hibernate query language，即hibernate提供的面向对象的查询语言 @Test @Transactional public void hqlTest1() &#123; Query query = sessionFactory.getCurrentSession().createQuery(&quot;FROM Spitter&quot;); List&lt;Spitter&gt; list = query.list(); System.out.println(list); &#125; @Test @Transactional public void hqlTest2() &#123; Query query = sessionFactory.getCurrentSession().createQuery(&quot;FROM Spitter where id = ?&quot;); query.setParameter(0, 2L); List&lt;Spitter&gt; list = query.list(); System.out.println(list); &#125; QBC查询: query by criteria 完全面向对象的查询 123456789101112131415161718192021 // QBC查询: query by criteria 完全面向对象的查询 @Test @Transactional public void qbcTest() &#123; Criteria criteria = sessionFactory.getCurrentSession().createCriteria(Spitter.class); criteria.add(Restrictions.eq(&quot;id&quot;, 2L)); List&lt;Spitter&gt; list = criteria.list(); System.out.println(list); &#125;3. 本地SQL查询 ```java //本地SQL查询，标准SQL语法 @Test @Transactional public void sqlTest() &#123; SQLQuery sqlQuery = sessionFactory.getCurrentSession().createSQLQuery(&quot;SELECT * FROM spitter&quot;).addEntity(Spitter.class); List&lt;Spitter&gt; list = sqlQuery.list(); System.out.println(list); &#125; JPA：Java Persistence API 依赖： 12345678910111213141516&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-orm&lt;/artifactId&gt; &lt;version&gt;$&#123;springVersion&#125;&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;com.h2database&lt;/groupId&gt; &lt;artifactId&gt;h2&lt;/artifactId&gt; &lt;version&gt;$&#123;h2Version&#125;&lt;/version&gt;&lt;/dependency&gt;&lt;!-- 只在这里不同 --&gt;&lt;dependency&gt; &lt;groupId&gt;org.hibernate&lt;/groupId&gt; &lt;artifactId&gt;hibernate-entitymanager&lt;/artifactId&gt; &lt;version&gt;4.0.1.Final&lt;/version&gt;&lt;/dependency&gt; 配置 1234567891011121314151617181920212223242526272829303132@Beanpublic DataSource dataSource() &#123; EmbeddedDatabaseBuilder edb = new EmbeddedDatabaseBuilder(); edb.setType(EmbeddedDatabaseType.H2); edb.addScript(&quot;spittr/db/jpa/schema.sql&quot;); edb.addScript(&quot;spittr/db/jpa/test-data.sql&quot;); EmbeddedDatabase embeddedDatabase = edb.build(); return embeddedDatabase;&#125;/** * 核心 */@Beanpublic LocalContainerEntityManagerFactoryBean emf(DataSource dataSource, JpaVendorAdapter jpaVendorAdapter) &#123; LocalContainerEntityManagerFactoryBean emf = new LocalContainerEntityManagerFactoryBean(); emf.setDataSource(dataSource); emf.setPersistenceUnitName(&quot;spittr&quot;); emf.setJpaVendorAdapter(jpaVendorAdapter); emf.setPackagesToScan(&quot;spittr.domain&quot;); return emf;&#125;@Beanpublic JpaVendorAdapter jpaVendorAdapter() &#123; HibernateJpaVendorAdapter adapter = new HibernateJpaVendorAdapter(); adapter.setDatabase(Database.H2); adapter.setShowSql(true); adapter.setGenerateDdl(false); adapter.setDatabasePlatform(&quot;org.hibernate.dialect.H2Dialect&quot;); return adapter;&#125; 定义 1234@PersistenceContextprivate EntityManager entityManager;//并不会真正注入EntityManager，因为它不是线程安全的，//注入的是一个代理，通过代理关联到当前事务上下文的真正的EntityManager 使用： 12345678910111213141516public Spitter save(Spitter spitter) &#123; entityManager.persist(spitter); return spitter;&#125;public Spitter findOne(long id) &#123; return entityManager.find(Spitter.class, id);&#125;public Spitter findByUsername(String username) &#123; return (Spitter) entityManager.createQuery(&quot;select s from Spitter s where s.username=?&quot;).setParameter(1, username).getSingleResult();&#125;public List&lt;Spitter&gt; findAll() &#123; return (List&lt;Spitter&gt;) entityManager.createQuery(&quot;select s from Spitter s&quot;).getResultList();&#125; Spring Data JPA 依赖： 123456789101112131415161718192021&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-orm&lt;/artifactId&gt; &lt;version&gt;$&#123;springVersion&#125;&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;com.h2database&lt;/groupId&gt; &lt;artifactId&gt;h2&lt;/artifactId&gt; &lt;version&gt;$&#123;h2Version&#125;&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.hibernate&lt;/groupId&gt; &lt;artifactId&gt;hibernate-entitymanager&lt;/artifactId&gt; &lt;version&gt;4.0.1.Final&lt;/version&gt;&lt;/dependency&gt;&lt;!-- 新增的 --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.data&lt;/groupId&gt; &lt;artifactId&gt;spring-data-jpa&lt;/artifactId&gt; &lt;version&gt;1.3.2.RELEASE&lt;/version&gt;&lt;/dependency&gt; 配置类加注解@EnableJpaRepositories(basePackages=&quot;com.example.dao&quot;) 创建接口继承JpaRepository&lt;实体类, id类型（Long或Integer）&gt;（无需注解） Jpa会自动帮助实现count、save、find、delete等十八个方法 定义查询方法，无需实现 领域特定语言（domain-specific language，DSL)，spring data的命名约定 查询动词 + 主题 + 断言 find+Spitter（可省略）+By+Username 查询动词：get、read、find、count 声明自定义查询 不符合方法命名约定时，或者命名太长时 @Query(“select ...”) 12@Query(&quot;select s from Spitter s where s.email like &#x27;%gmail.com&#x27;&quot;)List&lt;Spitter&gt; findAllGmailSpitters(); 使用EntityManager直接底层实现（见[JPA](##JPA：Java Persistence API)） 接口名+Impl的实现类 一些注解 @Inject注解，由javax提供的 效果等同于@Autowired（Spring提供），但是需要添加依赖（那我图啥呢） 12345&lt;dependency&gt; &lt;groupId&gt;javax.inject&lt;/groupId&gt; &lt;artifactId&gt;javax.inject&lt;/artifactId&gt; &lt;version&gt;1&lt;/version&gt;&lt;/dependency&gt; @Entity 参数： name 指定表名（默认与类名相同） @Repository 包含@Component 可以将底层的Hibernate异常做了一个屏蔽，将其转化成Spring标准的DataAccessException 需要添加Bean（）： 1234567891011@Configuration@EnableTransactionManagement@ComponentScanpublic class RepositoryTestConfig implements TransactionManagementConfigurer &#123; ... @Bean public BeanPostProcessor persistenceTranslation() &#123; return new PersistenceExceptionTranslationPostProcessor(); &#125; ...&#125; Dao层的Repository、控制层的Controller、业务层的Service，都来自Component","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://wkxuan.cn/tags/SpringBoot/"}]},{"title":"6-JDBC、数据源配置","slug":"SpringBoot/6-JDBC、数据源配置","date":"2022-03-21T15:28:04.000Z","updated":"2022-10-18T05:36:59.067Z","comments":true,"path":"/745a5726.html","link":"","permalink":"https://wkxuan.cn/745a5726.html","excerpt":"","text":"JDBC、数据源配置业务与访问持久化数据解耦 数据访问对象（data access object，DAO）或Repository 优点： 方便业务层测试 DAO层的实现技术可以随时更换 jdbc jpa orm 异常体系 SQLException 发生异常时很难恢复 难确定异常类型 Hibernate异常 定义了许多具体异常，方便定位问题 对业务对象的侵入 Spring所提供的平台无关的持久化异常 DataAccessException 属于RuntimeException 不需要try..catch（不用检查） 具体异常，方便定位问题 隔离具体数据库平台 模板方法模式由父类定义步骤，子类重写每个步骤，控制每个步骤具体干什么 模板方法定义过程的主要框架，template 管理资源 业务控制 处理异常 变化的部分，回调（callback），自定义的数据访问代码 Spring提供的模板 JdbcTemplate HibernateTemplate JpaTemplate 四种配置数据源的方式 通过JNDI查找的数据源（Java Naming and Directory Interface） Java命名和目录接口 适用于Web容器已经定义好了数据源，数据源与代码隔离 12345678@Beanpublic JndiObjectFactoryBean dataSource0() &#123; JndiObjectFactoryBean jndiObjectFactoryBean = new JndiObjectFactoryBean(); jndiObjectFactoryBean.setJndiName(&quot;jdbc/person&quot;); // 具体配置定义在Tomcat中，这个类似于id，到Tomcat中找名为&quot;jdbc/person&quot;的配置 jndiObjectFactoryBean.setResourceRef(true); jndiObjectFactoryBean.setProxyInterface(javax.sql.DataSource.class); return jndiObjectFactoryBean;&#125; 连接池的数据源 适用于生产环境，提升数据库访问性能 更多代码详见originalJdbcTest.java 123456789101112@Profile(&quot;prod&quot;)@Beanpublic DataSource dataSource3() &#123; BasicDataSource ds = new BasicDataSource(); ds.setDriverClassName(&quot;com.mysql.jdbc.Driver&quot;); ds.setUrl(&quot;jdbc:mysql://localhost:3306/exampledb6&quot;); ds.setUsername(&quot;root&quot;); ds.setPassword(&quot;exampledb20&quot;); ds.setInitialSize(5); // 连接池数量 ds.setMaxActive(10); // 最大连接池数量 return ds;&#125; 通过JDBC驱动程序定义的数据源 优点：用的是标准的SQL语句，大家都能看懂，比较底层，可以自定义很多 1234567891011@Profile(&quot;qa&quot;)@Beanpublic DataSource dataSource2() &#123; DriverManagerDataSource ds = new DriverManagerDataSource(); // 用完就释放 // new SingleConnectionDataSource(); 一直连接 ds.setDriverClassName(&quot;com.mysql.jdbc.Driver&quot;); ds.setUrl(&quot;jdbc:mysql://localhost:3306/exampledb6&quot;); ds.setUsername(&quot;root&quot;); ds.setPassword(&quot;exampledb20&quot;); return ds;&#125; 配置嵌入式数据源 将数据库放在内存中，用于开发和测试，速度快，且不会把数据搞乱，运行结束之后数据就没了 有很多种，如H2、DERBY、HSQL 12345678@Profile(&quot;ut&quot;)@Beanpublic DataSource dataSource() &#123; return new EmbeddedDatabaseBuilder() .setType(EmbeddedDatabaseType.H2) .addScripts(&quot;classpath:spittr/db/jdbc/schema.sql&quot;, &quot;classpath:spittr/db/jdbc/test-data.sql&quot;) .build();&#125; 以上数据源的配置都是放在JdbcConfig类中，且作为Bean。而这四个Bean并不是同时创建的，所以这里使用了**@Profile**注解来标识不同的Bean 具体使用： 在需要配置数据源的类（Test类）前使用@ActiveProfiles(&quot;数据源1&quot;)注解来指定创建数据源的Bean @Transactional事务回滚，用于测试 org.springframework.transaction.annotation.Transactional 注意这里的回滚并不彻底，比如在数据库主键自增的情况下，回滚时主键依旧自增（记录数原先是4，插入变成5，回滚之后虽然仍旧是4条记录，但再次插入id就会变成6）","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://wkxuan.cn/tags/SpringBoot/"}]},{"title":"5-Spring Security","slug":"SpringBoot/5-Spring Security","date":"2022-03-20T05:47:00.000Z","updated":"2022-10-20T03:04:13.964Z","comments":true,"path":"/eab965a0.html","link":"","permalink":"https://wkxuan.cn/eab965a0.html","excerpt":"","text":"Spring Security 依赖： 12345678910&lt;dependency&gt; &lt;groupId&gt;org.springframework.security&lt;/groupId&gt; &lt;artifactId&gt;spring-security-config&lt;/artifactId&gt; &lt;version&gt;3.2.0.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.security&lt;/groupId&gt; &lt;artifactId&gt;spring-security-web&lt;/artifactId&gt; &lt;version&gt;3.2.0.RELEASE&lt;/version&gt;&lt;/dependency&gt; 使用Spring Security的请求拦截 定义SecurityWebInitializer继承AbstractSecurityWebApplicationInitializer就可以了（类体可以为空） 核心代码@EnableWebMvcSecurity 登录 12.formLogin() .loginPage(&quot;/login&quot;) 访问登录页面时使用自己的login.html。 如果将.loginPage(&quot;/login&quot;)注释掉，会使用security自带的页面 如果将.formLogin()也注释掉，会直接跳出弹窗要求登录（就不是页面了） 页面拦截 12345.authorizeRequests() .antMatchers(&quot;/&quot;).hasAnyRole(&quot;USER&quot;) .antMatchers(&quot;/spitter/me&quot;).authenticated() .antMatchers(HttpMethod.POST, &quot;/spittles&quot;).authenticated() .anyRequest().permitAll() 访问根页面需要”USER”角色的登录（一个字符串，可以自定义），否则会重定向到”&#x2F;login”页面 访问”&#x2F;spitter&#x2F;me”需要认证（也就是登录，但是不指定角色） “&#x2F;spittles”的POST请求需要认证 .anyRequest().permitAll()其他所有页面都可以不登录访问 https配置 123// .and()// .requiresChannel()// .antMatchers(&quot;/spitter/register&quot;).requiresSecure() 解析：针对该页面需要创建https安全通道，否则不允许通信 效果：访问ip:8080/section5/spitter/register页面时，会自动跳转至ip:8443/section5/spitter/register，而Tomcat默认不开放8443端口，所以无法访问 如何使用：复制打包的war包到Tomcat的webapps目录中，并打开conf/sever.xml配置文件 将如下代码取消注释（默认是注释状态） 1234567&lt;Connector port=&quot;8443&quot; protocol=&quot;org.apache.coyote.http11.Http11NioProtocol&quot; maxThreads=&quot;150&quot; SSLEnabled=&quot;true&quot;&gt; &lt;SSLHostConfig&gt; &lt;Certificate certificateKeystoreFile=&quot;conf/localhost-rsa.jks&quot; type=&quot;RSA&quot; /&gt; &lt;/SSLHostConfig&gt;&lt;/Connector&gt; &#x3D;&#x3D;正确方式：&#x3D;&#x3D; 在以上代码（依然保持注释）的后面加上如下配置： 12345&lt;Connector port=&quot;8443&quot; protocol=&quot;org.apache.coyote.http11.Http11NioProtocol&quot; maxThreads=&quot;150&quot; SSLEnabled=&quot;true&quot; schema=&quot;https&quot; secure=&quot;true&quot; clientAuth=&quot;false&quot; sslProtocol=&quot;TLS&quot; keystoreFile=&quot;C:\\\\key\\mytomcat.keystore&quot; keystorePass=&quot;Workflow20&quot; truststoreFile=&quot;C:\\\\key\\mytomcat.keystore&quot; truststorePass=&quot;Workflow20&quot;/&gt; keystoreFile：私钥 keystorePass：口令 truststoreFile：公钥 truststorePass：口令 跨站请求伪造（CSRF，Cross-site request forgery） 1// .and().csrf().disable() 默认是开启的，除非指定disable() 效果：防止别的网站拿到cookie后发送假请求 Postman如何使用：发送的body中使用form-data，添加字段_csrf，字段值可以用get请求原页面获取（F12搜索），其他的如username、password正常填写即可 用户账号密码 123456@Override protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123; auth .inMemoryAuthentication() .withUser(&quot;user&quot;).password(&quot;password&quot;).roles(&quot;USER&quot;); &#125; 这里是写死在内存里的账号密码，也可以用关系型数据库里的，代码如下： 12345678910111213141516@Autowiredprivate DataSource dataSource;@Overrideprotected void configure(AuthenticationManagerBuilder auth) throws Exception &#123; // auth // .inMemoryAuthentication() // .withUser(&quot;user&quot;).password(&quot;password&quot;).roles(&quot;USER&quot;); auth.jdbcAuthentication() .dataSource(dataSource) .usersByUsernameQuery( &quot;select username,password,true from Spitter where username=? &quot;) .authoritiesByUsernameQuery( &quot;select username,&#x27;ROLE_USER&#x27; from Spitter where username=?&quot;);&#125; 注：这里的dataSource已经在DataConfig中进行配置了 权限控制 JSP标签库 Thymeleaf的方言 12345&lt;dependency&gt; &lt;groupId&gt;org.thymeleaf.extras&lt;/groupId&gt; &lt;artifactId&gt;thymeleaf-extras-springsecurity3&lt;/artifactId&gt; &lt;version&gt;2.1.1.RELEASE&lt;/version&gt;&lt;/dependency&gt; templateEngine.addDialect(new SpringSecurityDialect()); 保护方法的配置方法一：Spring自带注解 创建SecuredConfig继承自GlobalMethodSecurityConfiguration并添加注解@EnableGlobalMethodSecurity(securedEnabled=true)，然后创建一个bean 代码如下： 1234567891011121314151617@Configuration@EnableGlobalMethodSecurity(securedEnabled=true)public class SecuredConfig extends GlobalMethodSecurityConfiguration &#123; @Override protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123; auth .inMemoryAuthentication() .withUser(&quot;user&quot;).password(&quot;password&quot;).roles(&quot;USER&quot;); &#125; @Bean public SpittleService spitterService() &#123; return new SecuredSpittleService(); &#125;&#125; 在bean中，对需要控制权限的方法添加注解@Secured(&#123;&quot;s1&quot;,&quot;s2&quot;...&#125;) 示例如下： 123456789public class SecuredSpittleService implements SpittleService &#123; @Override @Secured(&#123;&quot;ROLE_SPITTER&quot;, &quot;ROLE_ADMIN&quot;&#125;) public void addSpittle(Spittle spittle) &#123; System.out.println(&quot;Method was called successfully&quot;); &#125; &#125; 注意角色之间是或的关系 方法二：JSR-250 将方法一中的Config的注解换成@EnableGlobalMethodSecurity(jsr250Enabled=true) bean的注解换成@RolesAllowed(&quot;ROLE_SPITTER&quot;) 方法三：表达式驱动的注解 注解换成@EnableGlobalMethodSecurity(prePostEnabled=true) bean中的方法的注解换成@PreAuthorize(&quot;(hasRole(&#39;ROLE_SPITTER&#39;) and #spittle.text.length() le 140) or hasRole(&#39;ROLE_PREMIUM&#39;)&quot;) 其中参数的叫SpeL表达式，感兴趣可以自行搜索","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://wkxuan.cn/tags/SpringBoot/"}]},{"title":"4-Web开发框架","slug":"SpringBoot/4-Web开发框架","date":"2022-03-20T05:46:00.000Z","updated":"2022-10-20T03:04:08.707Z","comments":true,"path":"/1b49242e.html","link":"","permalink":"https://wkxuan.cn/1b49242e.html","excerpt":"","text":"MVC、控制器、视图渲染 123456&lt;springVersion&gt;4.0.7.RELEASE&lt;/springVersion&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;version&gt;$&#123;springVersion&#125;&lt;/version&gt;&lt;/dependency&gt; MVC Servlet 处理客户端请求（根据请求的URL决定将请求路由到哪个controller） Filter 过滤器 在路由之前过滤请求（可能有多个，构成一个过滤链） Handler mapping servlet通过这个来确定url与controller的映射 Controller 处理请求（可能会调用service层、dao层…） Model and logical view name service层、dao层…的返回的结果Model，再加上逻辑视图作为Controller的总的返回值给Servlet ViewResolver 结合Model和返回的视图做一个视图解析，如果解析到了某个页面，就会做Model和视图的结合，也就是渲染 View 最终渲染的结果页面 Response 携带结果返回 DispatchServlet配置前提：Servlet3规范（否则只能用web.xml进行配置） 使用：定义一个WebInitializer，让其继承AbstractAnnotationConfigDispatcherServletInitializer就可以了（可以通过@Override重写onStartup函数来自己自定义初始化Servlet。例子如下： 12345678910111213141516public class MyServletConfig implements AbstractAnnotationConfigDispatcherServletInitializer &#123; @Override public void onStartup(ServletContext servletContext) &#123; FilterRegistration.Dynamic filter = servletContext.addFilter(&quot;MyFilter&quot;, &quot;example.MyFilter&quot;); filter.addMappingForUrlPatterns(null,false,&quot;/*&quot;); Dynamic myServlet1 = servletContext.addServlet(&quot;hello1&quot;, &quot;example.MyServlet1&quot;); Dynamic myServlet2 = servletContext.addServlet(&quot;hello2&quot;, &quot;example.MyServlet2&quot;); Dynamic myServlet3 = servletContext.addServlet(&quot;hello3&quot;, &quot;example.MyServlet3&quot;); myServlet1.addMapping(&quot;/s1&quot;); myServlet2.addMapping(&quot;/s2&quot;); myServlet3.addMapping(&quot;/s3&quot;); &#125;&#125; 注：Spring本质上是找的AbstractAnnotationConfigDispatcherServletInitializer的父类接口WebApplicationInitializer，所以直接实现该接口也是可以的，只是AbstractAnnotationConfigDispatcherServletInitializer相对后者多做了一些工作（比如实现了DispatchServlet） 启用Spring MVC组件 加注解@EnableWebMvc 12345678910111213141516@EnableWebMvc@ComponentScan(&quot;spittr.web&quot;)public class WebConfig extends WebMvcConfigurerAdapter &#123; @Bean public ViewResolver viewResolver() &#123; InternalResourceViewResolver resolver = new InternalResourceViewResolver(); resolver.setPrefix(&quot;/WEB-INF/views/&quot;); resolver.setSuffix(&quot;.jsp&quot;); return resolver; &#125; @Override public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) &#123; configurer.enable(); &#125;&#125; 定义一个WebInitializer让其继承AbstractAnnotationConfigDispatcherServletInitializer并重写两个上下文： DispatcherServlet加载的应用上下文：getServletConfigClasses Web组件：控制器、视图解析器、处理器映射 ContextLoaderListerner加载的应用上下文：getRootConfigClasses 其他Bean 例如： 123456789101112131415161718public class SpitterWebInitializer extends AbstractAnnotationConfigDispatcherServletInitializer &#123; @Override protected Class&lt;?&gt;[] getRootConfigClasses() &#123; return new Class&lt;?&gt;[] &#123; RootConfig.class &#125;; &#125; @Override protected Class&lt;?&gt;[] getServletConfigClasses() &#123; return new Class&lt;?&gt;[] &#123; WebConfig.class &#125;; &#125; @Override protected String[] getServletMappings() &#123; return new String[] &#123; &quot;/&quot; &#125;; &#125;&#125; RootConfig.class： 12345678910111213@Configuration@Import(DataConfig.class)@ComponentScan(basePackages=&#123;&quot;spittr&quot;&#125;, excludeFilters=&#123; @Filter(type=FilterType.CUSTOM, value=WebPackage.class) &#125;)public class RootConfig &#123; public static class WebPackage extends RegexPatternTypeFilter &#123; public WebPackage() &#123; super(Pattern.compile(&quot;spittr\\\\.web&quot;)); &#125; &#125;&#125; DataConfig：配置H2内嵌数据库 1234567891011121314151617@Configurationpublic class DataConfig &#123; @Bean public DataSource dataSource() &#123; return new EmbeddedDatabaseBuilder() .setType(EmbeddedDatabaseType.H2) .addScript(&quot;schema.sql&quot;) .build(); &#125; @Bean public JdbcOperations jdbcTemplate(DataSource dataSource) &#123; return new JdbcTemplate(dataSource); &#125;&#125; Controller @Controller 包含@Component @RequestMapping既可以加在Controller前，也可以加载函数前 参数 查询参数（请求参数） 12@RequestMapping(&quot;/path1&quot;)public String methodA(@RequestParam(value=&quot;id&quot;, defaultValue=&quot;1&quot;) String bookId)&#123;...&#125; 请求的URL：ip:端口/path1?id=... 路径参数 12@RequestMapping(&quot;/path2/&#123;bookId&#125;&quot;)public String methodA(@PathVariable(&quot;bookId&quot;) String bookId)&#123;...&#125; 请求的URL：ip:端口/path1/bookid 表单参数 参数名与对象字段名相同 校验表单 java校验API（Java Validation API） 实现：hibernate-validator javax.validation.constraints @NotNull @Size @Valid","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://wkxuan.cn/tags/SpringBoot/"}]},{"title":"3-面向切面编程","slug":"SpringBoot/3-面向切面编程","date":"2022-03-20T05:45:00.000Z","updated":"2022-10-20T03:04:01.825Z","comments":true,"path":"/87e201b0.html","link":"","permalink":"https://wkxuan.cn/87e201b0.html","excerpt":"","text":"面向切面编程AOP 软件编程方法的发展 面向过程编程（POP，Procedure Oriented Programming) 函数，解决代码冗余 面向对象编程（OOP，Object Oriented Programming） 对象，继承解决代码重复 面向切面编程（AOP，Aspect Oriented Programming） 在不修改源码的情况下增添新的功能（动态植入） 函数式编程（FP， Functional Programming） 用一个个函数组成计算逻辑 反应式编程（Rx，Reactive programming） 多核、高并发、通过pull的方式来处理?? 另外的选择： 继承 委托 横切关注点 日志 安全 事务 缓存 AOP术语 通知（Advice）：切面做什么以及何时做 切点（Pointcut）：何处 切面（Aspect）：Advice和Pointcut的结合 连接点（Join point） 引入（introduction）：引入新的行为和状态 织入（Weaving）：切面应用到目标对象的过程 通知（Advice类型） @Before @After @AfterReturning @AfterThrowing @Around 代码依赖包 1234567891011121314151617181920212223242526272829&lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt; &lt;springVersion&gt;4.0.7.RELEASE&lt;/springVersion&gt; &lt;aspectJVersion&gt;1.7.2&lt;/aspectJVersion&gt;&lt;/properties&gt;...&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-aop&lt;/artifactId&gt; &lt;version&gt;$&#123;springVersion&#125;&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt; &lt;version&gt;$&#123;springVersion&#125;&lt;/version&gt;&lt;/dependency&gt;&lt;!-- AspectJ --&gt;&lt;dependency&gt; &lt;groupId&gt;org.aspectj&lt;/groupId&gt; &lt;artifactId&gt;aspectjrt&lt;/artifactId&gt; &lt;version&gt;$&#123;aspectJVersion&#125;&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.aspectj&lt;/groupId&gt; &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt; &lt;version&gt;$&#123;aspectJVersion&#125;&lt;/version&gt;&lt;/dependency&gt; 在Config里面创建切面类的Bean（这里是Audience） 1234@Beanpublic Audience2 audience() &#123; //定义Audience的bean return new Audience2();&#125; @EnableAspectJAutoProxy 对Config类 开启AspectJ的自动代理机制 1234@EnableAspectJAutoProxy //开启AspectJ的自动代理机制public class ConcertConfig &#123; ...&#125; 例一 123456789@Aspectpublic class Audience &#123; @Before(&quot;execution(* concert.Performance.perform( .. ))&quot;) public void silenceCellPhones() &#123; System.out.println(&quot;Silencing cell phones&quot;); &#125; ...其他函数&#125; 效果：在执行concert.Performance.perform()函数前，执行了silenceCellPhones() 切点表达式： execution(返回值 包.类.指定方法( 参数 )) [&amp;&amp;...] 返回值：*表示void？ 参数： ..表示空？ （可省略）&amp;&amp;及其之后的内容 因为实现了包.类.指定方法的类可能有很多，可以通过如下方式筛选 within(包.*)只在该包下搜索 bean(类名)只针对该bean args(参数名)在声明的方法中引入该参数，即可以引用。例如： 12@Pointcut(&quot;execution(* soundsystem.CompactDisc.playTrack( int )) &amp;&amp; args(trackNumber)&quot;)public void trackPlayed(int trackNumber) &#123;...&#125; 例二（减少切点表达式的书写）效果同例一 123456789101112@Aspectpublic class Audience1 &#123; @Pointcut(&quot;execution(* concert.Performance.perform( .. ))&quot;) public void performance() &#123; &#125; @Before(&quot;performance()&quot;) public void silenceCellPhones() &#123; System.out.println(&quot;Silencing cell phones&quot;); &#125; ...其他函数&#125; 例三（更为精简）效果同例一二 1234567891011121314151617181920@Aspectpublic class Audience2 &#123; @Pointcut(&quot;execution(* concert.Performance.perform( .. )) &amp;&amp; bean(concert2) &quot;) public void performance() &#123; &#125; @Around(&quot;performance()&quot;) public void watchPerformance(ProceedingJoinPoint joinPoint) &#123; try &#123; System.out.println(&quot;.Silencing cell phones&quot;); System.out.println(&quot;.Taking seats&quot;); joinPoint.proceed(); joinPoint.proceed(); joinPoint.proceed(); System.out.println(&quot;.CLAP CLAP CLAP!!!&quot;); &#125; catch (Throwable e) &#123; System.out.println(&quot;.Demanding a refund&quot;); &#125; &#125;&#125; 12345678910111213@Around(&quot;performance()&quot;)public void watchPerformance(ProceedingJoinPoint joinPoint) &#123; try &#123; // 代码1 效果同@Before // 代码2 效果同@Before joinPoint.proceed(); // 代码3 效果同@AfterReturning?@After? // joinPoint.proceed();可以多次执行 // 代码4 &#125; catch (Throwable e) &#123; &#125;&#125; 为基本格式 增加新的方法（引入Introduction） 123456789101112@Aspectpublic class EncoreableIntroducer &#123; @DeclareParents(value = &quot;concert.Performance+&quot;,//后面的+表示应用到**所有**实现了该接口的Bean defaultImpl = DefaultEncoreable.class) public static Encoreable encoreable; // 这是一个接口&#125;// 这是上述接口的实现类（所以总共有三个文件）public class DefaultEncoreable implements Encoreable &#123; public void performEncore() &#123; System.out.println(&quot;perform the encore!&quot;); &#125;&#125; 效果：给实现了value接口的类或对象，增加一个行为defaultImpl XML方式123456789101112131415161718192021222324252627&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans ...&gt; &lt;aop:aspectj-autoproxy/&gt; &lt;bean id=&quot;audience&quot; class=&quot;concert2.Audience&quot;/&gt; &lt;bean id=&quot;concert&quot; class=&quot;concert.Concert&quot;/&gt; &lt;aop:config&gt; &lt;aop:aspect ref=&quot;audience&quot;&gt; &lt;aop:pointcut id=&quot;performance&quot; expression=&quot;execution(* concert.Performance.perform(..))&quot;/&gt; &lt;aop:before method=&quot;silenceCellPhones&quot; pointcut-ref=&quot;performance&quot;/&gt; &lt;aop:before method=&quot;takeSeats&quot; pointcut-ref=&quot;performance&quot;/&gt; &lt;aop:after method=&quot;applause&quot; pointcut-ref=&quot;performance&quot;/&gt; &lt;aop:after-throwing method=&quot;demandRefund&quot; pointcut-ref=&quot;performance&quot;/&gt; &lt;/aop:aspect&gt; &lt;/aop:config&gt;&lt;/beans&gt;","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://wkxuan.cn/tags/SpringBoot/"}]},{"title":"2-依赖注入","slug":"SpringBoot/2-依赖注入","date":"2022-03-20T05:44:00.000Z","updated":"2022-10-20T03:03:50.235Z","comments":true,"path":"/de4e96bb.html","link":"","permalink":"https://wkxuan.cn/de4e96bb.html","excerpt":"","text":"依赖注入(Dependency Injection) Bean简单的理解：类的对象 通过依赖注入的方式来管理Bean之间的关系 Spring配置方案 自动化配置 适合可以修改源码的情况 JavaConfig 适合第三方库的调用（无需修改源码），直接在Config类中构建成员函数并加上@Bean后自己new对象就行 注意这里只会注入一个对象-&gt;单实例（即再次调用时不会再次new） 123// 这两个类都没有了@Componentpublic class CDPlayer implements MediaPlayer, BeanNameAware &#123;...&#125;public class SgtPeppers implements CompactDisc &#123;...&#125; XML配置 缺点：很难查出错误 优点：可以将【与Spring毫无关系的传统的Java代码】装配成Spring上下文中的Bean ComponentScan 1&lt;context:component-scan base-package=&quot;soundsystem&quot; /&gt; 创建Bean 12345678&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans ...&gt; &lt;bean id=&quot;compactDisc&quot; class=&quot;soundsystem.SgtPeppers&quot; /&gt; &lt;bean id=&quot;cdPlayer&quot; class=&quot;soundsystem.CDPlayer&quot;&gt; &lt;constructor-arg ref=&quot;compactDisc&quot; /&gt; &lt;/bean&gt;&lt;/beans&gt; 123&lt;bean id=&quot;xx&quot;&gt; &lt;property name=&quot;xx&quot; ref=&quot;引用的bean的id&quot;&gt; &lt;/bean&gt; &lt;!-- 通过set方法注入--&gt; 混合配置 JavaConfig中的导入 需要一个根配置RootConfig @Import(AConfig.class, ...) @ImportResource(xml文件) XML中的导入 &lt;import resources=&quot;xml文件&quot; /&gt; &lt;bean class=&quot;配置类&quot; /&gt; 知识点 @Component 对一般类 创建一个Bean（把new对象的操作交给Spring） @Autowired 对构造函数：在自己的类new对象时，自动执行该函数（需要的参数会从实现了该接口的类中寻找） 对成员变量：自动注入成员变量的对象 对setXXX()方法：同构造函数 @ComponentScan 对Config类 在哪些包下搜索Component（默认是当前包及其子包下） 参数： basePackages&#x3D;{“s1”,”s2”…}（容易写错-&gt;类型不安全） basePackagesClasses&#x3D;{A.class, B.class}：在A类和B类所在的包及其子包下搜索，不容易写错 万一A.class被删掉了？ 创建一个与A类同包的interface，替代上述A.class的位置，称为Marker Interface @ContextConfiguration 对测试类 若没有参数，且假设测试类名为TestA，则会默认到resources下搜索TestA-context.xml文件配置（约定） 参数： classes &#x3D; AConfig.class Spring会根据该配置类创建上下文环境 @Rule public final StandardOutputStreamLog log = new StandardOutputStreamLog(); 可以通过log.getLog()获取控制台输出 assertXXX()断言 @Bean 对成员函数 注入对象，是单实例的，多次调用不会注入多个，可以通过@Scope(value&#x3D;..)来指定模式","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://wkxuan.cn/tags/SpringBoot/"}]},{"title":"1-使用Idea","slug":"SpringBoot/1-使用Idea","date":"2022-03-20T05:43:36.000Z","updated":"2022-11-07T04:53:36.935Z","comments":true,"path":"/baff92e2.html","link":"","permalink":"https://wkxuan.cn/baff92e2.html","excerpt":"","text":"略","categories":[],"tags":[{"name":"Jetbrains","slug":"Jetbrains","permalink":"https://wkxuan.cn/tags/Jetbrains/"}]},{"title":"Ubuntu20.04安装docker并运行Jenkins","slug":"Ubuntu20-04安装docker并运行Jenkins","date":"2022-02-21T03:16:42.000Z","updated":"2022-11-07T04:53:10.620Z","comments":true,"path":"/94634e73.html","link":"","permalink":"https://wkxuan.cn/94634e73.html","excerpt":"傻瓜式安装步骤","text":"傻瓜式安装步骤 准备条件 maven sudo apt install maven 安装完成后通过mvn -v可以查看版本及目录，且如果服务器中没有安装过jdk，会自动安装 这种安装方式的缺点是无法指定版本，想要指定版本的可以参考：Ubuntu18.04 安装Maven 3.5.3 jdk 安装docker 删除原有docker sudo apt-get remove docker docker-engine docker.io containerd runc 安装相应的apt依赖 sudo apt-get update 123456sudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ gnupg-agent \\ software-properties-common 添加docker的官方GPG密钥 curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - 根据你不同的系统去设置一个稳定的仓库（根据你的系统选一个哦，不要每个都搞） 注：这一步我并没有执行，想要了解的可以参考：Ubuntu 20.04 安装 docker 详解 再次更新apt sudo apt-get update 安装docker sudo apt-get install docker-ce docker-ce-cli containerd.io 运行hello-world sudo docker run hello-world 添加当前用户到 docker 用户组 12345678# 列出自己的用户组，确认自己在不在 docker 组中groups# 没有则新增docker组sudo groupadd docker# 把当前用户加入到docker组中sudo gpasswd -a $&#123;USER&#125; docker# 重启docker服务sudo service docker restart 如果仍然无法直接使用docker命令，注销当前用户重新登陆即可，如果仍无法使用，建议重启。 若在某些步骤安装失败，想重新开始，则可以通过： sudo docker rmi 镜像ID 删除镜像 sudo docker rm 容器ID 删除容器 sudo docker ps -a查看当前所有的容器 sudo docker ps查看正在运行的容器 sudo docker images查看已经安装的镜像 安装Jenkins 拉取jenkins的docker镜像，这里用的是lts的长期支持版本，你可以到jenkins官网自由选择其他版本 sudo docker pull jenkins/jenkins:lts 配置宿主机映射到容器的目录，之后jenkins的一些配置文件都将会存储到该目录下，这个目录可以自己定 12sudo mkdir /home/jenkins_homesudo chown -R 1000:1000 /home/jenkins_home 运行Jenkins 12345678sudo docker run \\-d \\-p 8080:8080 \\-p 50000:50000 \\-v /home/jenkins_home:/var/jenkins_home \\-v /usr/share/maven:/usr/local/maven \\-v /etc/localtime:/etc/localtime \\--name myjenkins jenkins/jenkins:lts 参数详解： -d 后台运行镜像 -p 8080:8080 将镜像的8080端口映射到服务器的8080端口 -v 目录A:目录B 将服务器端的目录A挂载到docker中的目录B中去。如工作目录和maven目录。 -v &#x2F;etc&#x2F;localtime:&#x2F;etc&#x2F;localtime 让容器使用和服务器同样的时间设置。 –name myjenkins 意义：给容器起一个别名 容器启动后，就可以访问ip:8080看到jenkins首次运行的首页了，进入Jenkins后会要求输入管理员密码，可以通过如下方式获得 sudo cat /home/jenkins_home/secrets/initialAdminPassword","categories":[],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://wkxuan.cn/tags/Ubuntu/"},{"name":"Docker","slug":"Docker","permalink":"https://wkxuan.cn/tags/Docker/"},{"name":"Jenkins","slug":"Jenkins","permalink":"https://wkxuan.cn/tags/Jenkins/"}]},{"title":"Github做免费图床+jsdelivr加速+PicGo自动转链接配置","slug":"博客相关/Github做免费图床（jsdelivr加速）","date":"2021-10-30T11:57:22.000Z","updated":"2022-10-18T05:36:59.082Z","comments":true,"path":"/d0135132.html","link":"","permalink":"https://wkxuan.cn/d0135132.html","excerpt":"之前一直在用腾讯云的COS存储桶，虽然价格不高，但是随着时间的推移，存储量也越来越大，而且还要时不时看一看有没有欠费（不知不觉上一次不知道什么时候充的10块钱已经没了），所以为了彻底解决这个问题，最终还是回到了GitHub。","text":"之前一直在用腾讯云的COS存储桶，虽然价格不高，但是随着时间的推移，存储量也越来越大，而且还要时不时看一看有没有欠费（不知不觉上一次不知道什么时候充的10块钱已经没了），所以为了彻底解决这个问题，最终还是回到了GitHub。 好久以前的欠费通知： 收支明细（还真的在一直收费…）： 创建GitHub仓库创建一个public仓库 生成Token操作路径：Settings——Developer settings——Personal access tokens 设置版本号在仓库详情的右侧点击Create a new release， Tag选1.0就行 PicGo配置只需在最后一个设定自定义域名中填写https://cdn.jsdelivr.net/gh/你的用户名/仓库名即可使用jsdelivr加速了，是不是很简单呢？","categories":[],"tags":[{"name":"博客优化","slug":"博客优化","permalink":"https://wkxuan.cn/tags/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/"}]},{"title":"笔杆子惠存","slug":"笔杆子惠存","date":"2021-09-24T14:04:52.000Z","updated":"2022-11-07T04:52:38.458Z","comments":true,"path":"/31289570.html","link":"","permalink":"https://wkxuan.cn/31289570.html","excerpt":"","text":"笔杆子惠存词语 重要性、紧迫性、自觉性、主动性、坚定性、民族性、时代性、实践性、针对性、全局性、前瞻性、战略性、积极性、创造性、长期性、复杂性、艰巨性、鼓动性、计划性、敏锐性 法制化、规范化、制度化、程序化、集约化、正常化、有序化、智能化、优质化、常态化、科学化、年轻化、知识化、专业化 新水平、新境界、新举措、新发展、新突破、新成绩、新成效、新方法、新成果、新形势、新要求、新期待、新关系、新体制、新机制、新进展、新实践、新风貌、新高度 找准出发点、把握切入点、明确落脚点、找准落脚点、抓住切入点、把握着重点、找准切入点、把握着力点、抓好落脚点 出发点、切入点、突破点、落脚点、着眼点、结合点、关键点、着重点、着力点、根本点、支撑点 多层次、多方面、多途径、多渠道、多措施、多力量、多元素 控制力、影响力、创造力、凝聚力、战斗力、感染力、亲活力、向心力 责任感、紧迫感、危机感、认同感、荣誉感、成就感 短句- 1. 突重点，履行党建工作责任。 2. 强队伍，狠抓党员干部培养。 3. 夯基础，提升基层党建水平。 4. 抓整改，着力推进专项整治。 5. 保投入，强化党建服务保障。 6. 重落实，抓好扶贫攻坚行动。 - 1. 抓力度，领导重视到位； 2. 抓指标，目标考核到位； 3. 抓合力，综合协调到位； 4. 抓制度，责任追查到位； 5. 抓素质，队伍建设到位。 - 1. 必须始终把稳理想信念之舵不动摇； 2. 必须始终严守纪律规矩之戒不含糊； 3. 必须始终保持清正廉洁之本不偏离； 4. 必须始终夯实执政用权之基不懈怠。 - 1. 克服“华而不实”学风，锤炼求真务实作风； 2. 克服“投机取巧”学风，锤炼真抓实干作风； 3. 克服“被动应付”学风，锤炼敢于担当作风。 - 1. 做好“老树新枝”的文章，加快提升传统产业； 2. 做好“插柳成荫”的文章，积极培育新兴产业； 3. 做好“育种蹲苗”的文章，大力推进创新创业。 - 1. 心贴心交流，解决“一层纸”问题； 2. 送服务上门，解决“一厘米”问题； 3. 急群众所急，解决“一分钟”问题。 - 1. 关注“衣食住行”，抓好“基本民生”； 2. 关爱“生老病死”，保障“底线民生”； 3. 关切“安居乐业”，强化“热点民生”。","categories":[],"tags":[{"name":"fun","slug":"fun","permalink":"https://wkxuan.cn/tags/fun/"}]},{"title":"Butterfly","slug":"博客相关/Butterfly","date":"2021-04-14T07:43:51.000Z","updated":"2022-10-18T05:36:59.078Z","comments":true,"path":"/4666d1bf.html","link":"","permalink":"https://wkxuan.cn/4666d1bf.html","excerpt":"next更新了好多内容，但是因为以前配置了太多东西导致更新后页面出了部分小问题，所以换了个butterfly的主题，不过好像Sakura也不错，以后有空再看看。","text":"next更新了好多内容，但是因为以前配置了太多东西导致更新后页面出了部分小问题，所以换了个butterfly的主题，不过好像Sakura也不错，以后有空再看看。 直接按照官方文档配置就好，虽然是繁体字，但还是勉强看得懂的-&gt;Butterfly网站 需要注意的点： 安装插件1npm install hexo-renderer-pug hexo-renderer-stylus --save 主题优化（我个人参考过的文章） 作者 链接 Jerry 自定义代码配色 小嘉的部落格 关于我 Butterfly 主题的所有美化 小冰博客 电子钟 Lete 乐特 css优化 简化个人简介 有时候看着这个边框比较繁琐，想着就留一个头像+昵称就算了，不想要那个文章和标签的统计和下面的内容。 在【Follow Me】及其之下的内容都是可以在主题配置文件config.yml下的aside内将enable设为false就可以了，但是【文章】和【标签】的配置找不到，因此就想着修改源文件来达到预期的效果，下面是具体步骤： 对着hexo s后的localhost:4000网站F12调试，找到如下位置 知道了大概的位置，也就是layout、widget、card三个关键字，然后就到主题目录下去找。之后找到了butterfly\\layout\\includes\\widget下，打开card_author.pug文件，将如下部分注释掉即可。注意pug文件的注释语法，我是先将需要注释的部分向右tab了四个空格，然后在注释的，否则会导致注释部分以下的所有内容都被注释掉。 1234567891011121314151617181920if theme.aside.card_author.enable .card-widget.card-info .card-info-avatar.is-center img.avatar-img(src=url_for(theme.avatar.img) onerror=`this.onerror=null;this.src=&#x27;` + url_for(theme.error_img.flink) + `&#x27;` alt=&quot;avatar&quot;) .author-info__name= config.author .author-info__description!= theme.aside.card_author.description || config.description //- .card-info-data //- if site.posts.length //- .card-info-data-item.is-center //- a(href=url_for(config.archive_dir) + &#x27;/&#x27;) //- .headline= _p(&#x27;aside.articles&#x27;) //- .length-num= site.posts.length if site.tags.length .card-info-data-item.is-center a(href=url_for(config.tag_dir) + &#x27;/&#x27;) .headline= _p(&#x27;aside.tags&#x27;) .length-num= site.tags.length。。。省略","categories":[],"tags":[{"name":"博客优化","slug":"博客优化","permalink":"https://wkxuan.cn/tags/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/"}]},{"title":"Linux安装docker，用docker安装MySQL","slug":"Linux install docker for MySQL","date":"2021-04-09T09:45:10.000Z","updated":"2022-10-18T05:36:59.087Z","comments":true,"path":"/db2ad46c.html","link":"","permalink":"https://wkxuan.cn/db2ad46c.html","excerpt":"参考文章：Linux 安装docker，以及docker的基本操作、Linux下 docker安装mysql 8 并配置远程连接","text":"参考文章：Linux 安装docker，以及docker的基本操作、Linux下 docker安装mysql 8 并配置远程连接 关于docker的作用，可以自己去百度或者CSDN上搜索相关文章查看，这里主要记录一些过程以及问题。 安装dockerDocker要求运行在Centos 7上，要求系统为64位，系统内核版本3.10以上 uname -an查看当前系统版本 yum -y install docker 下载安装docker service docker start2启动docker服务 docker version 检查docker是否安装成功 当看到下图的信息，就是表示本机docker已经安装成功，很简单 镜像操作搜索镜像docker images II 查看下本机的是否已经有了镜像（默认是没有的） docker search XXX搜索XXX的所有镜像，还能指定具体的版本进行下载，比如：docker search Ubuntu：1.2.5.4 下载镜像docker pull docker.io/XXX 进行下载 下载到本地的镜像要比docker Hub上搜索出来的要大，因为下载过程中自动解压了，在查看镜像列表就有了刚才下载的镜像 列表包含了仓库名，版本标签，镜像ID，创建时间以及所占用的空间 删除镜像docker rmi id号 rmi $\\rightarrow$ remove id 剩下的还有很多，详细可以参看文章Linux 安装docker，以及docker的基本操作想要进一步了解请自行百度 安装MySQL 下载MySQL镜像 docker pull mysql 启动MySQL镜像 docker run --name dockermysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=mysqlpassword -d mysql –name 是镜像的别名 -p 将3306映射到3306（docker是个虚拟机有自己的端口） -e MYSQL_ROOT_PASSWORD&#x3D;mysqlpassword 设置mysql 服务器密码（后面需要，一定记住） -d 后端启动 启动的镜像名称（可以用id代替） 查询启动的镜像 docker ps 进入容器 docker exec -it dockermysql bash dockermysql是镜像的名字 ，可以用id替代 登录MySQL mysql -u root -p 然后输入上面设置的密码 设置远程访问 use mysql grant all privileges on *.* to &#39;root&#39;@&#39;%&#39;;","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://wkxuan.cn/tags/Linux/"}]},{"title":"hexo博客迁移到腾讯云服务器","slug":"博客相关/hexo博客迁移到腾讯云服务器","date":"2021-04-09T08:24:31.000Z","updated":"2022-11-07T04:48:10.208Z","comments":true,"path":"/6a20a6b8.html","link":"","permalink":"https://wkxuan.cn/6a20a6b8.html","excerpt":"昨天刚买了台服务器，今天就迫不及待地把网站备了案，（一开始客服给我打电话的时候我还以为是诈骗，误），然后在CSDN上找了些相关的教程，这篇文章就是为了记录一些相应的操作，解决搭建博客过程中遇到的一些问题，同时也可以算作是教学吧。","text":"昨天刚买了台服务器，今天就迫不及待地把网站备了案，（一开始客服给我打电话的时候我还以为是诈骗，误），然后在CSDN上找了些相关的教程，这篇文章就是为了记录一些相应的操作，解决搭建博客过程中遇到的一些问题，同时也可以算作是教学吧。 yum install 和 yum -y install的区别是：如果使用yum install xxxx，会找到安装包之后，询问你Is this OK[y&#x2F;d&#x2F;N]，需要你手动进行选择。但是如果加上参数-y，就会自动选择y，不需要你再手动选择！ 云服务器端配置 git 安装依赖库和编译工具 安装依赖库 yum -y install curl-devel expat-devel gettext-devel openssl-devel zlib-devel 安装编译工具 yum -y install gcc perl-ExtUtils-MakeMaker package 下载 git 选择一个目录来存放下载下来的 git 安装包。这里选择了&#x2F;usr&#x2F;local&#x2F;src 目录 cd /usr/local/src 官网找一个新版稳定的源码包下载到 &#x2F;usr&#x2F;local&#x2F;src文件夹里 wget https://www.kernel.org/pub/software/scm/git/git-2.16.2.tar.gz 解压编译git 在当前目录下解压 git-2.16.2.tar.gz tar -zvxf git-2.16.2.tar.gz 进入 git-2.16.2.tar.gz 目录下 cd git-2.16.2 执行编译 make all prefix=/usr/local/git 安装 git 到 &#x2F;usr&#x2F;local&#x2F;git 目录下 make install prefix=/usr/local/git 配置 git 环境变量 将 git 加入 PATH 目录中 echo &#39;export PATH=$PATH:/usr/local/git/bin&#39; &gt;&gt; /etc/bashrc 使 git 环境变量生效 source /etc/bashrc 查看git版本 git --version 如果此时能查看到 git 的版本号，说明我们已经安装成功了 创建 git 仓库，用于存放博客网站资源 在 home&#x2F;git 的目录下，创建一个名为hexoBlog的裸仓库（bare repo）。如果没有 home&#x2F;git 目录，需要先创建；然后修改目录的所有权和用户权限。 mkdir /home/git/ chown -R $USER:$USER /home/git/ chmod -R 755 /home/git/ 然后，执行如下命令.这一步主要创建一个裸的 git 仓库 cd /home/git/ git init --bare hexoBlog.git 创建一个新的 git 钩子，用于自动部署 在 &#x2F;home&#x2F;git&#x2F;hexoBlog.git 下，有一个自动生成的 hooks 文件夹。我们需要在里边新建一个新的钩子文件 post-receive。 vim /home/git/hexoBlog.git/hooks/post-receive 按 i 键进入文件的编辑模式，在该文件中添加两行代码（将下边的代码粘贴进去)，指定 Git 的工作树（源代码）和 Git 目录（配置文件等）。 git --work-tree=/home/hexoBlog --git-dir=/home/git/hexoBlog.git checkout -f 然后，按 Esc 键退出编辑模式，输入:wq 保存退出。 修改文件权限，使得其可执行。 chmod +x /home/git/hexoBlog.git/hooks/post-receive 到这里，我们的 git 仓库算是完全搭建好了。下面进行 Nginx 的配置。 云服务器端配置 Nginx 安装 Nginx yum install -y nginx 启动 Nginx service nginx start 测试 Nginx 服务器 wget http://127.0.0.1 ​ 能够正常获取以下欢迎页面说明Nginx安装成功。 测试网页是否能打开.在浏览器中输入服务器 ip 地址，就是服务器的公网 ip。 如果此时nginx安装成功但是无法访问服务器ip地址，则大概率是没有开放端口的问题，解决方案如下： /sbin/iptables -I INPUT -p tcp --dport 8000 -j ACCEPT 但是还有一个问题，你的Linux系统里可能没有安装iptables，这里说明下iptables的作用 ，此时需要安装iptables： 因为默认使用的是firewall作为防火墙，所以需要把他停掉然后装个iptable 12345systemctl stop firewalld systemctl mask firewalldyum install -y iptables yum install iptables-services 然后就有iptables文件，就可以作配置 12345开启服务 systemctl start iptables.servicesystemctl restart iptables.service // 重启防火墙使配置生效 systemctl enable iptables.service // 设置防火墙开机启动 其他命令： 检查是否安装了iptables service iptables status 安装iptables yum install -y iptables 升级iptables yum update iptables 安装iptables-services yum install iptables-services systemctl disable iptables #禁止iptables服务 systemctl stop iptables #暂停服务 systemctl enable iptables #解除禁止iptables systemctl start iptables #开启服务 更多信息请看：Linux系统对外开放端口、防火墙相关命令 最后就可以使用/sbin/iptables -I INPUT -p tcp --dport 80 -j ACCEPT来开放80端口了 注意啊，由于我们关掉了firewalld，所以之前在firewalld上开放的端口（比如3306）就默认关闭了，所以这个时候记得把上面的80改成3306再执行一遍 配置 Nginx 托管文件目录 创建 &#x2F;home&#x2F;hexoBlog目录，用于 Nginx 托管。 mkdir /home/hexoBlog/ chown -R $USER:$USER /home/hexoBlog/ chmod -R 755 /home/hexoBlog/ 查看 Nginx 的默认配置的安装位置 nginx -t 修改Nginx的默认配置 vim /etc/nginx/nginx.conf 按方向键，找到如下位置 按i键进入插入模式，将其中的 root 值改为 &#x2F;home&#x2F;hexoBlog （刚才创建的托管仓库目录）。将 server_name 值改成你的域名 123456789101112131415server &#123; listen 80 default_server; listen [::]:80 default_server; server_name _; #需要修改为自己的域名 root /usr/share/nginx/html; #需要修改为/home/hexoBlog; # Load configuration files for the default server block. include /etc/nginx/default.d/*.conf; location / &#123; &#125; error_page 404 /404.html; location = /40x.html &#123; &#125; &#125; 下图是修改后的配置： 重启 Nginx 服务 service nginx restart ![image](https://xwksir-1302576567.cos.ap-nanjing.myqcloud.com//imagesimage-20210409171628591.png) 至此，服务器端配置就结束了。接下来，就剩下本地 hexo 的配置更改了。 修改 hexo 站点配置文件 git 相关设置 打开你本地的 hexo 博客所在文件，打开站点配置文件（不是主题配置文件），做以下修改 1234deploy: type: git repo: root@你的云服务器的IP地址:/home/git/hexoBlog branch: master 在 hexo 目录下执行部署，试试看打开git bash hexo clean hexo g -d 最后，等待一会（毕竟上传也要时间的），然后随便找台电脑并在地址栏输入你的IP（或域名），如果出现如下页面，那么恭喜你，部署成功了！","categories":[],"tags":[{"name":"博客优化","slug":"博客优化","permalink":"https://wkxuan.cn/tags/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/"}]},{"title":"Linux命令","slug":"Linux命令","date":"2021-04-08T12:56:31.000Z","updated":"2022-10-18T05:36:59.091Z","comments":true,"path":"/82734d8.html","link":"","permalink":"https://wkxuan.cn/82734d8.html","excerpt":"学习过的一些Linux命令","text":"学习过的一些Linux命令 基本命令tab可以补全目录或者文件两下tab可以查看提示（或帮助） pwd 查看当前根目录 ls ls &#x2F;查看根目录下的文件或目录 ls -l 查看当前目录下的文件或目录详细信息 ls -a 查看当前目录下的所有文件或目录 ls –help 查看帮助 cd &#x2F;指定目录 切换目录 mkdir 创建文件夹 mkdir -p 创建文件夹（即使不存在） touch tmp.txt 创建文件 rm rm -r 删除目录 rm -rf 强制删除目录 rm 删除文件 rm -f 强制删除文件 cp tmp.txt test1&#x2F;test0 将文件tmp.txt移到当前目录下的test1&#x2F;tset0中 mv tmp.txt &#x2F;mnt&#x2F;xmp2.txt 将文件tmp.txt移动到与当前目录同级的mnt文件夹下并重命名为xmp2.txt ln ln text1.txt &#x2F;mnt&#x2F;text2.txt 创建text1.txt的硬链接到&#x2F;mnt下，并重命名为text2.txt ln -s text1.txt &#x2F;mnt&#x2F;text3.txt 创建text1.txt的软链接到&#x2F;mnt，并重命名为text3.txt cat cat test.txt 查看test的数据 cat -n test2.txt &gt; test2_1.txt test2_1.txt 中每一行都会加上行号 cat -b test2.txt &gt; test2_1.txt test2_1.txt 中每一行（除了空行）都会加上行号 cat test1.txt test2.txt &gt; test3.txt则是将前两者合并成后者 cat &gt; test4.txt &lt;&lt; EOF 是创建test4然后进行文本输入，当输入EOF时终止 cat &gt;&gt; test4.txt &lt;&lt; EOF 则是对已经存在的进行上述操作 head head test1.txt head -n 5 test1.txt head -n -20 test1.txt head -c 10 test1.txt 查找命令 fin &#x2F;etc -name passwd 使用find查找、etc目录下的passwd文件 which pwd 使用which查看pwd命令的路径 whereis bash 查看bash的位置 压缩文件 zip -r -q -o passwd.zip dwssap将dwssap文件压缩成passwd.zip rm -f dwssap删除文件unzip passwd.zip 解压文件 tar -cf tar.tar * 将所有文件打包成tar1.tar tar -xvf tar1.tar -C &#x2F;mnt&#x2F; 文本编辑器 打开：vi file1.txt （或vim file1.txt） 按a进行编写（i则是插入），esc退出插入模式，按:进入命令模式，:q表示退出，:wq表示保存并退出，:wq!表示强制保存退出","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://wkxuan.cn/tags/Linux/"}]},{"title":"手把手教你开发权限管理系统","slug":"手把手教你开发权限管理系统","date":"2021-04-04T06:55:09.000Z","updated":"2022-10-18T05:36:59.125Z","comments":true,"path":"/d1dceec4.html","link":"","permalink":"https://wkxuan.cn/d1dceec4.html","excerpt":"参考文本：《手把手教你开发权限管理系统》","text":"参考文本：《手把手教你开发权限管理系统》 ipad在坚果云中的一些快捷键 Ctrl+按键 描述 A 光标移到行头 E 光标移到行尾 B 上一个字符 F 下一个字符 P 光标移到相同位置的上一行 D 等同于delete H 等同于backspace T 交换当前字符与下一个字符的位置 I 插入四个空格，相当于tab C，J 回车键 O 回车键，但是光标停留在当前行 S 保存 K 删除当前光标后的所有行内字符 Z 撤回 后端数据库一些表格： 用户表sys_user 角色表sys_role 机构表sys_dept 菜单表sys_menu 用户角色表sys_user_role 角色菜单表sys_role_menu Swagger文档 pom.xml内添加swagger依赖 swagger依赖 12345678910&lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt; &lt;version&gt;2.9.2&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt; &lt;version&gt;2.9.2&lt;/version&gt;&lt;/dependency&gt; config包内添加SwaggerConfig配置类 SwaggerConfig.java 12345678910111213141516171819202122232425262728293031323334353637@Configuration@EnableSwagger2public class SwaggerConfig &#123; @Bean public Docket createRestApi()&#123; // 添加请求参数，我们这里把token作为请求头部参数传入后端 ParameterBuilder parameterBuilder = new ParameterBuilder(); List&lt;Parameter&gt; parameters = new ArrayList&lt;Parameter&gt;(); parameterBuilder.name(&quot;token&quot;).description(&quot;令牌&quot;) .modelRef(new ModelRef(&quot;string&quot;)).parameterType(&quot;header&quot;).required(false).build(); parameters.add(parameterBuilder.build()); return new Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo()).select() .apis(RequestHandlerSelectors.any()).paths(PathSelectors.any()) .build().globalOperationParameters(parameters); /** * 原先的：(就一个return） */// return new Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo())// .select()// .apis(RequestHandlerSelectors.any())// .paths(PathSelectors.any()).build(); &#125; private ApiInfo apiInfo()&#123; return new ApiInfoBuilder() .title(&quot;Swagger API Doc&quot;) .description(&quot;This is a restful api document of Swagger.&quot;) .version(&quot;1.0&quot;) .build(); &#125; /** *原先的apiInfo */// private ApiInfo apiInfo()&#123;// return new ApiInfoBuilder().build();// &#125;&#125; 应用启动：http://localhost:8080/swagger-ui.html 8080是端口号，在application.yml中配置例如：port:8080 MyBatis框架 添加mybatis-spring-boot-starter依赖 mybatis依赖 12345&lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.3.2&lt;/version&gt;&lt;/dependency&gt; config包内添加MyBatisConfig配置类 MyBatisConfig.java 123456789101112131415161718@Configuration@MapperScan(&quot;com.louis.mango.**.dao&quot;) // 扫描DAOpublic class MybatisConfig &#123; @Autowired private DataSource dataSource; @Bean public SqlSessionFactory sqlSessionFactory() throws Exception &#123; SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean(); sessionFactory.setDataSource(dataSource); sessionFactory.setTypeAliasesPackage(&quot;com.louis.mango.**.model&quot;); // 扫描Model PathMatchingResourcePatternResolver resolver = new PathMatchingResourcePatternResolver(); sessionFactory.setMapperLocations(resolver.getResources(&quot;classpath*:**/sqlmap/*.xml&quot;)); // 扫描映射文件 return sessionFactory.getObject(); &#125;&#125; 添加数据源配置 数据源配置 12345678server: port: 8080spring: datasource: driverClassName: com.mysql.cj.jdbc.Driver url: jdbc:mysql://localhost:3306/数据库名?useUnicode=true&amp;zeroDateTimeBehavior=convertToNull&amp;autoReconnect=true&amp;characterEncoding=utf-8 username: root password: root 修改启动类 MangoApplication.java 12345678@SpringBootApplication(scanBasePackages=&#123;&quot;com.louis.mango&quot;&#125;)public class MangoApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(MangoApplication.class, args); &#125;&#125; 通过MyBatis-Plus自带的代码生成器生成实体类、Mapper和XML映射文件 代码生成器 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122public class MysqlGenerator &#123; /** * &lt;p&gt; * 读取控制台内容 * &lt;/p&gt; */ public static String scanner(String tip) &#123; Scanner scanner = new Scanner(System.in); StringBuilder help = new StringBuilder(); help.append(&quot;请输入&quot; + tip + &quot;：&quot;); System.out.println(help.toString()); if (scanner.hasNext()) &#123; String ipt = scanner.next(); if (StringUtils.isNotBlank(ipt)) &#123; return ipt; &#125; &#125; throw new MybatisPlusException(&quot;请输入正确的&quot; + tip + &quot;！&quot;); &#125; public static void main(String[] args) &#123; // 代码生成器 AutoGenerator mpg = new AutoGenerator(); // 全局配置 GlobalConfig gc = new GlobalConfig(); String projectPath = System.getProperty(&quot;user.dir&quot;); gc.setOutputDir(projectPath + &quot;/src/main/java&quot;); gc.setAuthor(&quot;jobob&quot;); gc.setOpen(false); // gc.setSwagger2(true); 实体属性 Swagger2 注解 mpg.setGlobalConfig(gc); // 数据源配置 DataSourceConfig dsc = new DataSourceConfig(); dsc.setUrl(&quot;jdbc:mysql://localhost:3306/ant?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8&quot;); // dsc.setSchemaName(&quot;public&quot;); dsc.setDriverName(&quot;com.mysql.cj.jdbc.Driver&quot;); dsc.setUsername(&quot;root&quot;); dsc.setPassword(&quot;root&quot;); mpg.setDataSource(dsc); // 包配置 PackageConfig pc = new PackageConfig(); pc.setModuleName(scanner(&quot;模块名&quot;)); pc.setParent(&quot;com.baomidou.ant&quot;); mpg.setPackageInfo(pc); // 自定义配置 InjectionConfig cfg = new InjectionConfig() &#123; @Override public void initMap() &#123; // to do nothing &#125; &#125;; // 如果模板引擎是 freemarker String templatePath = &quot;/templates/mapper.xml.ftl&quot;; // 如果模板引擎是 velocity // String templatePath = &quot;/templates/mapper.xml.vm&quot;; // 自定义输出配置 List&lt;FileOutConfig&gt; focList = new ArrayList&lt;&gt;(); // 自定义配置会被优先输出 focList.add(new FileOutConfig(templatePath) &#123; @Override public String outputFile(TableInfo tableInfo) &#123; // 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！ return projectPath + &quot;/src/main/resources/mapper/&quot; + pc.getModuleName() + &quot;/&quot; + tableInfo.getEntityName() + &quot;Mapper&quot; + StringPool.DOT_XML; &#125; &#125;); /* cfg.setFileCreate(new IFileCreate() &#123; @Override public boolean isCreate(ConfigBuilder configBuilder, FileType fileType, String filePath) &#123; // 判断自定义文件夹是否需要创建 checkDir(&quot;调用默认方法创建的目录，自定义目录用&quot;); if (fileType == FileType.MAPPER) &#123; // 已经生成 mapper 文件判断存在，不想重新生成返回 false return !new File(filePath).exists(); &#125; // 允许生成模板文件 return true; &#125; &#125;); */ cfg.setFileOutConfigList(focList); mpg.setCfg(cfg); // 配置模板 TemplateConfig templateConfig = new TemplateConfig(); // 配置自定义输出模板 //指定自定义模板路径，注意不要带上.ftl/.vm, 会根据使用的模板引擎自动识别 // templateConfig.setEntity(&quot;templates/entity2.java&quot;); // templateConfig.setService(); // templateConfig.setController(); templateConfig.setXml(null); mpg.setTemplate(templateConfig); // 策略配置 StrategyConfig strategy = new StrategyConfig(); strategy.setNaming(NamingStrategy.underline_to_camel); strategy.setColumnNaming(NamingStrategy.underline_to_camel); // strategy.setSuperEntityClass(&quot;你自己的父类实体,没有就不用设置!&quot;); strategy.setEntityLombokModel(true); strategy.setRestControllerStyle(true); // 公共父类// strategy.setSuperControllerClass(&quot;你自己的父类控制器,没有就不用设置!&quot;); // 写于父类中的公共字段 strategy.setSuperEntityColumns(&quot;id&quot;); strategy.setInclude(scanner(&quot;表名，多个英文逗号分割&quot;).split(&quot;,&quot;)); strategy.setControllerMappingHyphenStyle(true); strategy.setTablePrefix(pc.getModuleName() + &quot;_&quot;); mpg.setStrategy(strategy); mpg.setTemplateEngine(new FreemarkerTemplateEngine()); mpg.execute(); &#125;&#125; 编写自定义服务接口 SysUserMapper中添加findAll()方法 12345/*** 查找所有用户* @return*/List&lt;SysUser&gt; findAll(); 在映射文件SysUserMapper.xml中添加查询方法，编写findAll的查询语句 12345&lt;select id=&quot;findAll&quot; resultMap=&quot;BaseResultMap&quot;&gt;select&lt;include refid=&quot;Base_Column_List&quot; /&gt;from sys_user&lt;/select&gt; 编写用户管理接口SysUserService，包含一个findAll()方法 12345678public interface SysUserService &#123; /** * 查找所有用户 * @return */ List&lt;SysUser&gt; findAll();&#125; 编写用户管理实现类，调用SysUserMapper中的方法完成操作 123456789@Servicepublic class SysUserServiceImpl implements SysUserService &#123; @Autowired private SysUserMapper sysUserMapper; @Override public List&lt;SysUser&gt; findAll() &#123; return sysUserMapper.findAll(); &#125;&#125; 编写用户管理RESTful接口，返回JSON数据格式，提供外部调用。被@RestController注解的接口控制器会默认使用JSON格式交互，返回JSON结果 1234567891011@RestController@RequestMapping(&quot;/sys/user&quot;)public class UserController &#123; @Autowired private IUserService iUserService; @GetMapping(&quot;/findAll&quot;) public Object findAll()&#123; return iUserService.findAll(); &#125;&#125; 最后，虽然代码编写完成了，但是因为代码自动生成的xml文件是默认不在打包范围之内的，所以要在pom.xml文件的build标签下添加resource标签的打包配置 123456789101112131415161718192021222324252627&lt;build&gt; &lt;!-- 先前存在的 --&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;!-- 打包时复制MyBatis的映射文件 --&gt; &lt;resources&gt; &lt;resource&gt; &lt;directory&gt;src/main/java&lt;/directory&gt; &lt;includes&gt; &lt;!-- 包含mapper.sys目录下所有的xml文件 --&gt; &lt;include&gt;**/mapper.sys/*.xml&lt;/include&gt; &lt;/includes&gt; &lt;filtering&gt;false&lt;/filtering&gt; &lt;/resource&gt; &lt;resource&gt; &lt;directory&gt;src/main/resources&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.*&lt;/include&gt; &lt;/includes&gt; &lt;filtering&gt;true&lt;/filtering&gt; &lt;/resource&gt; &lt;/resources&gt;&lt;/build&gt; 啊这，写了这么多可能有点乱，来稍微总结一下业务逻辑： 个人见解，不太可能正确 首先，当我们需要实现某个服务的时候，我们需要将这个服务添加到我们的接口中(service-&gt;Interface) 第二，添加完接口，我们必然需要将此功能进行实现，也就是在Interface对应的Implement中实现该方法，然而方法实现往往使用的方式是：调用Implement内mapper属性的方法 因而，我们就必须在该mapper类中实现方法，然而事实上mapper也是一个Interface，其对应的实现文件为：mapper.xml，所以最后是在dao包（java目录下或者是resources目录下）的mapper.xml文件中实现具体方法 而java目录下的xml文件是不会被打包的，因此我们需要在pom.xml文件中加入以下代码： pom.xml 123456789101112131415161718192021&lt;build&gt; &lt;!-- 其他代码 --&gt;&lt;!-- 打包时复制MyBatis的映射文件 --&gt; &lt;resources&gt; &lt;resource&gt; &lt;directory&gt;src/main/java&lt;/directory&gt; &lt;includes&gt; &lt;!-- 包含mapper.sys目录下所有的xml文件 --&gt; &lt;include&gt;**/mapper.sys/*.xml&lt;/include&gt; &lt;/includes&gt; &lt;filtering&gt;false&lt;/filtering&gt; &lt;/resource&gt; &lt;resource&gt; &lt;directory&gt;src/main/resources&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.*&lt;/include&gt; &lt;/includes&gt; &lt;filtering&gt;true&lt;/filtering&gt; &lt;/resource&gt; &lt;/resources&gt;&lt;/build&gt; 最后呢，就是在controller（或者是handler）中用@GetMapping(value=&quot;/路径&quot;)来调用该方法了。而如果要获取路径内的属性，比如说，我想通过路径查询ID为某个值的对象的全部信息，那么就可以用以下代码： GetMapping样例 1234@GetMapping(&quot;findById/&#123;id&#125;&quot;)public Object findById(@ParamVariable String id)&#123; return UserService.findById(id);&#125; Druid数据源 添加依赖 12345&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.1.10&lt;/version&gt;&lt;/dependency&gt; 注意如果后期编译运行可能会报错，缺少log4j依赖（pom.xml ）和log4j配置（resources&#x2F;log4j.properties） 添加配置 appplication.yml 1234567891011121314151617181920spring: druid: driver-class-name: com.mysql.jdbc.Driver url: jdbc:mysql://localhost:3306/数据库名?useUnicode=true&amp;zeroDateTimeBehavior=convertToNull&amp;autoReconnect=true&amp;characterEncoding=utf-8 username: root password: root filters: stat, wall, log4j, config max-active: 100 &lt;!-- 最大连接数 --&gt; initial-size: 1 &lt;!-- 初始化大小 --&gt; max-wait:60000 min-idle: 1 &lt;!-- 最小连接数 --&gt; time-between-eviction-runs-millis: 60000 &lt;!-- 间隔多久才进行一次检测，检测需要关闭的空闲链接，单位是毫秒 --&gt; min-evictable-idle-time-millis: 300000 &lt;!-- 一个连接在池中最小生存的时间，单位毫秒 --&gt; validation-query: select &#x27;x&#x27; test-while-idle: true test-on-borrow: false test-on-return: false pool-prepared-statements: true max-open-prepared-statements: 50 max-pool-prepared-statment-per-connnection-size: 20 也可以通过定制配置文件对Druid进行自定义属性配置，添加配置类DruidDataSourceProperties.java即可 配置Servlet和Filter DruidConfig.java 12345@Configuration@EnableConfigurationProperties(&#123;DruidDataSourceProperties.class&#125;)public class DruidConfig&#123; // 省略一些属性配置&#125; 查看监控 登陆界面 访问http://localhost:端口号/druid/login.html，用户名和密码在DruidConfig.java 中配置 跨域解决方案：CORS CORS实现 WebMvcConfigurer.java 1234567891011@Configurationpublic class CorsConfig implements WebMvcConfigurer&#123; @Override public void addCorsMappings(CorsRegistry registry)&#123; registry.addMapping(&quot;/**&quot;) //允许跨域访问的路径 .allowedOrigins(&quot;*&quot;) //允许跨域访问的源 .allowedMethods(&quot;POST&quot;,&quot;GET&quot;,&quot;OPTIONS&quot;,&quot;DELETE&quot;) //允许请求方法 .maxAge(168000) //预检间隔时间 .allowedHeaders(&quot;*&quot;) //允许头部设置 .allowCredentials(true); //是否发送cookie &#125; 业务功能登陆流程实现登陆验证码 添加依赖 12345&lt;dependency&gt; &lt;groupId&gt;com.github.axet&lt;/groupId&gt; &lt;artifactId&gt;kaptcha&lt;/artifactId&gt; &lt;version&gt;0.0.9&lt;/version&gt;&lt;/dependency&gt; 添加配置 KaptchaConfig.java 1234567891011121314@Configurationpublic class KaptchaConfig&#123; @Bean public DefaultKaptchar producer()&#123; Preperties properties = new Properties(); properties.put(&quot;kaptcha.border&quot;, &quot;no&quot;); properties.put(&quot;kaptcha.textproducer.font.color&quot;, &quot;black&quot;); properties.put(&quot;kaptcha.textproducer.char.spacec&quot;, &quot;5&quot;); Config config = new Config(properties); DefaultKaptchar defaultkaptcha = new DefaultKaptcha(); defaultKaptcha.setConfig(config); return defaultKaptcha; &#125;&#125; 生成代码 SysLoginController.java 新建一个控制器，提供系统登录相关的API，在其中添加验证码生成接口 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162@RestControllerpublic class SysLoginController &#123; @Autowired private Producer producer; @Autowired private SysUserService sysUserService; @Autowired private AuthenticationManager authenticationManager; @GetMapping(&quot;captcha.jpg&quot;) public void captcha(HttpServletResponse response, HttpServletRequest request) throws ServletException, IOException &#123; response.setHeader(&quot;Cache-Control&quot;, &quot;no-store, no-cache&quot;); response.setContentType(&quot;image/jpeg&quot;); // 生成文字验证码 String text = producer.createText(); // 生成图片验证码 BufferedImage image = producer.createImage(text); // 保存到验证码到 session request.getSession().setAttribute(Constants.KAPTCHA_SESSION_KEY, text); ServletOutputStream out = response.getOutputStream(); ImageIO.write(image, &quot;jpg&quot;, out); IOUtils.closeQuietly(out); &#125; /** * 登录接口 */ @PostMapping(value = &quot;/login&quot;) public HttpResult login(@RequestBody LoginBean loginBean, HttpServletRequest request) throws IOException &#123; String username = loginBean.getAccount(); String password = loginBean.getPassword(); String captcha = loginBean.getCaptcha(); // 从session中获取之前保存的验证码跟前台传来的验证码进行匹配 Object kaptcha = request.getSession().getAttribute(Constants.KAPTCHA_SESSION_KEY); if(kaptcha == null)&#123; return HttpResult.error(&quot;验证码已失效&quot;); &#125; if(!captcha.equals(kaptcha))&#123; return HttpResult.error(&quot;验证码不正确&quot;); &#125; // 用户信息 SysUser user = sysUserService.findByName(username); // 账号不存在、密码错误 if (user == null) &#123; return HttpResult.error(&quot;账号不存在&quot;); &#125; if (!PasswordUtils.matches(user.getSalt(), password, user.getPassword())) &#123; return HttpResult.error(&quot;密码不正确&quot;); &#125; // 账号锁定 if (user.getStatus() == 0) &#123; return HttpResult.error(&quot;账号已被锁定,请联系管理员&quot;); &#125; // 系统登录认证 JwtAuthenticatioToken token = SecurityUtils.login(request, username, password, authenticationManager); return HttpResult.ok(token); &#125;&#125; 接口测试： https://localhost:端口号/swagger-ui.html Spring Security 添加Security和JWT依赖包 1234567891011&lt;!-- spring security --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!-- jwt --&gt;&lt;dependency&gt; &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt; &lt;artifactId&gt;jjwt&lt;/artifactId&gt; &lt;version&gt;0.9.1&lt;/version&gt;&lt;/dependency&gt; 添加配置 主要是进行一些安全相关的配置，比如权限URL匹配策略，认证过滤器设置、定制身份验证组件、开启权限认证注解 WebSecurityConfig 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647@Configuration@EnableWebSecurity // 开启Spring Security @EnableGlobalMethodSecurity(prePostEnabled = true) // 开启权限注解，如：@PreAuthorize注解public class WebSecurityConfig extends WebSecurityConfigurerAdapter &#123; @Autowired private UserDetailsService userDetailsService; @Override public void configure(AuthenticationManagerBuilder auth) throws Exception &#123; // 使用自定义身份验证组件 auth.authenticationProvider(new JwtAuthenticationProvider(userDetailsService)); &#125; @Override protected void configure(HttpSecurity http) throws Exception &#123; // 禁用 csrf, 由于使用的是JWT，我们这里不需要csrf http.cors().and().csrf().disable() .authorizeRequests() // 跨域预检请求 .antMatchers(HttpMethod.OPTIONS, &quot;/**&quot;).permitAll() // web jars .antMatchers(&quot;/webjars/**&quot;).permitAll() // 查看SQL监控（druid） .antMatchers(&quot;/druid/**&quot;).permitAll() // 首页和登录页面 .antMatchers(&quot;/&quot;).permitAll() .antMatchers(&quot;/login&quot;).permitAll() // swagger .antMatchers(&quot;/swagger-ui.html&quot;).permitAll() .antMatchers(&quot;/swagger-resources/**&quot;).permitAll() .antMatchers(&quot;/v2/api-docs&quot;).permitAll() .antMatchers(&quot;/webjars/springfox-swagger-ui/**&quot;).permitAll() // 验证码 .antMatchers(&quot;/captcha.jpg**&quot;).permitAll() // 服务监控 .antMatchers(&quot;/actuator/**&quot;).permitAll() // 其他所有请求需要身份认证 .anyRequest().authenticated(); // 退出登录处理器 http.logout().logoutSuccessHandler(new HttpStatusReturningLogoutSuccessHandler()); // token验证过滤器 http.addFilterBefore(new JwtAuthenticationFilter(authenticationManager()), UsernamePasswordAuthenticationFilter.class); &#125; @Bean @Override public AuthenticationManager authenticationManager() throws Exception &#123; return super.authenticationManager(); &#125;&#125; 登录认证过滤器 登录认证过滤器负责登录认证时检查并生产令牌保存到上下文，接口权限认证过程时，系统从上下文获取令牌校验接口访问权限 JwtAuthenticationFilter.java∈security 1234567891011121314public class JwtAuthenticationFilter extends BasicAuthenticationFilter &#123; @Autowired public JwtAuthenticationFilter(AuthenticationManager authenticationManager) &#123; super(authenticationManager); &#125; @Override protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException &#123; // 获取token, 并检查登录状态 SecurityUtils.checkAuthentication(request); chain.doFilter(request, response); &#125; SecurityUtils∈utils，负责验证逻辑-&gt;checkAuthentication 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071public class SecurityUtils &#123; /** * 系统登录认证 * @param request * @param username * @param password * @param authenticationManager * @return */ public static JwtAuthenticatioToken login(HttpServletRequest request, String username, String password, AuthenticationManager authenticationManager) &#123; JwtAuthenticatioToken token = new JwtAuthenticatioToken(username, password); token.setDetails(new WebAuthenticationDetailsSource().buildDetails(request)); // 执行登录认证过程 Authentication authentication = authenticationManager.authenticate(token); // 认证成功存储认证信息到上下文 SecurityContextHolder.getContext().setAuthentication(authentication); // 生成令牌并返回给客户端 token.setToken(JwtTokenUtils.generateToken(authentication)); return token; &#125; /** * 获取令牌进行认证 * @param request */ public static void checkAuthentication(HttpServletRequest request) &#123; // 获取令牌并根据令牌获取登录认证信息 Authentication authentication = JwtTokenUtils.getAuthenticationeFromToken(request); // 设置登录认证信息到上下文 SecurityContextHolder.getContext().setAuthentication(authentication); &#125; /** * 获取当前用户名 * @return */ public static String getUsername() &#123; String username = null; Authentication authentication = getAuthentication(); if(authentication != null) &#123; Object principal = authentication.getPrincipal(); if(principal != null &amp;&amp; principal instanceof UserDetails) &#123; username = ((UserDetails) principal).getUsername(); &#125; &#125; return username; &#125; /** * 获取用户名 * @return */ public static String getUsername(Authentication authentication) &#123; String username = null; if(authentication != null) &#123; Object principal = authentication.getPrincipal(); if(principal != null &amp;&amp; principal instanceof UserDetails) &#123; username = ((UserDetails) principal).getUsername(); &#125; &#125; return username; &#125; /** * 获取当前登录信息 * @return */ public static Authentication getAuthentication() &#123; if(SecurityContextHolder.getContext() == null) &#123; return null; &#125; Authentication authentication = SecurityContextHolder.getContext().getAuthentication(); return authentication; &#125;&#125; JwtTokenUtils∈utils 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177public class JwtTokenUtils implements Serializable &#123; private static final long serialVersionUID = 1L; /** * 用户名称 */ private static final String USERNAME = Claims.SUBJECT; /** * 创建时间 */ private static final String CREATED = &quot;created&quot;; /** * 权限列表 */ private static final String AUTHORITIES = &quot;authorities&quot;; /** * 密钥 */ private static final String SECRET = &quot;abcdefgh&quot;; /** * 有效期12小时 */ private static final long EXPIRE_TIME = 12 * 60 * 60 * 1000; /** * 生成令牌 * * @param userDetails 用户 * @return 令牌 */ public static String generateToken(Authentication authentication) &#123; Map&lt;String, Object&gt; claims = new HashMap&lt;&gt;(3); claims.put(USERNAME, SecurityUtils.getUsername(authentication)); claims.put(CREATED, new Date()); claims.put(AUTHORITIES, authentication.getAuthorities()); return generateToken(claims); &#125; /** * 从数据声明生成令牌 * * @param claims 数据声明 * @return 令牌 */ private static String generateToken(Map&lt;String, Object&gt; claims) &#123; Date expirationDate = new Date(System.currentTimeMillis() + EXPIRE_TIME); return Jwts.builder().setClaims(claims).setExpiration(expirationDate).signWith(SignatureAlgorithm.HS512, SECRET).compact(); &#125; /** * 从令牌中获取用户名 * * @param token 令牌 * @return 用户名 */ public static String getUsernameFromToken(String token) &#123; String username; try &#123; Claims claims = getClaimsFromToken(token); username = claims.getSubject(); &#125; catch (Exception e) &#123; username = null; &#125; return username; &#125; /** * 根据请求令牌获取登录认证信息 * @param token 令牌 * @return 用户名 */ public static Authentication getAuthenticationeFromToken(HttpServletRequest request) &#123; Authentication authentication = null; // 获取请求携带的令牌 String token = JwtTokenUtils.getToken(request); if(token != null) &#123; // 请求令牌不能为空 if(SecurityUtils.getAuthentication() == null) &#123; // 上下文中Authentication为空 Claims claims = getClaimsFromToken(token); if(claims == null) &#123; return null; &#125; String username = claims.getSubject(); if(username == null) &#123; return null; &#125; if(isTokenExpired(token)) &#123; return null; &#125; Object authors = claims.get(AUTHORITIES); List&lt;GrantedAuthority&gt; authorities = new ArrayList&lt;GrantedAuthority&gt;(); if (authors != null &amp;&amp; authors instanceof List) &#123; for (Object object : (List) authors) &#123; authorities.add(new GrantedAuthorityImpl((String) ((Map) object).get(&quot;authority&quot;))); &#125; &#125; authentication = new JwtAuthenticatioToken(username, null, authorities, token); &#125; else &#123; if(validateToken(token, SecurityUtils.getUsername())) &#123; // 如果上下文中Authentication非空，且请求令牌合法，直接返回当前登录认证信息 authentication = SecurityUtils.getAuthentication(); &#125; &#125; &#125; return authentication; &#125; /** * 从令牌中获取数据声明 * * @param token 令牌 * @return 数据声明 */ private static Claims getClaimsFromToken(String token) &#123; Claims claims; try &#123; claims = Jwts.parser().setSigningKey(SECRET).parseClaimsJws(token).getBody(); &#125; catch (Exception e) &#123; claims = null; &#125; return claims; &#125; /** * 验证令牌 * @param token * @param username * @return */ public static Boolean validateToken(String token, String username) &#123; String userName = getUsernameFromToken(token); return (userName.equals(username) &amp;&amp; !isTokenExpired(token)); &#125; /** * 刷新令牌 * @param token * @return */ public static String refreshToken(String token) &#123; String refreshedToken; try &#123; Claims claims = getClaimsFromToken(token); claims.put(CREATED, new Date()); refreshedToken = generateToken(claims); &#125; catch (Exception e) &#123; refreshedToken = null; &#125; return refreshedToken; &#125; /** * 判断令牌是否过期 * * @param token 令牌 * @return 是否过期 */ public static Boolean isTokenExpired(String token) &#123; try &#123; Claims claims = getClaimsFromToken(token); Date expiration = claims.getExpiration(); return expiration.before(new Date()); &#125; catch (Exception e) &#123; return false; &#125; &#125; /** * 获取请求token * @param request * @return */ public static String getToken(HttpServletRequest request) &#123; String token = request.getHeader(&quot;Authorization&quot;); String tokenHead = &quot;Bearer &quot;; if(token == null) &#123; token = request.getHeader(&quot;token&quot;); &#125; else if(token.contains(tokenHead))&#123; token = token.substring(tokenHead.length()); &#125; if(&quot;&quot;.equals(token)) &#123; token = null; &#125; return token; &#125;&#125; mysql-&gt;数据备份还原Spring boot Admin服务注册（Consul）-&gt;服务、客户端的注册服务消费（Ribbon、Feign）服务熔断（Hysyrix、Turbine）服务网关（Zuul）实现智能路由，提供API网关链路追踪（Sleuth、ZipKin）配置中心（Config、Bus）通过Spring Cloud Config实现分布式配置中心 前端","categories":[],"tags":[{"name":"项目实战","slug":"项目实战","permalink":"https://wkxuan.cn/tags/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"}]},{"title":"大物笔记","slug":"大学课程/大学物理","date":"2021-01-10T03:32:54.000Z","updated":"2022-11-07T04:52:23.600Z","comments":true,"path":"/b1730236.html","link":"","permalink":"https://wkxuan.cn/b1730236.html","excerpt":"大学物理笔记","text":"大学物理笔记 大物笔记-精简、精简、再精简.pdf 大物——错题本||好题本.pdf","categories":[],"tags":[{"name":"校内课程","slug":"校内课程","permalink":"https://wkxuan.cn/tags/%E6%A0%A1%E5%86%85%E8%AF%BE%E7%A8%8B/"}]},{"title":"离散数学","slug":"大学课程/离散数学","date":"2021-01-09T12:54:06.000Z","updated":"2022-11-07T04:52:21.376Z","comments":true,"path":"/3fb56f9d.html","link":"","permalink":"https://wkxuan.cn/3fb56f9d.html","excerpt":"离散数学的考试纲要","text":"离散数学的考试纲要 第一章 命题逻辑 命题符号化 命题公式、等值演算、判断永真式 求 $主析取范式和极小项\\Rightarrow \\vee$ $主合取范式和成假赋值\\Rightarrow \\wedge$ 推理理论（构造证明） 附加、化简 假言推理、拒取式 析取三段论、假言三段论 等价三段论、构造性二难 第二章 一阶逻辑 带谓词的命题符号化 谓词公式相关题（二元谓词） 带量词的谓词表达式 谓词公式判断自由&#x2F;约束出现 函数+谓词+量词判断真假 第三章 集合 幂集和集合元素的对应关系 欧拉函数、包含排斥原理 第四章 二元关系和函数 关系的运算 关系的性质（求闭包） 证明偏序 哈斯图 求二元关系的逆、补集 关系的矩阵表示 第五章 图的基本概念 点的度数、同构、桥的概念 平凡图、n阶无向完全图 $握手定理\\sum_{i&#x3D;1}^{n}d(v_i) &#x3D; 2m$ 关键路径 第六章 特殊的图 欧拉图、平面图、哈密顿图的判断方法： 欧拉图： 无奇度顶点 平面图：若能将无向图 G&#x3D;(V,E) 画在平面上使得任意两条无重合顶点的边不相交，则称G是平面图。 哈密顿图： 无“鱼嘴”型构造 任意不相邻顶点度数之和大于等于n 图的应用 欧拉公式 第七章 树 树的画法 树的先、中、后根遍历 图删边变成树 带权图的最小生成树 关于树的一些定理： 连通且不含回路 m&#x3D;n-1 两点之间有路径且唯一 $加边\\Rightarrow初级回路$ $删边\\Rightarrow桥的定义$ 第九章 代数系统 可结合运算的判断 群的定理 $\\forall x \\in G，(x^{-1})^{-1} &#x3D; x$ $\\forall x，y \\in G，(xy)^{-1}&#x3D;y^{-1}x^{-1}$ $\\forall x \\in G，x^{m}x^{n}&#x3D;x^{m+n}，m、n是整数$ $\\forall x \\in G，(x^{m})^{n}&#x3D;x^{mn}，m、n是整数$ 求幺元、零元、逆元 关于环\\整环\\除环的定义 注意整环除环都是针对乘法而言的 证明P209定理9.8，注意证明顺序： 含幺 可逆 封闭 课后习题P227 9.16、9.20、9.21、9.27四选二 最后，这里是pdf格式的手写版 考试例题涉及知识点总结.pdf 还有课后习题（不全）课后习题.pdf","categories":[],"tags":[{"name":"校内课程","slug":"校内课程","permalink":"https://wkxuan.cn/tags/%E6%A0%A1%E5%86%85%E8%AF%BE%E7%A8%8B/"}]},{"title":"SpringBot+Vue前后端分离开发","slug":"SpringBoot+Vue前后端分离开发","date":"2021-01-08T15:47:21.000Z","updated":"2022-10-18T05:36:59.095Z","comments":true,"path":"/b1de6666.html","link":"","permalink":"https://wkxuan.cn/b1de6666.html","excerpt":"顺着b站的一个视频（链接在这）照猫画虎地写了个只能在本地运行的小程序","text":"顺着b站的一个视频（链接在这）照猫画虎地写了个只能在本地运行的小程序 springboot的创建以及配置 将application.properties改为application.yml并改为以下内容 config中是解决跨域问题的代码（我也看不懂），具体解决了Vue前端无法访问后端8181端口内容的问题 controller中是功能实现 entity中是数据库实体，具体要根据数据库的表中内容来写 repository中是仓库（接口） 主方法，不需要更改 test是一些测试，可要可不要。target则是打包后的程序（可以部署） Vue前端编写 先看左侧的plugins：axios用来连接后端，element则是饿了么的ui，（这两者都是一开始没有的，在安装后被自动导入了的） 都是通过npm install XXX --save安装的 ​ &#x3D;&gt;简写：npm i XXX -S （注意S大写） App.vue即主窗口，因为Vue的特点就是所有页面都在一个窗体显示，而APP窗体则是最外层的框架（无法被覆盖，一直存在） router的index.js中则是左侧菜单栏（在APP.vue中被遍历）的具体内容 views中的文件则是实现具体功能的前端页面： template中是页面的内容编写 script中是页面各个item的功能绑定 最后，也是暂时没试验的，就是项目的部署，在书上看到的具体步骤是： 用npm run build将Vue前端打包，会得到一个index.html和dist文件夹 将index.html和dist文件夹放到springboot项目的static文件夹下，然后再将springboot项目打包，得到一个target文件夹 最后将target文件部署就可以了。","categories":[],"tags":[{"name":"项目实战","slug":"项目实战","permalink":"https://wkxuan.cn/tags/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"}]},{"title":"PicGo+腾讯云COS=图床","slug":"博客相关/PicGo+腾讯云COS=图床+封面设置","date":"2021-01-04T02:12:31.000Z","updated":"2022-11-07T04:48:06.652Z","comments":true,"path":"/2295692c.html","link":"","permalink":"https://wkxuan.cn/2295692c.html","excerpt":"使用腾讯云COS（对象存储）做了个图床，方便日后使用","text":"使用腾讯云COS（对象存储）做了个图床，方便日后使用 封面 先讲封面设置吧，直接在tags下面加上 123photos: - http://bruce.u.qiniudn.com/2013/11/27/reading/photos-0.jpg - 其他链接地址 如图所示： 就ok了 不过做出来的效果和我想象中的不太一样，淦 图床 下载PicGo 下载链接](https://cowtransfer.com/s/05edb26a1f224b)（提取码565804） 在腾讯云开启对象存储并购买一定时限，然后创建一个存储桶，需要注意的是存储桶的访问权限需要是公有读私有写 在PicGo配置腾讯云图床 PicGo官方教程 按照这个配置好PicGo就行了，过程还是蛮详细的 题外话，“编辑”——“拼写检查”——“不使用拼写检查” 如果上传图片失败，就在设置中关闭server 一般这时候就是可以正常使用上传了。但是需要注意的是，如果你也用了Typora来写markdown笔记，那你就会发现，Typora没有办法与PicGo联通的，需要将PicGo的Server设置打开并将端口设为36677","categories":[],"tags":[{"name":"博客优化","slug":"博客优化","permalink":"https://wkxuan.cn/tags/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/"}]},{"title":"我心中的第四次工业革命/诺贝尔奖","slug":"大学课程/我心中的第四次工业革命-诺贝尔奖","date":"2020-12-30T08:49:00.000Z","updated":"2022-11-07T04:52:14.536Z","comments":true,"path":"/28f91a52.html","link":"","permalink":"https://wkxuan.cn/28f91a52.html","excerpt":"","text":"这里必须有些东西 第四次工业革命，听起来很远的样子。这个“很远”，是我们目前距离未来第四次的远，也是对于“工业革命”的认知的远。 想了很久，也想不通所谓的第四次工业革命能给我们带来什么样的影响。其中最为大众所关心的莫过于自动驾驶了。今天我就来谈一谈我心中的“无人驾驶”，以及我对它未来的一些看法。 无人驾驶的历史 而当我们回溯说人类对于无人驾驶的一个梦想，其实它可以追溯到非常久远的年代，比方说在《三国演义》中，诸葛亮就发明了一个东西叫做木牛流马。 古代：木牛流马 近代：具象化地去描述无人驾驶：1939年的纽约世界博览会 通用公司：没有司机，没有方向盘，有人在休息，有人在阅读 无线电、地下电磁线圈：林肯街区铺设了几百米。 缺点：成本太高 80年代卡梅基大学NavLab no hands across America 98%智能，2%人工 2004、2005、2007 DARPA（美国国防部）举办了三届比赛，在沙漠的公路里（有各种情景） 第一届无人完成 第二届有五支队伍完成了 第一：斯坦福大学，负责人成了谷歌无人车第一代负责人 第一：CMU大学，负责人成了第二代负责人 第三届：从偏静态场景转向动态场景：在废弃的军用场地模拟了一个偏真实路况 这三届比赛，对于无人车能做什么，以及无人车未来的整个畅想，有了一个更为完善的雏形。 如果你觉得你完不成，你一定有个非常明确的理由告诉我，你到底哪里完不成？ 他实在想不出一个具体的理由说为什么不行，他只是觉得这个问题太难了。即使只有10%我们可能完成的概率，那我也觉得这个值得我们投入所有的精力去把这件事情做好。 今天的无人驾驶 末端场景：高速公路、城市道路 距离商用还有5-10年的距离 安全性的考虑等等 目前的水准跑一万多英里可能会出一次事故，人类：20万 L0:卡尔本茨第一代无人驾驶：没有任何的辅助驾驶的功能 L1、L2(hands off)：市面上的大部分车，但是责任的主体还是人 L3：主体变成双主体：根据具体车况来进行判断选择，而且驾驶权的交接需要在几秒钟内完成 L4：在一定条件下不需要人类干预可以完成任务 L5：不需要人类干预 难点： 结构化场景 非结构化场景 技术它本身具有技术发展的规律，它不以我们怎么对待它发生变化，今天我们可能对它一段时间内很悲观，但是它的技术仍在不断地演进；也许有一段时间我们对它非常乐观，但是事实上它也需要很多时间去沉淀 2000年，即使是最疯狂的一个梦想家，可能也想象不到互联网能够发展成今天的一个状态。 实体货币 有选择是快乐的根源 每一次技术的革命都会带来这样的一些担忧（失业） 第一次工业革命：珍妮纺织机 结果：一堆工人把它砸了 所有的工业革命是让我们的生活更好还是更糟？我们发展技术是为了将自己的双手双脚、把我们的脑袋解放出来去从事一些更有创造性的工作。","categories":[],"tags":[{"name":"校内课程","slug":"校内课程","permalink":"https://wkxuan.cn/tags/%E6%A0%A1%E5%86%85%E8%AF%BE%E7%A8%8B/"}],"author":"多好OvO"},{"title":"一些有趣的文案","slug":"一些有趣的文案","date":"2020-12-28T01:01:18.000Z","updated":"2022-11-07T04:52:45.961Z","comments":true,"path":"/71f64761.html","link":"","permalink":"https://wkxuan.cn/71f64761.html","excerpt":"RTFSC(Read the fucking source code)","text":"RTFSC(Read the fucking source code) 尝试了一下用图片做封面，效果不太理想，还得找些大小合适的图片才行“ 最后说点题外话，关于求助这件事，其实很多时候看源代码或者帮助文档能解决我们差不多很多问题，如果实在没有，一般你遇到的问题别人可能也遇到过，善用搜索引擎能解决所有问题，之前看到一个说法:普通程序员 + google &#x3D; 超级程序员。所以在平时要养成一些习惯，仔细阅读帮助文档，阅读源码，善用搜索引擎，再实在没辙了再上论坛提问。 下面是经常见到的在一些问答网站回答的一些缩写，我觉得很有趣也很有用，在此将其列举出来： RTFSC(Read the fucking source code) RTFM(Read the fucking manual) UTFH (“Use The Fucking Help”) STFW (“Search The Fucking Web”) STFG (“Search The Fucking Google” or “Search The Fantastic Google”) GIYF (“Google Is Your Friend”) JFGI (“Just Fucking Google It”) UTSL (“Use The Source Luke”—alternately, RTFS) RTFA (“Read The Fucking Article”—common on news forums such as Fark.com[3] and Slashdot) RTFE (“Read The Fucking Email”) RTFC (“Read The Fucking Code,” or “Reboot The Fucking Computer”) RTFQ (“Read The Fucking Question”) LMGTFY (“Let Me Google That For You”) WIDGI (“When In Doubt Google It” - Also occasionally ‘WIDGIT’) FIOTI (“Find It On The Internet”) 通常，给出这些答案的人已经通过这些办法找到了解决问题的关键，正在一边看一边敲键盘。这些回复意味着他认为：第一，你要的信息很容易找到。第二，自已找 要比别人喂到嘴里能学得更多。你不应该觉得这样就被冒犯了，按黑客的标准，他没有不理你就是在向你表示某种尊敬，你反而应该感谢他热切地想帮助你。“","categories":[],"tags":[{"name":"fun","slug":"fun","permalink":"https://wkxuan.cn/tags/fun/"}]},{"title":"HCIA-Kunpeng Application Developer 华为认证鲲鹏应用开发工程师在线课程 测一测答案","slug":"没啥用/HCIA-Kunpeng-Application-Developer-华为认证鲲鹏应用开发工程师在线课程-测一测答案","date":"2020-12-18T13:45:47.000Z","updated":"2022-10-18T05:36:59.086Z","comments":true,"path":"/381548ed.html","link":"","permalink":"https://wkxuan.cn/381548ed.html","excerpt":"手动复制粘贴的","text":"手动复制粘贴的 第一章 单选题： 1. 以下不属于鲲鹏920处理器特点的是？ 多业务场景化 多核高并发 统一达芬奇架构和指令集 兼容ARM生态 答案：C 2. 鲲鹏伙伴生态计划不包含以下哪个子计划？ 凌云伙伴计划 展翅伙伴计划 飞腾伙伴计划 智数伙伴计划 答案：C 多选题： 3. 关于ARM架构的特点，以下描述正确的是？ 支持64位指令集，能很好的兼容从IOT、终端到云端的各类应用场景。 采用RISC指令集，指令长度固定，寻址方式灵活简单，执行效率高。 大量使用寄存器，大多数数据操作都在寄存器中完成，指令执行速度更快。 在移动端领域属于新进入者，其生态仍处于快速发展阶段。 答案：ABC 4. 以下属于华为鲲鹏处理器技术创新的是？ 自研片间支持2路/4路互联 自研多种硬件协加速引擎 自研指令集架构 自研CPU内核 答案：ABD 判断题： 5. 如果有服务器厂商想生产鲲鹏服务器，只需要向华为购买鲲鹏处理器芯片即可，其他部件可以自己生产制造。 答案：错误 第二章 单选题： 1. 以下哪个是华为鲲鹏分析扫描工具的功能特性？（ ） 提供代码总行数 提供C/C++代码移植修改建议 提供Java/Python代码移植修改建议 向用户提供软件移植报告，提供移植工作量评估 正确 多选题： 1.为什么x86架构处理器上的软件在鲲鹏处理器使用时需要移植？（ ） 两种处理器的指令集不同 源代码需要按照目标处理的指令集编译成指令才能运行 编译型语言由编译器静态编译成指令和数据 解释型语言由语言的虚拟机在运行时将源码/字节码编译成指令和数据 答案：D 2.华为鲲鹏代码迁移工具适用于以下哪些类型的应用程序？（ ） C/C++ Java 汇编 Python 答案：AC 3.华为鲲鹏代码迁移工具能够提供（ ）方面的移植评估结果。 扫描源码中有多少个安装包 扫描源码中有多少可以移植的依赖库SO文件 扫描源码中有多少行可以移植的C/C++代码、汇编代码 预估移植所需的工作量 答案：ABC 4.关于执行命令“docker ps -a”后，显示的标题含义描述，正确的是？（） CONTAINER ID:容器的唯一表示ID IMAGE:创建容器时使用的镜像 COMMAND: 启动容器时运行的命令 CREATED:创建容器的时间 答案：ABCD 5. 关于Dockerfile的参数说明正确的是？ FROM是基于哪个镜像创建新镜像 WORKDIR是切换目录用的 VOLUME告诉容器在运行时要监听的端口 CMD用于容器启动时指定的服务 答案：ABD 第三章 单选题： 1. 以下哪个工具可以用查看于Linux操作系统的网络性能？ top iostat ethtool 正确 numactl 2. 关于以下测试命令，哪个说法是错误的？ “sysbench /usr/local/share/sysbench/oltp_read_write.lua --mysql-host=127.0.0.1 --mysql-port=3306 --mysql-user=root --mysql-password=123456 --mysql-db=dbtest --db-driver=mysql --tables=1 --table-size=10000 --report-interval=30 --threads=1 --time=30 run” “mysql-password&quot;参数后需要配置访问数据库的密码 “mysql-db=dbtest“表示创建一个名为dbtest的数据库 正确 “mysql-user=root”是指使用root用户访问数据库 “mysql-host=127.0.0.1”是指数据库和测试工具部署在同一个主机上 多选题： 3. 以下哪些是软件性能测试的主要目的？ 评估软件系统能力 评估软件系统抗压能力 评估软件系统耐久性能力 评估软件系统易用程度 abc 4. 以下哪些工具可以用于测试web服务器的性能？ httpperf MaxQ sysbench pgbench ab 判断题： 5. LoadRunner的性能测试过程包含六个步骤，它们分别是性能需求测试设计，测试计划，创建VU脚本，创建测试场景，运行测试场景，测试结果分析。 正确 第四章 单选题： 1. 某客户是国家保密单位，要求全部硬件使用国产，且不能与互联网相连，在搭建应用开发环境时，你推荐该用户使用哪种方式？ 鲲鹏云服务器 Taishan物理服务器 正确 x86交叉环境编译 x86云服务器 2. 工程师A负责公司网站的维护，网站平时的访问量比较稳定，但是每年的双十一期间会有大量的访问，这期间需要对前端服务器进行扩容，他采用以下哪种计费方式比较划算可靠？ 按需计费 正确 包年/包月 竞价计费 弹性计费 3. 某工程师在华为云上购买了一台ECS，下列哪个基本配置是非必选项？ 规格 云服务器名称 云服务器组 正确 网络 多选题： 4. 华为云中，云服务器镜像的类型有哪些？ 公共镜像 私有镜像 共享镜像 市场镜像 行业镜像 混合镜像 abcd 判断题： 5. 在华为云上，每台云服务器都需要绑定一个弹性公网IP。 错误 第五章 单选题： 1. 以下哪个命名可以用来解压Dependency-advisor-Kunpeng-linux-2.1.1.SPC100.tar.gz软件包？ tar Dependency-advisor-Kunpeng-linux-2.1.1.SPC100.tar.gz tar -xvf Dependency-advisor-Kunpeng-linux-2.1.1.SPC100.tar.gz tar -xjvf Dependency-advisor-Kunpeng-linux-2.1.1.SPC100.tar.gz tar -zxvf Dependency-advisor-Kunpeng-linux-2.1.1.SPC100.tar.gz D 2. 以下哪个命令可以用来安装以web方式访问Portind advisor工具？ sh install.sh web sh install.sh cli sh install.sh A 多选题： 3. 使用Dependency Advisor工具对源码进行分析时，以下哪些是必填参数？ 软件的存放路径 编译器的版本 目标系统操作系统的版本 构建工具类型 ABCD 4. 关于PostgreSQL编译安装命令，以下哪些说法是正确的？ make -j 4用于编译源程序 make -j 4用于安装编译后的程序 make install用于编译源程序 make install用于安装编译后的程序 AD 判断题： 5. scp -r root@192.168.0.1:/opt/portadv/portadmin/postgresql-11.3 /home/”该命令可以将IP地址为192.168.0.1的主机/opt/portadv/portadmin/postgresql-11.3路径下的所有文件复制到当前主机的home目录下。 正确 第六章 单选题： 1. 鲲鹏HPC解决方案中，低能耗的优势是如何实现的？ 可用于超级计算机的建设 芯片使用的指令集以低能耗为首要目标 正确 在微架构中添加了提高性能的设计 可以提供多元化的算力 2. 以下哪个选项是大数据2.0时代的特点？ 单一的批处理 融合计算 正确 认知计算 情感认知 3. 基于鲲鹏的云手机，最大的优势是哪个？ 使用方便 端云同构 正确 应用广泛 计费灵活 多选题： 4. 鲲鹏大数据解决方案的优势有哪些？ 国产化 高性能 生态丰富 平滑扩容 易推广 安全加解密 abcdf 判断题： 5. 鲲鹏云手机可以用来做APP仿真测试。 正确 第七章 单选题： 1. 哪个信息可以在鲲鹏社区获取到？ 用户联系方式 技术支持工程师的联系方式 正确 openEuler的源代码 ARM v8指令集 2. 云端实验室在鲲鹏社区的哪个模块下？ 鲲鹏软件栈 文档中心 在线课程 正确 鲲鹏直播 多选题： 3. 在鲲鹏社区中，获取技术支持的方式有哪些？ 400电话 鲲鹏文档中心 鲲鹏专家在线 鲲鹏小智 bcd 4. 在鲲鹏凌云伙伴计划中，华为云为合作伙伴提供哪些支持？ 培训 技术 实施 营销 市场 abde 判断题： 5. 在鲲鹏社区中，用户可以下载到鲲鹏开发套件，用来进行应用迁移。 正确","categories":[],"tags":[{"name":"答案","slug":"答案","permalink":"https://wkxuan.cn/tags/%E7%AD%94%E6%A1%88/"}]},{"title":"工程与社会第七、八章答案","slug":"没啥用/工程与社会第七、八章答案","date":"2020-10-29T09:11:30.000Z","updated":"2022-10-18T05:36:59.120Z","comments":true,"path":"/c4cdfe3d.html","link":"","permalink":"https://wkxuan.cn/c4cdfe3d.html","excerpt":"注：此条blog内容全部从公众号“答题小伙伴“获得，如果有人因为借鉴本文答题出错，博主概不负责","text":"注：此条blog内容全部从公众号“答题小伙伴“获得，如果有人因为借鉴本文答题出错，博主概不负责 第七章工程与管理1已完成1 【单选题】工程专业教育最早在哪个领域展开?() A、土木工程 B、交通工程 C、环境工程 D、化工工程 我的答案：A 2 【单选题】2017年2月教育部提出了什么行动方案?() A、新理科 B、新农科 C、新学科 D、新工科 我的答案：D 3 【多选题】工程师应该具备的专业能力有哪些?() A、问题分析能力 B、设计/开发解决方案能力 C、研究能力 D、使用现代工具能力 我的答案：ABCD 4 【多选题】工程师应该具有哪些管理能力?() A、学习能力 B、个人与管理能力 C、沟通能力 D、项目管理能力 我的答案：BCD 5 【多选题】现代工程技术具有什么性?() A、滞后性 B、先进性 C、超前性 D、落后性 我的答案：BC 工程与管理2已完成1 【单选题】工程主要建筑设计是多少年?() A、60 B、80 C、100 D、120 我的答案：C 2 【单选题】现代工程难处理的问题不包括?() A、多主体 B、多元 C、多层次 D、单一使用 我的答案：D 3 【多选题】下面哪些属于新的工程领域?() A、核工业工程 B、土木水利工程 C、制造业工程 D、信息工程 我的答案：AD 4 【多选题】下面不属于工程范畴?() A、扶贫工程 B、211工程 C、菜篮子工程 D、国防工程 我的答案：ABC 5 【多选题】一个完整的工程系统框架包括了前期研究和哪些其他过程?() A、设计 B、施工 C、运行 D、报废 我的答案：ABCD 工程与管理3已完成1 【单选题】下面哪个选项不属于工程的目的?() A、认识自然 B、改造自然 C、利用自然 D、破坏自然 我的答案：D 2 【单选题】工程与后代的基本准则是什么?() A、天人合一 B、可持续发展 C、以人为本 D、促进和谐 我的答案：B 3 【多选题】下面哪些属于工程的价值体系?() A、工程目的 B、工程组织使命 C、工程准则 D、工程总目标 我的答案：ABCD 4 【多选题】工程的使命包括哪些?() A、实现功能 B、承担个人责任 C、承担社会责任 D、承担历史责任 我的答案：ACD 5 【多选题】下面哪个选项属于工程的总目标体系?() A、功能与质量 B、经济目标 C、与环境协调 D、时间要求 我的答案：ABCD 工程与管理4已完成1 【单选题】下列各工程专业人员最紧密的哪个?() A、工程项目管理 B、工程经济学 C、工程估价 D、工程法律与合同管理 我的答案：A 2 【单选题】项目管理知识体系的缩写是什么?() A、PMBOK B、BMBOK C、HMBOK D、GMPOK 我的答案：A 3 【多选题】管理学的主要内容是什么?() A、计划 B、组织 C、领导 D、控制 我的答案：ABCD 4 【多选题】下列哪些活动可以算作一个项目?() A、玩手机 B、组织一次会议 C、开个网店 D、报考研究生 我的答案：BCD 5 【多选题】下面那些属于对工程人员进行项目管理的在职教育?() A、ABC B、PMP C、FBI D、IPMP 我的答案：BD 工程与管理5已完成1 【单选题】人体系统中的神经系统可以对应工程系统中的哪个?() A、结构系统 B、水循环系统 C、材料 D、控制系统 我的答案：D 2 【单选题】人生“工程管理”的第一个环节是什么?() A、价值定位 B、战略规划 C、项目组合管理 D、项目管理 我的答案：A 3 【单选题】工程系统中的通风系统可以对应人体系统中的哪个?() A、骨骼 B、呼吸系统 C、消化系统 我的答案：B 4 【多选题】一个人立足于世概括而言重要的是哪两点?() A、本事 B、运动能力 C、交际能力 D、自己的品牌 我的答案：AD 5 【多选题】符合国际要求的行为规范和伦理分为哪两个层次?() A、日常生活 B、政治生活 C、学术生活 D、思想生活 我的答案：AC 工程与管理6已完成1 【单选题】时间管理的第一步是什么?() A、罗列工作 B、设置目标 C、确认优先级 D、实施行动 我的答案：B 2 【单选题】一个事务是否能实现我们首先要做的是?() A、价值评估 B、资源分配评估 C、战略贡献评估 D、可行性评估 我的答案：D 3 【多选题】下列哪些属于事务的评价标准?() A、收益 B、战略贡献 C、资源使用有效性 D、可行性 我的答案：ABCD 4 【多选题】对日常事务的时间计划方法有哪些?() A、近期工作清单 B、日历表 C、里程碑计划 D、横道图 我的答案：AB 5 【多选题】下面哪个属于项目型时间计划方法?() A、近期工作清单 B、日历表 C、里程碑计划 D、横道图 我的答案：CD 第八章工程与安全10已完成1 【单选题】为了避免实验室里的很多安全事故,一定要提醒自己:( )。 A、防护好麻烦啊 B、今天实验简单,可以不用防护 C、不要侥幸,别怕麻烦 D、怎么简单怎么来 我的答案：C 2 【多选题】如何防范高校实验室爆炸事故:( )。 A、充分认识危险化学品使用可能造成的危害; B、实验时做好充足的人身防护,操作规范掌握到位; C、实验室需要准备好必要的应急预案; D、警惕易燃易爆气体如氢气,乙炔等气体大量逸入空气,引起爆燃 我的答案：ABCD 3 【多选题】爆炸的毁坏力极大,必须严格加以防范。凡是有爆炸危险的实验必须有具体的安全指导,严格执行。此外应该遵循:( )。 A、取出的试剂药品可以倒回储备瓶中,也可以随手倾入污物缸。 B、在做高压实验时,应使用防护屏或戴防护面罩。 C、在使用和制备易燃易爆气体时,应在通风橱内进行,可在其附近点火。 D、煤气灯用完后或中途煤气供应中断时,应立即关闭煤气龙头。 我的答案：BD 4 【多选题】有效的防范才是对待事故最积极的态度。为预防实验室事故,应切实牢记:( )。 A、没有100%的安全,只有100%的安全防范。 B、危险的发生,往往就在一念之间。 C、切记,一定要严格按照规范进行操作。 D、注意化学实验室安全。 我的答案：ABCD 5 【多选题】搞建设、谋发展,必须牢固树立科学、安全、可持续的理念,坚持“( )”的理念。() A、科学发展 B、以人为本 C、处理好速度、质量和效益的关系。 D、生命高于一切 我的答案：BD 工程与安全10已完成1 【单选题】火灾报警系统的正确顺序为:( )。 A、探测、报警、控制、疏散 B、报警、探测、控制、疏散 C、报警、控制、探测、疏散 D、探测、控制、报警、疏散 我的答案：A 2 【单选题】目前,火灾报警器辅助系统中的可燃气体探测器最多应用于哪个领域:( )。 A、生物制药 B、家庭电器 C、石油化工 D、,新能源 我的答案：C 3 【单选题】电气火灾报警系统,目前该系统大多使用于:( )。 A、地铁工程 B、大型城市隧道工程 C、国家数据中心 D、以上都是 我的答案：D 4 【单选题】电气火灾报警系统可以早期发现电气线路是否存在:( )。 A、相位差 B、电位差 C、电热差 D、电流差 我的答案：A 工程与安全11已完成1 【单选题】 消防通讯系统不包括：（ ） A、消防对讲电话主机 B、电话分机 C、消防电话插口 D、手机 我的答案：D 2 【单选题】 下列选项中，不属于独立主网优点的是：（ ） A、接口成熟 B、专网专用 C、综合监控调试 D、调试独立我的答案：C 3 【多选题】 常规火灾探测器分为：（ ）。 A、温感 B、烟感 C、手报 D、消报 我的答案：ABCD 4 【多选题】 新型探测器分为：（ ） A、线性感温探测器 B、吸气式烟雾探测器 C、可燃气体探测器 D、电气火灾监控系统我的答案：ABCD 5 【多选题】 辅助监控包括：（ ） A、消防电话B、消防电源监控C、防火门监控系统D、消防水池液位监控E、直接启动盘 我的答案：ABCDE 工程与安全12已完成1 【单选题】在火灾的发生与系统处理程序中,以下不属于探测阶段的是:( )。 A、手动报警 B、声光报警 C、报警信号 D、紧急通讯 我的答案：B 2 【单选题】火灾产生类型中,对于A类物质,通常在燃烧时,首先:( )。 A、产生烟 B、产生少量明火 C、产生大量明火 D、产生大量烟和明火 我的答案：A 3 【单选题】发生气体着火时,由( )通知人员撤离。 A、气体灭火控制器 B、声光报警器 C、喷洒指示灯 D、紧急启停按钮 我的答案：B 4 【多选题】联动系统和报警系统包括:( )。 A、BAS/ISCS B、配电系统 C、灭火系统 D、防排烟系统 我的答案：ABCD 5 【多选题】气体灭火控制系统组成分为:( )。 A、气体灭火控制盘 B、紧急启停按钮 C、警铃及声光报警器 D、释放显示门灯 我的答案：ABCD 工程与安全13已完成1 【单选题】火灾特点-突发性强,下列不体现该特点的是:( )。 A、建筑内存有较多的可燃材料 B、有较多的致火因子 C、建筑内电线老化 D、建筑使用大理石材料 我的答案：D 2 【单选题】火灾特点-扑救难度大,下列不体现该特点的是:( )。 A、消防设施有限 B、火势蔓延缓慢 C、消防队进场不便,取水难 D、消防水量及水压不足 我的答案：B 3 【多选题】特殊建筑防火-火灾常见的致火因子有:( )。 A、电焊作业 B、乱接电线 C、大功率电器 D、使用明火 我的答案：ABC 4 【多选题】特殊建筑防火-火灾常见的致火因子中致火因素有:( )。 A、屋面热防水 B、电暖器取暖 C、天然气当燃料 D、使用明火灶 我的答案：AB 5 【多选题】建筑内存在的可燃材料包括:( )。 A、保温材料 B、油漆 C、化工材料 D、生活用品 我的答案：ABCD 工程与安全14已完成1 【单选题】火灾初期,应该:( )。 A、奋力将火控制、扑灭。 B、不管不顾 C、大呼小叫 D、打110报警 我的答案：A 2 【单选题】清水灭火器通过冷却作用灭火,主要用于扑救( )类火灾的初期。 A、A类 B、B类 C、C类 D、D类 我的答案：A 3 【单选题】清水灭火器在使用过程中切忌将灭火器:( )。 A、保持直立 B、颠倒或横卧 C、加热 D、冷却 我的答案：B 4 【单选题】干粉灭火器不能用于扑救的是:( )。 A、易燃液体 B、可燃气体 C、电气设备 D、金属火灾 我的答案：D 5 【单选题】磷酸铵盐干粉灭火器可灭( )。 A、固体 B、液体 C、气体 D、都可以 我的答案：D 工程与安全15已完成1 【单选题】消防水系统中消防水池高度超过( )米,应设临时中转水池及加压水泵。() A、80 B、100 C、120 D、150 我的答案：B 2 【单选题】消防水系统中给水压力应满足消防水枪充实水柱长度不小于( )米的要求。 A、8 B、10 C、12 D、15 我的答案：B 3 【单选题】消防水系统中消防竖管不少于( )条,管径不应小于DN( )。 A、2,100 B、3,80 C、4,60 D、5,40 我的答案：A 4 【单选题】 人员密集的公共场所每（ ）天检查一次。A、10B、15C、14D、20我的答案：B 5 【多选题】灭火器基本配制要求:( )。 A、灭火器类型,规格 B、灭火器级别符合配置要求 C、灭火器数量符合配置要求 D、灭火器放置,铭牌朝外,器头向上 我的答案：ABCD 工程与安全16已完成1 【单选题】安全疏散基本原则都以( )为重点。 A、设计 B、改造 C、管理 D、以上都对 我的答案：D 2 【单选题】合理布置疏散路线,绝不能产生“( )”。 A、顺流 B、逆流 C、错流 D、并流 我的答案：B 3 【单选题】为了保证人们在火灾时能顺利疏散,高层建筑至少应设( )个疏散楼梯。 A、1 B、2 C、3 D、4 我的答案：B 4 【多选题】单位应在显著位置设置( )。 A、场所的火灾危险性 B、安全出口、疏散通道和逃生路线 C、消防器材的位置和使用方法 D、楼层的高度 我的答案：ABC 5 【多选题】提高消防管理人员“能力”包括:( )。 A、检查消除火灾隐患的能力 B、组织扑救初起火灾的能力 C、组织人员疏散逃生的能力 D、消防宣传教育培训的能力 我的答案：ABCD","categories":[],"tags":[{"name":"答案","slug":"答案","permalink":"https://wkxuan.cn/tags/%E7%AD%94%E6%A1%88/"}]},{"title":"工程与社会第三、四章答案","slug":"没啥用/工程与社会第三、四章答案","date":"2020-10-29T09:11:30.000Z","updated":"2022-10-18T05:36:59.121Z","comments":true,"path":"/a40d29e4.html","link":"","permalink":"https://wkxuan.cn/a40d29e4.html","excerpt":"注：此条blog内容全部从公众号“答题小伙伴“获得，如果有人因为借鉴本文答题出错，博主概不负责","text":"注：此条blog内容全部从公众号“答题小伙伴“获得，如果有人因为借鉴本文答题出错，博主概不负责 第三章工程与经济1 课程概述1 【单选题】 工程经济学的研究对象（） A、 工程项目 B、 工程领域 C、 经济活动 D、 工程技术活动 我的答案：A 2 【单选题】 工程经济学研究的内容，从全局的范围来看，不包括以下哪方面的问题（） A、 技术引进方案的论证问题 B、 投资方面，项目选择问题 C、 物资及项目开发引资的成本问题与利率问题 D、 外资的利用与偿还，引进前的可行性研究与引进后的经济效果评价问题 $\\color&#123;red&#125;&#123;红色字&#125;$ 我的答案：C 3 【单选题】 工程经济学最早可以追溯到哪一年？（） A、 1880年 B、 1887年 C、 1897年 D、 1920年 我的答案：B 4 【多选题】 以下属于改造世界范畴的含义有（） A、 科学 B、 技术 C、 工程 D、 发明 我的答案：BC 5 【多选题】 工程经济学是一门（ ）和（ ）统一关系及其发展规律的科学。（） A、 研究技术 B、 经济科学 C、 经济辩证 D、 工程分析 我的答案：AC 工程与经济2 资金时间价值的计算1 【单选题】 某建设项目分期投资，第一年年初为200万，第二年年初为300万，第三年年初为400万。若年利率为9%，则其总投资的现值应为多少万元？（） A、 811.9 B、 849.23 C、 828.7 D、 847.6 我的答案：A 2 【单选题】 某项目向银行贷款125万元，每年25万元，分5年来用于项目的补充投资，年利率为9%，要求5年后一次还本付息，则到期（5年末）应付的本利和为（ ）万元。 A、 122.1 B、 150.37 C、 149.62 D、 129.3 我的答案：C 3 【单选题】 某人想在5年后，从银行提出50万元用于购买住房，若银行年存款率为6%，那么此人现在应每年存入银行多少钱？（） A、 72389.92 B、 74193.8 C、 88698.2 D、 86194.7 我的答案：C 4 【单选题】 某工程项目一次投资20000元，设定利率为7%，分5年每年年末等额回收。问每年至少回收多少才能收回全部投资？（） A、 3926 B、 4878 C、 6029 D、 7514 我的答案：B 5 【单选题】 某人为其小孩上大学准备了一笔资金，打算让小孩在今后的4年中，每个月取出一千块钱作为生活费。现在银行存款月利率为0.5%，那么此人现在应存入银行多少钱？（） A、 42580.32 B、 44641.86 C、 43521.07 D、 45739.26 我的答案：A 6 【多选题】 以下可能属于复利的方式是（ ）。 A、 定期存款 B. 贷款 C. 国库券利息 D. 活期存款 B、 贷款 C、 国库券利息 D、 活期存款 我的答案：BC 工程与经济4 投资方案的评价判据1 【单选题】 根据净现金流量表，求静态投资回收期（ ）。 微信截图_20191108154308.png A、 4.33 B、 4.25 C、 4.67 D、 4.17 我的答案：B 2 【单选题】 某项目现金流量如表所示，基准收益率为12%，该项目财务净现值为多少？ A、 -27.85 B、 -31.24 C、 -37.6 D、 -41.78 我的答案：D 3 【单选题】 内部收益率是指在项目整个寿命期内，各年（ ）累计等于0时的折现率。 A、 费用现值 B、 净现值 C、 内部收益 D、 现金流量 我的答案：B 4 【单选题】 计算IRR时，采用试算使公式中的△i小于（ ），目的是减少内插的误差。（） A、 5% B、 4% C、 3% D、 2% 我的答案：A 5 【多选题】 以下属于投资评价重点评价指标的是（ ）。 A、 投资回收期. B、 净现值 C、 借贷款偿还期 D、 内部收益率 我的答案：ABD 工程与经济5 投资方案的比较和选择1 【单选题】 进行投资增额净现值比较时，计算两方案的现金流量增额的净现值（ ），说明竞赛方案优于临时最优方案。 A、 小于0 B、 大于0 C、 等于0 D、 不等于0 我的答案：B 2 【单选题】 用收益率来比较方案时，一定要用（ ）。 A、 内部收益率 B、 基准收益率 C、 投资增额收益率 D、 现金收益率 我的答案：C 3 【单选题】 采用净年值作为评比标准，至少要计算（ ）个周期的年度等值？ A、 0 B、 1 C、 2 D、 全部 我的答案：B 4 【多选题】投资方案比较的原则是（ ）。 A、通过对现金流量差额的评价来作出判断 B、通过对相对增加的投资回收期来作出判断 C、一般情况下的比较需要有一个基准 D、一般情况下需要计算绝对的经常费用节省 我的答案：AC 5 【多选题】 哪几项作为方案的比较，判据是相互一致的？（） A、 净现值 B、 将来值 C、 年度等值 D、 净年值 我的答案：ABC 第四章工程与安全11【单选题】本节工程安全课程主要讲哪方面相关安全技术:( )。 A、生物工程 B、化工工程 C、材料工程 D、土木工程 我的答案：B 2【单选题】下列( )事故发生后国务院成立事故调查组。() A、山东青州车间爆炸事故。 B、江苏昆山集装箱爆燃事故。 C、江苏盐城响水爆炸事故。 D、江苏扬州脚手架坠落事故。 我的答案：C 3【多选题】下列( )事故发生于2019年3月21日。() A、江苏盐城响水爆炸事故。 B、江苏扬州脚手架坠落事故。 C、湖南长常高速客车起火事故。 D、成都双流机场钢筋倾倒事故。 我的答案：ABD 4【多选题】国务院“江苏响水天嘉宜公司‘3.21’特别重大爆炸事故”调查组召开第一次全体会议提到江苏省一些地方和企业在改进安全生产工作上( )。 A、不认真 B、不扎实 C、走形式 D、走过场 我的答案：ABCD 5【多选题】《关于进一步加强安全生产工作的意见(征求意见稿)》主要内容有:( )。 A、全面彻底排查隐患和隐患整治。 B、严格落实企业主体责任。 C、夯实安全生产基础。 D、全面提升安全监管能力。 我的答案：ABCD 工程与安全21【单选题】石油化学工业分哪( )类。 A、基本原料类 B、中间原料类 C、中产品类 D、以上都是 我的答案：D 2【单选题】化工装置主要危险特性为( )。 A、易燃、易爆性 B、腐蚀、毒性伤害 C、高温、高压、灼烫伤 D、以上都是 我的答案：D 3【单选题】下列( )不是化工原料及产品的火灾危险特性。 A、遇水分解物质 B、氧化剂 C、可燃气体 D、爆炸性物质 我的答案：A 4【单选题】原国家安全监管总局两次共计确立了( )种重点监管的危险化工工艺。 A、3 B、15 C、18 D、19 我的答案：C 5【多选题】化工行业分类可按( )划分。 A、目的 B、原材料 C、中间体 D、产品 我的答案：BD 6【多选题】化工生产的特点为( )。 A、化工生产涉及的危险品种类多。 B、化工生产的工艺条件苛刻。 C、生产规模大型化。 D、,新生产方式连续化和自动化。 我的答案：ABCD 7【多选题】裂解(裂化)工艺危险特点有:( )。 A、在高温(高压)下进行反应。 B、炉管内壁结焦会使流体阻力增加,影响传热。 C、有些裂解工艺产生的单体会自聚或爆炸。 D、人为操作失误引起爆炸。 我的答案：ABC 8【多选题】加氢工艺危险特点有:( ) A、反应物料具有燃爆危险性。 B、催化剂再生和活化过程中易引发爆炸。 C、钢制设备发生氢脆。 D、加氢反应尾气易引发着火或爆炸。 我的答案：ABCD 9【多选题】氯化工艺危险特点有:( )。 A、氯化反应是一个放热过程。 B、所用原料大多具有燃爆危险性。 C、生成的氯化氢气体遇水后腐蚀性强。 D、氯化反应尾气可能形成爆炸性混合物。 我的答案：ABCD 10【多选题】新型煤化工工艺危险特点有:( )。 A、反应介质涉及多种易燃气体,具有燃爆危险性。 B、反应过程多为高温、高压过程。 C、反应过程可能形成爆炸性混合气体。 D、反应中间产物不稳定,易造成分解爆炸。 我的答案：ABCD 工程与安全31【单选题】原国家安全监管总局两次共计确立了( )种重点监管的危险化工工艺。 A、3 B、15 C、18 D、19 我的答案：C 2【多选题】裂解(裂化)工艺危险特点有:( )。 A、在高温(高压)下进行反应。 B、炉管内壁结焦会使流体阻力增加,影响传热。 C、有些裂解工艺产生的单体会自聚或爆炸。 D、人为操作失误引起爆炸。 我的答案：ABC 3【多选题】加氢工艺危险特点有:( ) A、反应物料具有燃爆危险性。 B、催化剂再生和活化过程中易引发爆炸。 C、钢制设备发生氢脆。 D、加氢反应尾气易引发着火或爆炸。 我的答案：ABCD 4【多选题】氯化工艺危险特点有:( )。 A、氯化反应是一个放热过程。 B、所用原料大多具有燃爆危险性。 C、生成的氯化氢气体遇水后腐蚀性强。 D、氯化反应尾气可能形成爆炸性混合物。 我的答案：ABCD 5【多选题】新型煤化工工艺危险特点有:( )。 A、反应介质涉及多种易燃气体,具有燃爆危险性。 B、反应过程多为高温、高压过程。 C、反应过程可能形成爆炸性混合气体。 D、反应中间产物不稳定,易造成分解爆炸。 我的答案：ABCD 工程与安全41【单选题】《化学品生产单位特殊作业安全规范》(GB 30871-2014)于( )起正式实施。 A、2016年6月1日 B、2016年5月1日 C、2015年5月1日 D、2015年6月1日 我的答案：D 2【单选题】《化学品生产单位特殊作业安全规范》(GB 30871-2014)涉及( )项作业内容。 A、7 B、8 C、9 D、10 我的答案：B 3【单选题】《遏制危险化学品和烟花爆竹重特大事故工作意见》规定自2016年7月1日起,所有仓储经营企业构成重大危险源的危险化学品罐区动火作业全部按( )进行升级管理。 A、一级动火 B、二级动火 C、三级动火 D、特殊动火 我的答案：D 4【多选题】固定动火区外的动火作业一般分为哪几个级别() A、一级动火 B、二级动火 C、三级动火 D、特殊动火 我的答案：ABD 5【多选题】江苏省安监局《关于印发加强化工(危险化学品)企业动火作业安全管理工作指导意见》规定有:( )。 A、修订完善动火作业安全管理制度。 B、实行动火作业提级审批。 C、加强动火作业现场安全管理。 D、强化经营(储存)企业的动火管理。 我的答案：ABCD 工程与安全51【单选题】化工设备需要处理:( )。 A、易燃易爆介质 B、有腐蚀性介质 C、有毒介质 D、以上都是 我的答案：D 2【多选题】化工设备需要承受:( )。 A、高温 B、高压 C、低温 D、高真空度 我的答案：ABCD 3【多选题】化工设备事故主要包括:( )。 A、爆炸事故 B、严重腐蚀 C、泄露中毒 D、管束失效 我的答案：ABCD 4【多选题】流体输送泵有哪几种形式:( )。 A、叶片泵 B、容积式泵 C、电磁泵 D、喷射泵 我的答案：ABCD 5【多选题】灭火器的种类有:( )。 A、干粉灭火器 B、泡沫灭火器 C、二氧化碳灭火器 D、卤代烷灭火器 我的答案：ABCD 工程与安全61【单选题】“海因里希事故法则”是美国著名安全工程师海因里希提出的( )法则。() A、300:30:1 B、300:29:1 C、400:40:1 D、400:39:1 我的答案：B 2【单选题】从2018年化工事故类型分布图中可知造成死亡人数最多的事故是:( )。 A、中毒和窒息 B、爆炸 C、高处坠落 D、机械伤害 我的答案：B 3【单选题】运输环节中事故百分比最高的是:( )。 A、火灾 B、爆炸 C、泄露 D、其他 我的答案：C 4【多选题】构成危险化学品事故的必要条件是:( )。 A、危险化学品 B、操作不当 C、设备老化 D、事故 我的答案：AD 5【多选题】海因里希事故因果连锁理论认为:( )。 A、伤亡事故的发生不是一个孤立的事件。 B、事故的发生是由于人的不安全行为和物的不安全状态。 C、要消除轻伤事故必须先消除无伤事故。 D、安全工作必须从基础抓起。 我的答案：ABCD 工程与安全71【单选题】“海因里希事故法则”是美国著名安全工程师海因里希提出的( )法则。() A、300:30:1 B、300:29:1 C、400:40:1 D、400:39:1 我的答案：B 2【单选题】从2018年化工事故类型分布图中可知造成死亡人数最多的事故是:( )。 A、中毒和窒息 B、爆炸 C、高处坠落 D、机械伤害 我的答案：B 3【单选题】运输环节中事故百分比最高的是:( )。 A、火灾 B、爆炸 C、泄露 D、其他 我的答案：C 4【多选题】构成危险化学品事故的必要条件是:( )。 A、危险化学品 B、操作不当 C、设备老化 D、事故 我的答案：AD 5【多选题】海因里希事故因果连锁理论认为:( )。 A、伤亡事故的发生不是一个孤立的事件。 B、事故的发生是由于人的不安全行为和物的不安全状态。 C、要消除轻伤事故必须先消除无伤事故。 D、安全工作必须从基础抓起。 我的答案：ABCD 工程与安全81【单选题】对天津港“8.12”瑞海公司危险品仓库特别重大火灾爆炸事故描述不符的是:( )。 A、共计两次爆炸 B、造成大量人员伤亡 C、事故直接原因是硝化棉自燃 D、企业合法经营 我的答案：D 2【多选题】粉尘爆炸的要素有:( )。 A、可燃粉尘、粉尘云 B、引火源 C、助燃物 D、空间受限 我的答案：ABCD 3【多选题】靖江德桥仓储“4.22”火灾事故暴露出:( )。 A、事故企业安全生产主体责任不落实。 B、重大危险源管控严重不到位。 C、特殊作业管理和承包商管理缺失。 D、,应急处置不当。 我的答案：ABCD 4【多选题】中国矿业大学“4.5”爆炸死亡事故教训有:( )。 A、加强科研实验室集中统一管理, 对易燃易爆气体要加强统一管理 B、对易燃易爆气体要加强统一管理, 加强对使用的气瓶的安全检查 C、加强对实验室人员的安全知识培训和法规教育 D、完善学校应急管理,全面提高应急处置水平 我的答案：ABCD 5【多选题】南京中医药大学翰林学院“11.11”爆燃事故间接原因有:( )。 A、未设置静电消除装置 B、未设置安全泄放装置 C、未设置相匹配的安全阀 D、实训教学操作安全培训不到位 我的答案：ABCD","categories":[],"tags":[{"name":"答案","slug":"答案","permalink":"https://wkxuan.cn/tags/%E7%AD%94%E6%A1%88/"}]},{"title":"Hello World","slug":"博客相关/hello-world","date":"2020-07-15T16:00:00.000Z","updated":"2022-10-18T05:36:59.104Z","comments":true,"path":"/4a17b156.html","link":"","permalink":"https://wkxuan.cn/4a17b156.html","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"域名的购买及使用","slug":"博客相关/域名的购买及使用","date":"2020-07-05T07:32:13.000Z","updated":"2022-11-07T04:48:01.707Z","comments":true,"path":"/d504a80.html","link":"","permalink":"https://wkxuan.cn/d504a80.html","excerpt":"很多网站都提供域名的购买，这里提供了腾讯云（也就是这篇文章啦）和godaddy（b站视频）两个，取其一就好。本文仅供借鉴","text":"很多网站都提供域名的购买，这里提供了腾讯云（也就是这篇文章啦）和godaddy（b站视频）两个，取其一就好。本文仅供借鉴 购买腾讯云域名（或其他） 进入 腾讯云 然后登陆（或者注册） 在腾讯云主页找到“域名注册”，找到自己喜欢的域名然后购买 购买完成之后，点击右上角的“控制台”，然后进入“域名管理” 查看域名的“服务状态”，可能需要实名认证，如果需要就按照腾讯云官方给的提示来就好，不需要的话请忽略这步 点击“操作”下面的“解析”，默认情况下是有两个记录的，不用管它 添加如下三条记录： 主机记录 纪录类型 线路类型 记录值 @ A 默认 192.30.252.153 @ A 默认 192.30.252.154 www CNAME 默认 你的github昵称.github.io(也就是你原本的博客地址) 解释一下，192.30.252.153和192.30.252.154是github官方给出的ip地址（别人说的），但是我没法访问，很奇怪。 添加完之后，这里有两种操作方法 直接在github的仓库里操作 在本地cmd中操作第一种方法简单，但是如果要继续维护的话，还是避免不了第二种，所以我就直接说第二种了。 在blog\\source文件夹中生成一个CNAME文件（注意无后缀名） 用记事本打开该文件然后添加你买的域名地址，保存并关闭 cmd中基本操作：hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 然后应该就可以了 附带一个不错的b站的教程，这里他用的是godaddy和dnspod，我就直接用了腾讯云，方便一点","categories":[],"tags":[{"name":"博客优化","slug":"博客优化","permalink":"https://wkxuan.cn/tags/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/"}]},{"title":"搭建博客全过程","slug":"博客相关/如何搭建博客-维护","date":"2020-06-06T09:53:13.000Z","updated":"2022-11-07T04:47:56.256Z","comments":true,"path":"/68ee77c1.html","link":"","permalink":"https://wkxuan.cn/68ee77c1.html","excerpt":"适合小白的基础教程","text":"适合小白的基础教程 下载node.js：直接百度然后安装 win+r打开 cmd1)输入node -v检查node版本2)输入npm -v检查npm版本 输入npm install -g cnpm --registry=https://registry.npm.taobao.org然后等待安装完成 输入cnpm install -g hexo-cli等待安装完成 输入hexo -v你就会发现hexo被安装完成了，博客也就搭建完成了！ 提示默认目录：C:\\User\\你的电脑可以通过输入d:来进入D盘 输入cd \\XXX来进入XXX文件夹（如果XXX文件夹存在的话） 正式生成blog 输入mkdir blog你就会在当前目录下生成一个blog的文件夹，你所有写的博客的内容都会存储在这个文件夹内 输入cd blog/进入blog (可以输入pwd可以查看路径是否正确) 输入hexo init即利用hexo初始化一个博客 输入hexo s正式启动我们的博客 此时它会给我们生成一个本地的localhost:4000窗口，我们可以在浏览器中输入localhost:4000访问 写一篇文章 输入hexo n“我的第一篇博客文章”（可以输入dir查看当前目录的文件） 输入vim 我的第一篇博客文章.md然后进入这篇博客，给它增加些内容（我是用VScode打开md文件编辑的，更方便一点，不过记事本、Subline Text，Notepad++也都可以） 编辑完成后，输入hexo clean清除database， 然后再输入hexo g生成一下，然后再输入hexo s启动，再用浏览器打开localhost:4000就可以本地访问了 至此，hexo博客的搭建已经完成了，下面我们需要的就是把文章部署到远端去，好让别人能看到 这里有一个免费的部署的方式就是部署到GitHub上去，通过GitHub的地址访问我们的博客 如何将我们的博客部署到GitHub上公开使用： 登录github 然后New repository 注意！Repository name 一定要是 ：你的昵称.github.io 创建完成之后继续在cmd中： 输入cnpm install --save hexo-deployer-git进行安装 在文件夹中找到_config.yml 文件，打开后在底部加上： 1234deploy: type: git repo: https://github.com/你的昵称/你的昵称.github.io.git branch: master 完成后保存退出 cmd中输入hexo d然后登录GitHub就可以了（如果错误就试试加上一句： git config --global user.name &#39;你的用户名&#39;） 浏览器中打开网页：htts://你的昵称.github.io 大功告成！！！ 更换主题：这里只举一个简单地例子： cmd输入git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 这样就把yilia的主题复制到themes/yilia文件夹中了 打开_config.yml 把theme的值更改成yilia 输入hexo clean 输入hexo g 输入hexo s6.输入hexo d 搭建完成后的基本维护：hexo n &quot;新的文章&quot;、 hexo clean、 hexo g、 hexo s、 hexo d按顺序来就行注：有时候hexo d的时候弹出ERROR Deployer not found: git，就cnpm install --save hexo-deployer-git 更改博客目录我暂时只知道 npm install -g cnpm --registry=https://registry.npm.taobao.org2.cnpm install -g hexo-cli hexo -v4.mkdir blog一步一步来就行，部署的话跟前面一样 总结：其实大多数步骤都是在cmd中完成的，而需要注意的也是，生成博客之后，所有维护的基本步骤也一定是需要在blog所在的文件夹中运行的","categories":[],"tags":[{"name":"博客优化","slug":"博客优化","permalink":"https://wkxuan.cn/tags/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/"}]},{"title":"Android Studio开发app时遇到的一些问题","slug":"Android-Studio-开发app时遇到的一些问题","date":"2020-01-19T09:22:29.000Z","updated":"2022-11-07T04:51:14.181Z","comments":true,"path":"/5652.html","link":"","permalink":"https://wkxuan.cn/5652.html","excerpt":"记录一些难过的瞬间","text":"记录一些难过的瞬间 jetbrains家的软件无法访问plugins 打开Settings。 这里有一点要说的，那就是我之前在B站看到一个视频说，如果是打开了项目之后再点击File-Settings进行配置的话，就只会配置那一个项目的Settings，但是我实际操作了之后发现，在1.开始页面配置Settings和2.项目页面配置Settings是一样的。 这里打钩 这里取消打钩（如果没有这个东西就不用管它） 黄色警告： using the default locale is a common source of bug MainActivity转到SecondActivity闪退（后来才发现是因为没有在在androidmanifest 里面所有的activity，加上即可） 从TextView中获取密码，并与【从数据库中获取的密码】相比较时（使用 &#x3D;&#x3D; ）总是返回false Java String &#x3D;&#x3D; 与 equals区别教训：String判断相等用equals","categories":[],"tags":[{"name":"记录bugs","slug":"记录bugs","permalink":"https://wkxuan.cn/tags/%E8%AE%B0%E5%BD%95bugs/"}]}],"categories":[],"tags":[{"name":"C++","slug":"C","permalink":"https://wkxuan.cn/tags/C/"},{"name":"ACM","slug":"ACM","permalink":"https://wkxuan.cn/tags/ACM/"},{"name":"记录bugs","slug":"记录bugs","permalink":"https://wkxuan.cn/tags/%E8%AE%B0%E5%BD%95bugs/"},{"name":"博客优化","slug":"博客优化","permalink":"https://wkxuan.cn/tags/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/"},{"name":"Bat","slug":"Bat","permalink":"https://wkxuan.cn/tags/Bat/"},{"name":"Windows","slug":"Windows","permalink":"https://wkxuan.cn/tags/Windows/"},{"name":"找班上","slug":"找班上","permalink":"https://wkxuan.cn/tags/%E6%89%BE%E7%8F%AD%E4%B8%8A/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://wkxuan.cn/tags/SpringBoot/"},{"name":"SpringSecurity","slug":"SpringSecurity","permalink":"https://wkxuan.cn/tags/SpringSecurity/"},{"name":"负载均衡","slug":"负载均衡","permalink":"https://wkxuan.cn/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"},{"name":"Docker","slug":"Docker","permalink":"https://wkxuan.cn/tags/Docker/"},{"name":"AOP","slug":"AOP","permalink":"https://wkxuan.cn/tags/AOP/"},{"name":"JDBC","slug":"JDBC","permalink":"https://wkxuan.cn/tags/JDBC/"},{"name":"Jetbrains","slug":"Jetbrains","permalink":"https://wkxuan.cn/tags/Jetbrains/"},{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://wkxuan.cn/tags/Ubuntu/"},{"name":"Jenkins","slug":"Jenkins","permalink":"https://wkxuan.cn/tags/Jenkins/"},{"name":"fun","slug":"fun","permalink":"https://wkxuan.cn/tags/fun/"},{"name":"Linux","slug":"Linux","permalink":"https://wkxuan.cn/tags/Linux/"},{"name":"项目实战","slug":"项目实战","permalink":"https://wkxuan.cn/tags/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"},{"name":"校内课程","slug":"校内课程","permalink":"https://wkxuan.cn/tags/%E6%A0%A1%E5%86%85%E8%AF%BE%E7%A8%8B/"},{"name":"答案","slug":"答案","permalink":"https://wkxuan.cn/tags/%E7%AD%94%E6%A1%88/"}]}